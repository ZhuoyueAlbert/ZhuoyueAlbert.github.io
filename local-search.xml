<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Zookeeper</title>
    <link href="/2022/07/30/Zookeeper/"/>
    <url>/2022/07/30/Zookeeper/</url>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="Zookeeper-概述"><a href="#Zookeeper-概述" class="headerlink" title="Zookeeper 概述"></a>Zookeeper 概述</h2><p>Zookeeper： 开源的分布式 Apache 项目， 为分布式框架提供协调服务。</p><h2 id="zookeeper-工作机制"><a href="#zookeeper-工作机制" class="headerlink" title="zookeeper 工作机制"></a>zookeeper 工作机制</h2><p>Zookeeper从设计模式角度来理解：是一个基于观察者模式设计的分布式服务管理框架， 它负责存储和管理大家都关心的数据， 然后接受观察者的注册， 一旦这些数据的状态发生变化， Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出相应的反应。</p><p><img src="/2022/07/30/Zookeeper/image-20220718102756026.png" alt="zookeeper working mechanism"></p><h3 id="Zookeeper-特点"><a href="#Zookeeper-特点" class="headerlink" title="Zookeeper 特点"></a>Zookeeper 特点</h3><p><img src="/2022/07/30/Zookeeper/image-20220718102839569.png" alt="zookeeper features"></p><ol><li>Zookeeper：一个领导者（Leader） ， 多个跟随者（Follower） 组成的集群。  </li><li>集群中只要有半数以上节点存活， Zookeeper集群就能正常服务。 所以Zookeeper适合安装奇数台服务器。  </li><li>全局数据一致：每个Server保存一份相同的数据副本， Client无论连接到哪个Server， 数据都是一致的。  </li><li>更新请求顺序执行， 来自同一个Client的更新请求按其发送顺序依次执行。  </li><li>数据更新原子性， 一次数据更新要么成功， 要么失败。  </li><li>实时性， 在一定时间范围内， Client能读到最新数据。</li></ol><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>ZooKeeper 数据模型的结构与 Unix 文件系统很类似，整体上可以看作是一棵树，每个节点称做一个 ZNode。每一个 ZNode 默认能够存储 1MB 的数据，<strong>每个 ZNode 都可以通过其路径唯一标识。</strong>  </p><img src="/2022/07/30/Zookeeper/image-20220718103056189-1658111586940.png" alt="zookeeper data structure" style="zoom:67%;"><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>提供的服务包括：统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下线、软负载均衡等。  </p><p><strong>统一命名服务</strong>  </p><blockquote><p>在分布式环境下， 经常需要对应用&#x2F;服务进行统一命名， 便于识别。<br>例如： IP不容易记住， 而域名容易记住。  </p></blockquote><img src="/2022/07/30/Zookeeper/image-20220718103512698.png" alt="统一命名服务" style="zoom:67%;"><p><strong>统一配置管理</strong>  </p><ol><li><strong>分布式环境下， 配置文件同步非常常见</strong>。</li></ol><blockquote><ol><li>一般要求一个集群中， 所有节点的配置信息是一致的， 比如 Kafka 集群。  </li><li>对配置文件修改后， 希望能够快速同步到各个节点上。</li></ol></blockquote><ol start="2"><li><p><strong>配置管理可交由ZooKeeper实现</strong>。  </p><blockquote><ol><li>可将配置信息写入ZooKeeper上的一个Znode。  </li><li>各个客户端服务器监听这个Znode。  </li><li>一旦Znode中的数据被修改， ZooKeeper将通知<br>各个客户端服务器。</li></ol></blockquote><img src="/2022/07/30/Zookeeper/image-20220718103822080.png" alt="**统一配置管理**" style="zoom: 67%;"></li></ol><p><strong>统一集群管理</strong>  </p><ol><li><p><strong>分布式环境中， 实时掌握每个节点的状态是必要的</strong>。  </p><blockquote><p>可根据节点实时状态做出一些调整。  </p></blockquote></li><li><p><strong>ZooKeeper可以实现实时监控节点状态变化</strong>  </p><blockquote><ol><li>可将节点信息写入ZooKeeper上的一个ZNode。</li><li>监听这个ZNode可获取它的实时状态变化。</li></ol></blockquote></li></ol><img src="/2022/07/30/Zookeeper/image-20220718104235624.png" alt="统一集群管理" style="zoom:67%;"><p><strong>服务器动态上下线</strong>  </p><img src="/2022/07/30/Zookeeper/image-20220718102756026.png" alt="服务器动态上下线" style="zoom:67%;"><p><strong>软负载均衡</strong>  </p><p>在Zookeeper中记录每台服务器的访问数， 让访问数最少的服务器去处理最新的客户端请求  </p><img src="/2022/07/30/Zookeeper/image-20220718104414502.png" alt="软负载均衡" style="zoom:67%;"><p><strong>配置参数</strong></p><ol><li><p>tickTime &#x3D; 2000： 通信心跳时间， Zookeeper服务器与客户端心跳时间，单位毫秒  </p></li><li><p>initLimit &#x3D; 10： LF初始通信时限  </p><blockquote><p>Leader和Follower初始连接时能容忍的最多心跳数（tickTime的数量）  </p></blockquote></li><li><p>syncLimit &#x3D; 5： LF同步通信时限  </p><blockquote><p>Leader和Follower之间通信时间如果超过syncLimit * tickTime， Leader认为Follwer死掉，从服务器列表中删除Follwer。  </p></blockquote></li><li><p>dataDir： 保存Zookeeper中的数据  </p><blockquote><p>注意： 默认的tmp目录，容易被Linux系统定期删除，所以一般不用默认的tmp目录。  </p></blockquote></li><li><p>clientPort &#x3D; 2181：客户端连接端口，通常不做修改。</p></li></ol><h2 id="选举机制（重点）"><a href="#选举机制（重点）" class="headerlink" title="选举机制（重点）"></a>选举机制（重点）</h2><p><strong>Zookeeper选举机制——第一次启动</strong>  </p><p><img src="/2022/07/30/Zookeeper/image-20220718105704102.png" alt="First Time"></p><blockquote><p><strong>SID</strong>： 服务器ID。 用来唯一标识一台ZooKeeper集群中的机器，每台机器不能重复， 和myid一致。  </p><p><strong>ZXID</strong>：事务ID。 ZXID是一个事务ID，用来标识一次服务器状态的变更。 在某一时刻，集群中的每台机器的ZXID值不一定完全一致，这和ZooKeeper服务器对于客户端“更新请求”的处理逻辑有关。  </p><p><strong>Epoch</strong>： 每个Leader任期的代号。没有Leader时同一轮投票过程中的逻辑时钟值是相同的。每投完一次票这个数据就会增加  </p></blockquote><p><strong>过程</strong></p><ol><li>服务器1启动， 发起一次选举。 服务器1投自己一票。 此时服务器1票数一票， 不够半数以上（ 3票） ， 选举无法完成， 服务器1状态保持为 LOOKING；</li><li>服务器2启动， 再发起一次选举。 服务器1和2分别投自己一票并交换选票信息： 此时服务器1发现服务器2的myid比自己目前投票推举的（服务器1）大， 更改选票为推举服务器2。 此时服务器1票数0票， 服务器2票数2票， 没有半数以上结果， 选举无法完成， 服务器1， 2状态保持 LOOKING  </li><li>服务器3启动， 发起一次选举。 此时服务器1和2都会更改选票为服务器3。 此次投票结果：服务器1为0票， 服务器2为0票， 服务器3为3票。 此时服务器3的票数已经超过半数， 服务器3当选Leader。 服务器1， 2更改状态为 FOLLOWING， 服务器3更改状态为 LEADING；  </li><li>服务器4启动， 发起一次选举。 此时服务器1， 2， 3已经不是LOOKING状态， 不会更改选票信息。 交换选票信息结果：服务器3为3票， 服务器4为1票。 此时服务器4服从多数， 更改选票信息为服务器3， 并更改状态为 FOLLOWING；  </li><li>服务器5启动， 同4一样当 FOLLOWING。</li></ol><p><strong>Zookeeper选举机制——非第一次启动</strong></p><p><img src="/2022/07/30/Zookeeper/image-20220718110610844.png" alt="Non-First"></p><ol><li><p>当ZooKeeper集群中的一台服务器出现以下两种情况之一时， 就会开始进入Leader选举：  </p><blockquote><ol><li>服务器初始化启动  </li><li>服务器运行期间无法和Leader保持连接。</li></ol></blockquote></li><li><p>而当一台机器进入Leader选举流程时，当前集群也可能会处于以下两种状态：  </p><blockquote><p>集群中本来就已经存在一个Leader。  </p><p>对于第一种已经存在Leader的情况，机器试图去选举Leader时，会被告知当前服务器的Leader信息，对于该机器来说，仅仅需要和Leader机器建立连接，并进行状态同步即可。  </p></blockquote><blockquote><p><strong>集群中确实不存在 Leader</strong>。  </p><p>假设ZooKeeper由5台服务器组成， SID分别为1、 2、 3、 4、 5， ZXID分别为8、 8、 8、 7、 7，并且此时SID为3的服务器是Leader。某一时刻，3和5服务器出现故障，因此开始进行Leader选举。  </p></blockquote><table><thead><tr><th>SID</th><th>( Epoch, ZXID, SID )</th></tr></thead><tbody><tr><td>1</td><td>( 1, 8, 1 )</td></tr><tr><td>2</td><td>( 1, 8, 2 )</td></tr><tr><td>4</td><td>( 1, 7, 4 )</td></tr></tbody></table><p><strong>选举Leader规则</strong>： </p><p>①EPOCH大的直接胜出 </p><p>②EPOCH相同，事务id大的胜出 </p><p>③事务id相同，服务器id大的胜出</p></li></ol><h2 id="客户端命令行操作"><a href="#客户端命令行操作" class="headerlink" title="客户端命令行操作"></a>客户端命令行操作</h2><p><strong>ZK 集群启动停止脚本</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>case $1 in<br>&quot;start&quot;)&#123;<br>    for i in hadoop102 hadoop103 hadoop104<br>    do<br>        echo ---------- zookeeper $i 启动 ------------<br>        ssh $i &quot;/opt/module/zookeeper-3.5.7/bin/zkServer.sh start&quot;<br>    done<br>&#125;;;<br>&quot;stop&quot;)&#123;<br>    for i in hadoop102 hadoop103 hadoop104<br>    do<br>        echo ---------- zookeeper $i 停止 ------------<br>        ssh $i &quot;/opt/module/zookeeper-3.5.7/bin/zkServer.sh<br>        stop&quot;<br>    done<br>&#125;;;<br>&quot;status&quot;)&#123;<br>    for i in hadoop102 hadoop103 hadoop104<br>    do<br>        echo ---------- zookeeper $i 状态 ------------<br>        ssh $i &quot;/opt/module/zookeeper-3.5.7/bin/zkServer.sh<br>        status&quot;<br>    done<br>&#125;;;<br>esac<br></code></pre></td></tr></table></figure><p><strong>命令行语法</strong>  </p><table><thead><tr><th>命令基本语法</th><th>功能描述</th></tr></thead><tbody><tr><td>help</td><td>显示所有操作命令</td></tr><tr><td>ls path</td><td>使用 ls 命令来查看当前 znode 的子节点 [可监听]:  -w 监听子节点变化 -s 附加次级信息</td></tr><tr><td>create</td><td>普通创建 -s 含有序列 -e 临时（重启或者超时消失）</td></tr><tr><td>get path</td><td>获得节点的值 [可监听] -w 监听节点内容变化 -s 附加次级信息</td></tr><tr><td>set</td><td>设置节点的具体值</td></tr><tr><td>stat</td><td>查看节点状态</td></tr><tr><td>delete</td><td>删除节点</td></tr><tr><td>deleteall</td><td>递归删除节点</td></tr></tbody></table><p><strong>查看当前节点详细数据</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[zk: hadoop102:2181(CONNECTED) 5] ls -s /<br>[zookeeper]cZxid = 0x0<br>ctime = Thu Jan 01 08:00:00 CST 1970<br>mZxid = 0x0<br>mtime = Thu Jan 01 08:00:00 CST 1970<br>pZxid = 0x0<br>cversion = -1<br>dataVersion = 0<br>aclVersion = 0<br>ephemeralOwner = 0x0<br>dataLength = 0<br>numChildren = 1<br></code></pre></td></tr></table></figure><ol><li><p>czxid： 创建节点的事务 zxid  </p><blockquote><p>每次修改 ZooKeeper 状态都会产生一个 ZooKeeper 事务 ID。事务 ID 是 ZooKeeper 中所有修改总的次序。每次修改都有唯一的 zxid，如果 zxid1 小于 zxid2，那么 zxid1 在 zxid2 之前发生。  </p></blockquote></li><li><p>ctime： znode 被创建的毫秒数（从 1970 年开始）  </p></li><li><p>mzxid： znode 最后更新的事务 zxid  </p></li><li><p>mtime： znode 最后修改的毫秒数（从 1970 年开始）  </p></li><li><p>pZxid： znode 最后更新的子节点 zxid  </p></li><li><p>cversion： znode 子节点变化号， znode 子节点修改次数  </p></li><li><p>dataversion： znode 数据变化号  </p></li><li><p>aclVersion： znode 访问控制列表的变化号  </p></li><li><p>ephemeralOwner： 如果是临时节点，这个是 znode 拥有者的 session id。如果不是临时节点则是 0。  </p></li><li><p>dataLength： znode 的数据长度  </p></li><li><p>numChildren： znode 子节点数量</p></li></ol><h2 id="节点类型（持久-x2F-短暂-x2F-有序号-x2F-无序号）"><a href="#节点类型（持久-x2F-短暂-x2F-有序号-x2F-无序号）" class="headerlink" title="节点类型（持久&#x2F;短暂&#x2F;有序号&#x2F;无序号）"></a>节点类型（持久&#x2F;短暂&#x2F;有序号&#x2F;无序号）</h2><p><img src="/2022/07/30/Zookeeper/image-20220718113044963.png" alt="Type of Node"></p><p><strong>持久</strong>（Persistent） ：客户端和服务器端断开连接后， 创建的节点不删除  </p><p><strong>短暂</strong>（Ephemeral） ：客户端和服务器端断开连接后， 创建的节点自己删除  </p><p><strong>说明</strong>：创建 znode 时设置顺序标识， znode名称后会附加一个值， 顺序号是一个单调递增的计数器， 由父节点维护  </p><p><strong>注意</strong>：在分布式系统中， 顺序号可以被用于为所有的事件进行全局排序， 这样客户端可以通过顺序号推断事件的顺序  </p><ol><li><p>持久化目录节点  </p><blockquote><p>客户端与Zookeeper断开连接后， 该节点依旧存在  </p></blockquote></li><li><p>持久化顺序编号目录节点  </p><blockquote><p>客户端与Zookeeper断开连接后， 该节点依旧存在， 只是Zookeeper给该节点名称进行顺序编号  </p></blockquote></li><li><p>临时目录节点  </p><blockquote><p>客户端与Zookeeper断开连接后， 该节点被删除  </p></blockquote></li><li><p>临时顺序编号目录节点  </p><blockquote><p>客 户 端 与 Zookeeper 断 开 连 接 后 ， 该 节 点 被 删 除 ， 只 是Zookeeper给该节点名称进行顺序编号。</p></blockquote></li></ol><p>例如：（创建带序号的节点（永久节点 + 带序号）  ）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">[zk: localhost:<span class="hljs-number">2181</span>(CONNECTED) <span class="hljs-number">2</span>] create -s<br><span class="hljs-regexp">/sanguo/</span>weiguo/zhangliao <span class="hljs-string">&quot;zhangliao&quot;</span><br>Created <span class="hljs-regexp">/sanguo/</span>weiguo/zhangliao0000000000<br>[zk: localhost:<span class="hljs-number">2181</span>(CONNECTED) <span class="hljs-number">3</span>] create -s<br><span class="hljs-regexp">/sanguo/</span>weiguo/zhangliao <span class="hljs-string">&quot;zhangliao&quot;</span><br>Created <span class="hljs-regexp">/sanguo/</span>weiguo/zhangliao0000000001<br>[zk: localhost:<span class="hljs-number">2181</span>(CONNECTED) <span class="hljs-number">4</span>] create -s<br><span class="hljs-regexp">/sanguo/</span>weiguo/xuchu <span class="hljs-string">&quot;xuchu&quot;</span><br>Created <span class="hljs-regexp">/sanguo/</span>weiguo/xuchu0000000002<br></code></pre></td></tr></table></figure><p>如果原来没有序号节点，序号从 0 开始依次递增。 如果原节点下已有 2 个节点，则再排序时从 2 开始，以此类推。  </p><h2 id="监听器原理"><a href="#监听器原理" class="headerlink" title="监听器原理"></a>监听器原理</h2><p>客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、节点删除、子目录节点增加删除）时， ZooKeeper 会通知客户端。监听机制保证 ZooKeeper 保存的任何的数据的任何改变都能快速的响应到监听了该节点的应用程序。  </p><p><img src="/2022/07/30/Zookeeper/image-20220718142031824.png" alt="Principle of Listener"></p><p><strong>监听器原理</strong></p><ol><li>首先要有一个main()线程  </li><li>在main线程中创建Zookeeper客户端， 这时就会创建两个线程， 一个负责网络连接通信（connet） ， 一个负责监听（listener） 。  </li><li>通过connect线程将注册的监听事件发送给Zookeeper。  </li><li>在Zookeeper的注册监听器列表中将注册的监听事件添加到列表中。  </li><li>Zookeeper监听到有数据或路径变化， 就会将这个消息发送给listener线程。  </li><li>listener线程内部调用了process()方法。</li></ol><p><strong>常见监听</strong></p><ol><li>监听节点数据的变化：get path[watch]</li><li>监听子节点增减的变化：ls path[watch]</li></ol><p>例子：</p><ol><li><p>节点的值变化监听  </p><blockquote><ol><li><p>在 hadoop104 主机上注册监听&#x2F;sanguo 节点数据变化  </p><p>[zk: localhost:2181(CONNECTED) 26] get -w &#x2F;sanguo  </p></li><li><p>在 hadoop103 主机上修改&#x2F;sanguo 节点的数据  </p><p>[zk: localhost:2181(CONNECTED) 1] set &#x2F;sanguo “xisi”  </p></li><li><p>观察 hadoop104 主机收到数据变化的监听  </p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pf">WATCHER::<br>WatchedEvent <span class="hljs-keyword">state</span>:SyncConnected type:NodeDataChanged<br>path:/sanguo  <br></code></pre></td></tr></table></figure></li></ol><p>注意：在hadoop103再多次修改&#x2F;sanguo的值， hadoop104上不会再收到监听。因为注册<br>一次，只能监听一次。想再次监听，需要再次注册。  </p></blockquote></li><li><p>节点的子节点变化监听（路径变化）  </p><blockquote><ol><li><p>在 hadoop104 主机上注册监听&#x2F;sanguo 节点的子节点变化  </p><p>[zk: localhost:2181(CONNECTED) 1] ls -w &#x2F;sanguo<br>[shuguo, weiguo]  </p></li><li><p>在 hadoop103 主机&#x2F;sanguo 节点上创建子节点  </p><p>[zk: localhost:2181(CONNECTED) 2] create &#x2F;sanguo&#x2F;jin “simayi”<br>Created &#x2F;sanguo&#x2F;jin  </p></li><li><p>观察 hadoop104 主机收到子节点变化的监听  </p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pf">WATCHER::<br>WatchedEvent <span class="hljs-keyword">state</span>:SyncConnected type:NodeChildrenChanged<br>path:/sanguo<br></code></pre></td></tr></table></figure><p>注意： 节点的路径变化，也是注册一次，生效一次。想多次生效，就需要多次注册。</p></li></ol></blockquote></li></ol><h2 id="客户端向服务端写数据流程"><a href="#客户端向服务端写数据流程" class="headerlink" title="客户端向服务端写数据流程"></a>客户端向服务端写数据流程</h2><p><strong>写流程之写入请求直接发送给Leader节点</strong>  </p><img src="/2022/07/30/Zookeeper/image-20220718143418560.png" alt="Data to ZkLeader" style="zoom:67%;"><p><strong>写流程之写入请求发送给follower节点</strong>    </p><img src="/2022/07/30/Zookeeper/image-20220718144438909.png" alt="data to follower" style="zoom:67%;"><h2 id="ZooKeeper-分布式锁案例"><a href="#ZooKeeper-分布式锁案例" class="headerlink" title="ZooKeeper 分布式锁案例"></a>ZooKeeper 分布式锁案例</h2><p><strong>什么叫做分布式锁呢？</strong><br>比如说”进程 1”在使用该资源的时候，会先去获得锁， “进程 1”获得锁以后会对该资源保持独占，这样其他进程就无法访问该资源， “进程 1”用完该资源以后就将锁释放掉，让其他进程来获得锁，那么通过这个锁机制，我们就能保证了分布式系统中多个进程能够有序的访问该临界资源。那么我们把这个分布式环境下的这个锁叫作分布式锁。  </p><img src="/2022/07/30/Zookeeper/image-20220718145906992.png" alt="distributed lock" style="zoom:67%;"><ol><li>接收到请求后，在 &#x2F;locks 节点下创建一个临时的顺序节点</li><li>判断自己是不是当前节点下最小的节点：是，获取到锁；不是，对前一个节点进行监听。</li><li>获取到锁，处理完业务之后，delete 节点释放锁，然后下面的节点将收到通知，重复第二步判断。</li></ol><p><strong>原生 Zookeeper 实现分布式锁案例</strong>  </p><ol><li><p>分布式锁实现  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.lock1;<br><span class="hljs-keyword">import</span> org.apache.zookeeper.*;<br><span class="hljs-keyword">import</span> org.apache.zookeeper.data.Stat;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistributedLock</span> &#123;<br>    <span class="hljs-comment">// zookeeper server 列表</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">connectString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hadoop102:2181,hadoop103:2181,hadoop104:2181&quot;</span>;<br>    <span class="hljs-comment">// 超时时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">sessionTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br>    <span class="hljs-keyword">private</span> ZooKeeper zk;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">rootNode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;locks&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">subNode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;seq-&quot;</span>;<br>    <span class="hljs-comment">// 当前 client 等待的子节点</span><br>    <span class="hljs-keyword">private</span> String waitPath;<br>    <span class="hljs-comment">//ZooKeeper 连接</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">connectLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//ZooKeeper 节点等待</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">waitLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 当前 client 创建的子节点</span><br>    <span class="hljs-keyword">private</span> String currentNode;<br>    <span class="hljs-comment">// 和 zk 服务建立连接，并创建根节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DistributedLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, KeeperException &#123;<br>zk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(WatchedEvent event)</span> &#123;<br><span class="hljs-comment">// 连接建立时, 打开 latch, 唤醒 wait 在该 latch 上的线程</span><br><span class="hljs-keyword">if</span> (event.getState() == Event.KeeperState.SyncConnected) &#123;<br>connectLatch.countDown();<br>&#125;<br><span class="hljs-comment">// 发生了 waitPath 的删除事件</span><br><span class="hljs-keyword">if</span> (event.getType() == Event.EventType.NodeDeleted &amp;&amp; event.getPath().equals(waitPath))&#123;<br>waitLatch.countDown();<br>&#125;<br>&#125;<br>&#125;);<br><span class="hljs-comment">// 等待连接建立</span><br>connectLatch.await();<br><span class="hljs-comment">//获取根节点状态</span><br><span class="hljs-type">Stat</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> zk.exists(<span class="hljs-string">&quot;/&quot;</span> + rootNode, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">//如果根节点不存在，则创建根节点，根节点类型为永久节点</span><br><span class="hljs-keyword">if</span> (stat == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;根节点不存在&quot;</span>);<br>zk.create(<span class="hljs-string">&quot;/&quot;</span> + rootNode, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 加锁方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">zkLock</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//在根节点下创建临时顺序节点，返回值为创建的节点路径</span><br>currentNode = zk.create(<span class="hljs-string">&quot;/&quot;</span> + rootNode + <span class="hljs-string">&quot;/&quot;</span> + subNode, <span class="hljs-literal">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);<br><span class="hljs-comment">// wait 一小会, 让结果更清晰一些</span><br>Thread.sleep(<span class="hljs-number">10</span>);<br><span class="hljs-comment">// 注意, 没有必要监听&quot;/locks&quot;的子节点的变化情况</span><br>List&lt;String&gt; childrenNodes = zk.getChildren(<span class="hljs-string">&quot;/&quot;</span> + rootNode, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 列表中只有一个子节点, 那肯定就是 currentNode , 说明client 获得锁</span><br><span class="hljs-keyword">if</span> (childrenNodes.size() == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//对根节点下的所有临时顺序节点进行从小到大排序</span><br>Collections.sort(childrenNodes);<br><span class="hljs-comment">//当前节点名称</span><br><span class="hljs-type">String</span> <span class="hljs-variable">thisNode</span> <span class="hljs-operator">=</span> currentNode.substring((<span class="hljs-string">&quot;/&quot;</span> + rootNode + <span class="hljs-string">&quot;/&quot;</span>).length());<br><span class="hljs-comment">//获取当前节点的位置</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> childrenNodes.indexOf(thisNode);<br>                <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;数据异常&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// index == 0, 说明 thisNode 在列表中最小, 当前client 获得锁</span><br>                    <span class="hljs-keyword">return</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 获得排名比 currentNode 前 1 位的节点</span><br>                    <span class="hljs-built_in">this</span>.waitPath = <span class="hljs-string">&quot;/&quot;</span> + rootNode + <span class="hljs-string">&quot;/&quot;</span> + childrenNodes.get(index - <span class="hljs-number">1</span>);<br>                    <span class="hljs-comment">// 在 waitPath 上注册监听器, 当 waitPath 被删除时, zookeeper 会回调监听器的 process 方法</span><br>                    zk.getData(waitPath, <span class="hljs-literal">true</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stat</span>());<br>                    <span class="hljs-comment">//进入等待锁状态</span><br>                    waitLatch.await();<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (KeeperException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-comment">// 解锁方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">zkUnlock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            zk.delete(<span class="hljs-built_in">this</span>.currentNode, -<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException | KeeperException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分布式锁测试  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.lock1;<br><span class="hljs-keyword">import</span> org.apache.zookeeper.KeeperException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistributedLockTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, IOException, KeeperException &#123;<br>        <span class="hljs-comment">// 创建分布式锁 1</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">DistributedLock</span> <span class="hljs-variable">lock1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DistributedLock</span>();<br>        <span class="hljs-comment">// 创建分布式锁 2</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">DistributedLock</span> <span class="hljs-variable">lock2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DistributedLock</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">// 获取锁对象</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock1.zkLock();<br>                    System.out.println(<span class="hljs-string">&quot;线程 1 获取锁&quot;</span>);<br>                    Thread.sleep(<span class="hljs-number">5</span> * <span class="hljs-number">1000</span>);<br>                    lock1.zkUnlock();<br>                    System.out.println(<span class="hljs-string">&quot;线程 1 释放锁&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">// 获取锁对象</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock2.zkLock();<br>                    System.out.println(<span class="hljs-string">&quot;线程 2 获取锁&quot;</span>);<br>                    Thread.sleep(<span class="hljs-number">5</span> * <span class="hljs-number">1000</span>);<br>                    lock2.zkUnlock();<br>                    System.out.println(<span class="hljs-string">&quot;线程 2 释放锁&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>观察控制台变化</strong>：  </p><blockquote><p>线程 1 获取锁  </p><p>线程 1 释放锁</p><p>线程 2 获取锁</p><p>线程 2 释放锁</p></blockquote></li></ol><h2 id="企业面试真题（面试重点）"><a href="#企业面试真题（面试重点）" class="headerlink" title="企业面试真题（面试重点）"></a>企业面试真题（面试重点）</h2><p><strong>选举机制</strong>  </p><p>半数机制，超过半数的投票通过，即通过。  </p><blockquote><ol><li><p>第一次启动选举规则：  </p><p>投票过半数时， 服务器 id 大的胜出  </p></li><li><p>第二次启动选举规则：  </p><p>①EPOCH 大的直接胜出</p><p>②EPOCH 相同，事务 id 大的胜出</p><p>③事务 id 相同，服务器 id 大的胜出</p></li></ol></blockquote><p><strong>生产集群安装多少 zk 合适？</strong>  </p><p>安装奇数台。  </p><p>生产经验：  </p><blockquote><p>10 台服务器： 3 台 zk；</p><p>20 台服务器： 5 台 zk；</p><p>100 台服务器： 11 台 zk；</p><p>200 台服务器： 11 台 zk  </p><p>服务器台数多：好处，提高可靠性；坏处：提高通信延时  </p></blockquote><p><strong>常用命令</strong><br>ls、 get、 create、 delete  </p><h2 id="Paxos-算法"><a href="#Paxos-算法" class="headerlink" title="Paxos 算法"></a>Paxos 算法</h2><h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><p>CAP理论告诉我们， 一个分布式系统不可能同时满足以下三种 :</p><blockquote><p>一致性（C:Consistency）<br>可用性（A:Available）<br>分区容错性（ P:Partition Tolerance）  </p></blockquote><p>这三个基本需求， 最多只能同时满足其中的两项， 因为P是必须的， 因此往往选择就在CP或者AP中。  </p><ol><li><p>一致性（ C:Consistency）  </p><blockquote><p>在分布式环境中， 一致性是指数据在多个副本之间是否能够保持数据一致的特性。 在一致性的需求下， 当一个系统在数据一致的状态下执行更新操作后， 应该保证系统的数据仍然处于一致的状态。</p></blockquote></li><li><p>可用性（A:Available）  </p><blockquote><p>可用性是指系统提供的服务必须一直处于可用的状态， 对于用户的每一个操作请求总是能够在有限的时间内返回结果。 </p></blockquote></li><li><p>分区容错性（ P:Partition Tolerance）  </p><blockquote><p>分布式系统在遇到任何网络分区故障的时候， 仍然需要能够保证对外提供满足一致性和可用性的服务， 除非是整个网络环境都发生了故障。</p></blockquote></li></ol><p><strong>ZooKeeper保证的是CP</strong>  </p><ol><li><p>ZooKeeper不能保证每次服务请求的可用性</p><blockquote><p>在极端环境下， ZooKeeper可能会丢弃一些请求， 消费者程序需要重新请求才能获得结果） 。 所以说， ZooKeeper不能保证服务可用性。 </p></blockquote></li><li><p>进行Leader选举时集群都是不可用</p></li></ol><h3 id="Paxos-算法-1"><a href="#Paxos-算法-1" class="headerlink" title="Paxos 算法"></a>Paxos 算法</h3><p><strong>拜占庭将军问题</strong>  </p><p>拜占庭将军问题是一个协议问题， 拜占庭帝国军队的将军们必须全体一致的决定是否攻击某一支敌军。 问题是这些将军在地理上是分隔开来的， 并且将军中存在叛徒。 叛徒可以任意行动以达到以下目标： 欺骗某些将军采取进攻行动； 促成一个不是所有将军都同意的决定， 如当将军们不希望进攻时促成进攻行动； 或者迷惑某些将军， 使他们无法做出决定。 如果叛徒达到了这些目的之一， 则任何攻击行动的结果都是注定要失败的， 只有完全达成一致的努力才能获得胜利。  </p><p><strong>Paxos</strong>算法： 一种基于消息传递且具有高度容错特性的一致性算法。  </p><p>Paxos算法解决的问题： 就是如何快速正确的在一个分布式系统中对某个数据值达成一致，并且保证不论发生任何异常（如机器宕机，网络异常（延迟，重复，丢失）），都不会破坏整个系统（节点可能分布于不同地区，机房，机架）的一致性。  </p><p><strong>Paxos 算法描述</strong></p><p>在一个Paxos系统中，首先将所有节点划分为 Proposer（提议者） ， Acceptor（接受者） ，和 Learner（学习者） 。（注意：每个节点都可以身兼数职）。  </p><p><img src="/2022/07/30/Zookeeper/image-20220718155437849.png" alt="Paxos"></p><p>一个完整的Paxos算法流程分为三个阶段：  </p><ol><li><p>Prepare准备阶段 ：</p><blockquote><ol><li>Proposer向多个Acceptor发出Propose请求Promise（承诺）  </li><li>Acceptor针对收到的Propose请求进行Promise（承诺）</li></ol></blockquote></li><li><p>Accept接受阶段 ：</p><blockquote><ol><li>Proposer收到多数Acceptor承诺的Promise后，向Acceptor发出Propose请求  </li><li>Acceptor针对收到的Propose请求进行Accept处理</li></ol></blockquote></li><li><p>Learn 学习阶段： Proposer将形成的决议发送给所有Learners</p></li></ol><p><img src="/2022/07/30/Zookeeper/image-20220718160624146.png" alt="Paxos"></p><p><strong>Prepare</strong>: Proposer生成全局唯一且递增的Proposal ID， 向所有Acceptor发送Propose请求， 这里无需携带提案内容， 只携带Proposal ID即可。  </p><p><strong>Promise</strong>: Acceptor收到Propose请求后， 做出“两个承诺， 一个应答” 。  </p><blockquote><ol><li>不再接受Proposal ID小于等于（注意：这里是&lt;&#x3D; ） 当前请求的Propose请求。  </li><li>不再接受Proposal ID小于（注意：这里是&lt; ） 当前请求的Accept请求。  </li><li>不违背以前做出的承诺下， 回复已经Accept过的提案中 Proposal ID 最大的那个提案的 Value 和 Proposal ID ， 没有则返回空值。</li></ol></blockquote><p><strong>Propose</strong>:  Proposer 收到多数 Acceptor 的 Promise 应答后， 从应答中选择 Proposal ID 最大的提案的 Value ， 作为本次要发起的提案。 如果所有应答的提案 Value 均为空值， 则可以自己随意决定提案 Value。 然后携带当前 Proposal ID， 向所有 Acceptor 发送 Propose 请求。  </p><p><strong>Accept</strong>:  Acceptor 收到 Propose 请求后， 在不违背自己之前做出的承诺下， 接受并持久化当前 Proposal ID 和提案 Value。  </p><p><strong>Learn</strong>: Proposer 收到多数 Acceptor 的 Accept 后， 决议形成， 将形成的决议发送给所有 Learner。  </p><p><strong>情况 1</strong></p><p><img src="/2022/07/30/Zookeeper/image-20220718162217886.png" alt="Situation 1"></p><ol><li>A1发起1号 Proposal 的 Propose，等待 Promise 承诺；  </li><li>A2-A5回应Promise；  </li><li>A1在收到两份回复时就会发起税率10%的Proposal；  </li><li>A2-A5回应Accept；  </li><li>通过Proposal，税率10%。</li></ol><p><strong>情况 2</strong></p><p><img src="/2022/07/30/Zookeeper/image-20220718162450608.png" alt="situation 2"></p><ol><li>A1， A5同时发起Propose（序号分别为1， 2）  </li><li>A2承诺A1， A4承诺A5， A3行为成为关键  </li><li>情况1： A3先收到A1消息，承诺A1。  </li><li>A1发起Proposal（1， 10%）， A2， A3接受。  </li><li>之后A3又收到A5消息， 回复A1： （1， 10%），并承诺A5。  </li><li>A5发起Proposal（2， 20%）， A3， A4接受。之后A1， A5同时广播决议。</li></ol><p>Paxos 算法缺陷：在网络复杂的情况下，一个应用 Paxos 算法的分布式系统，可能很久无法收敛，甚至陷入活锁的情况。  </p><p><strong>情况 3：</strong>  </p><p><img src="/2022/07/30/Zookeeper/image-20220718162450608.png" alt="situation 3"></p><ol><li>A1， A5同时发起Propose（序号分别为1， 2）  </li><li>A2承诺A1， A4承诺A5， A3行为成为关键  </li><li>情况2： A3先收到A1消息，承诺A1。之后立刻收到A5消息，承诺A5。  </li><li>A1发起Proposal（1， 10%），无足够响应， A1重新Propose （序号3）， A3再次承诺A1。  </li><li>A5发起Proposal（2， 20%），无足够相应。 A5重新Propose （序号4）， A3再次承诺A5。  </li><li>…</li></ol><p>造成这种情况的原因是系统中有一个以上的 Proposer，多个 Proposers 相互争夺 Acceptor，造成迟迟无法达成一致的情况。 针对这种情况，一种改进的 Paxos 算法被提出：从系统中选出一个节点作为 Leader，只有 Leader 能够发起提案。 这样，一次 Paxos 流程中只有一个Proposer，不会出现活锁的情况，此时只会出现例子中第一种情况。  </p><h2 id="ZAB-协议"><a href="#ZAB-协议" class="headerlink" title="ZAB 协议"></a>ZAB 协议</h2><h4 id="ZAB-算法"><a href="#ZAB-算法" class="headerlink" title="ZAB 算法"></a>ZAB 算法</h4><p>Zab 借鉴了 Paxos 算法，是特别为 Zookeeper 设计的支持崩溃恢复的原子广播协议。基于该协议， Zookeeper 设计为只有一台客户端（Leader）负责处理外部的写事务请求，然后Leader 客户端将数据同步到其他 Follower 节点。 即 Zookeeper 只有一个 Leader 可以发起提案。  </p><h4 id="Zab-协议内容"><a href="#Zab-协议内容" class="headerlink" title="Zab 协议内容"></a>Zab 协议内容</h4><p>Zab 协议包括两种基本的模式： 消息广播、 崩溃恢复。  </p><p><strong>消息广播</strong>  </p><p><img src="/2022/07/30/Zookeeper/image-20220718165406583.png" alt="消息广播"></p><ol><li>客户端发起一个写操作请求。  </li><li>Leader服务器将客户端的请求转化为事务Proposal 提案， 同时为每个Proposal 分配一个全局的ID， 即zxid。  </li><li>Leader服务器为每个Follower服务器分配一个单独的队列， 然后将需要广播的 Proposal依次放到队列中去， 并且根据FIFO策略进行消息发送。  </li><li>Follower接收到Proposal后， 会首先将其以事务日志的方式写入本地磁盘中， 写入成功后向Leader反馈一个Ack响应消息。  </li><li>Leader接收到超过半数以上Follower的Ack响应消息后， 即认为消息发送成功， 可以发送commit消息。  </li><li>Leader向所有Follower广播commit消息， 同时自身也会完成事务提交。 Follower 接收到commit消息后， 会将上一条事务提交。  </li><li><strong>Zookeeper采用Zab协议的核心， 就是只要有一台服务器提交了Proposal， 就要确保所有的服务器最终都能正确提交Proposal。</strong></li></ol><p>ZAB协议针对事务请求的处理过程类似于一个两阶段提交过程  </p><blockquote><ol><li>广播事务阶段  </li><li>广播提交操作</li></ol></blockquote><p>这两阶段提交模型如下， 有可能因为Leader宕机带来数据不一致， 比如  </p><blockquote><ol><li>Leader 发起一个事务 Proposal1 后就宕机 ， Follower 都没有 Proposal1  </li><li>Leader 收到半数ACK宕机，没来得及向Follower发送Commit</li></ol></blockquote><p>怎么解决呢？ <strong>ZAB引入了崩溃恢复模式</strong>。  </p><p><strong>崩溃恢复</strong>  </p><p><strong>异常假设</strong>  </p><p><img src="/2022/07/30/Zookeeper/image-20220718180101216.png" alt="异常假设"></p><p>一旦Leader服务器出现崩溃或者由于网络原因导致Leader服务器失去了与过半 Follower的联系，那么就会进入崩溃恢复模式。  </p><ol><li><p>假设两种服务器异常情况：  </p><blockquote><ol><li>假设一个事务在Leader提出之后， Leader挂了。  </li><li>一个事务在Leader上提交了， 并且过半的Follower都响应Ack了， 但是Leader在Commit消息发出之前挂了。</li></ol></blockquote></li><li><p>Zab协议崩溃恢复要求满足以下两个要求：  </p><blockquote><ol><li>确保已经被Leader提交的提案Proposal， 必须最终被所有的Follower服务器提交。 （已经产生的提案， Follower必须执行）  </li><li>确保丢弃已经被Leader提出的， 但是没有被提交的Proposal。 （丢弃胎死腹中的提案）</li></ol></blockquote></li></ol><p><strong>Leader选举</strong>  </p><p><img src="/2022/07/30/Zookeeper/image-20220718181102680.png" alt="数据恢复"></p><p>崩溃恢复主要包括两部分： Leader选举和数据恢复。  </p><p><strong>Leader选举</strong>：   </p><blockquote><p>根据上述要求， Zab协议需要保证选举出来的Leader需要满足以下条件：  </p><ol><li>新选举出来的Leader不能包含未提交的Proposal。 即新Leader必须都是已经提交了Proposal的Follower服务器节点。  </li><li>新选举的Leader节点中含有最大的zxid。 这样做的好处是可以避免Leader服务器检查Proposal的提交和丢弃工作。</li></ol></blockquote><p><strong>Zab如何数据同步：</strong>  </p><blockquote><ol><li>完成Leader选举后， 在正式开始工作之前（接收事务请求， 然后提出新的Proposal） ， Leader服务器会首先确认事务日志中的所有的Proposal 是否已经被集群中过半的服务器Commit。  </li><li>Leader服务器需要确保所有的Follower服务器能够接收到每一条事务的Proposal， 并且能将所有已经提交的事务Proposal应用到内存数据中。 等到Follower将所有尚未同步的事务Proposal都从Leader服务器上同步过， 并且应用到内存数据中以后，Leader才会把该Follower加入到真正可用的Follower列表中。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>BigData</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>HDFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yarn</title>
    <link href="/2022/07/17/Hadoop-Yarn/"/>
    <url>/2022/07/17/Hadoop-Yarn/</url>
    
    <content type="html"><![CDATA[<h1 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h1><h2 id="Yarn-概述"><a href="#Yarn-概述" class="headerlink" title="Yarn 概述"></a>Yarn 概述</h2><p><strong>Yarn 资源调度器</strong></p><p>Yarn 是一个资源调度平台，为运算程序提供服务器运算资源，类似于<code>分布式的操作系统平台</code>，而 MapReduce 等运算程序则相当于运行于操作系统之上的应用程序。</p><h3 id="Yarn-基础架构"><a href="#Yarn-基础架构" class="headerlink" title="Yarn 基础架构"></a>Yarn 基础架构</h3><p><img src="/2022/07/17/Hadoop-Yarn/image-20220717100846954.png" alt="Yarn Architecture"></p><p>主要由：</p><p><strong>ResourceManager</strong>：</p><blockquote><ol><li>处理客户端请求</li><li>监控 NodeManager</li><li>启动或监控 ApplicationMaster</li><li>资源的分配与调度</li></ol></blockquote><p><strong>NodeManager</strong>：</p><blockquote><ol><li>管理单个节点上的资源</li><li>处理来自 ResourceManager 的命令</li><li>处理来自 ApplicationMaster 的命令</li></ol></blockquote><p><strong>ApplicationMaster</strong>：</p><blockquote><ol><li>为应用程序申请资源并分配给内部的任务</li><li>任务的监控与容错</li></ol></blockquote><p><strong>Container</strong> : </p><blockquote><p>container 是 Yarn 中的资源抽象，它封装了某个节点上的多个维度资源，如 内存，cpu，磁盘，网络等</p></blockquote><p>等组件构成</p><h3 id="Yarn-工作机制"><a href="#Yarn-工作机制" class="headerlink" title="Yarn 工作机制"></a>Yarn 工作机制</h3><p><img src="/2022/07/17/Hadoop-Yarn/image-20220717114415588.png" alt="Yarn Working Mechanism"></p><ol><li>MR 程序提交到客户端所在的节点。  </li><li>YarnRunner 向 ResourceManager 申请一个 Application。  </li><li>RM 将该应用程序的资源路径返回给 YarnRunner。  </li><li>该程序将运行所需资源提交到 HDFS 上。  </li><li>程序资源提交完毕后，申请运行 mrAppMaster。  </li><li>RM 将用户的请求初始化成一个 Task。  </li><li>其中一个 NodeManager 领取到 Task 任务。  </li><li>该 NodeManager 创建容器 Container， 并产生 MRAppmaster。  </li><li>Container 从 HDFS 上拷贝资源到本地。  </li><li>MRAppmaster 向 RM 申请运行 MapTask 资源  </li><li>RM 将运行 MapTask 任务分配给另外两个 NodeManager， 另两个 NodeManager 分<br>别领取任务并创建容器。  </li><li>MR 向两个接收到任务的 NodeManager 发送程序启动脚本， 这两个 NodeManager<br>分别启动 MapTask， MapTask 对数据分区排序。  </li><li>MrAppMaster 等待所有 MapTask 运行完毕后，向 RM 申请容器， 运行 ReduceTask。  </li><li>ReduceTask 向 MapTask 获取相应分区的数据。  </li><li>程序运行完毕后， MR 会向 RM 申请注销自己。</li></ol><h4 id="作业提交全过程"><a href="#作业提交全过程" class="headerlink" title="作业提交全过程"></a>作业提交全过程</h4><p><strong>HDFS、 YARN、 MapReduce 三者关系</strong></p><p><img src="/2022/07/17/Hadoop-Yarn/image-20220717103523499.png" alt="Relationship"></p><p><strong>作业提交全过程</strong>  </p><ol><li><p><strong>作业提交</strong></p><blockquote><ol><li>Client 调用 job.waitForCompletion 方法，向整个集群提交 MapReduce 作业。  </li><li>Client 向 RM 申请一个作业 id。  </li><li>RM 给 Client 返回该 job 资源的提交路径和作业 id。  </li><li>Client 提交 jar 包、切片信息和配置文件到指定的资源提交路径。  </li><li>Client 提交完资源后，向 RM 申请运行 MrAppMaster。</li></ol></blockquote></li><li><p><strong>作业初始化</strong></p><blockquote><ol start="6"><li>当 RM 收到 Client 的请求后，将该 job 添加到容量调度器中。  </li><li>某一个空闲的 NM 领取到该 Job。  </li><li>该 NM 创建 Container， 并产生 MRAppmaster。  </li><li>下载 Client 提交的资源到本地。</li></ol></blockquote></li><li><p><strong>任务分配</strong></p><blockquote><ol start="10"><li>MrAppMaster 向 RM 申请运行多个 MapTask 任务资源。  </li><li>RM 将运行 MapTask 任务分配给另外两个 NodeManager， 另两个 NodeManager分别领取任务并创建容器。</li></ol></blockquote></li><li><p><strong>任务运行</strong></p><blockquote><ol start="12"><li>MR 向两个接收到任务的 NodeManager 发送程序启动脚本， 这两个NodeManager 分别启动 MapTask， MapTask 对数据分区排序。  </li><li>MrAppMaster等待所有MapTask运行完毕后，向RM申请容器， 运行ReduceTask。  </li><li>ReduceTask 向 MapTask 获取相应分区的数据。  </li><li>程序运行完毕后， MR 会向 RM 申请注销自己。</li></ol></blockquote></li><li><p><strong>进度和状态更新</strong></p><blockquote><p>YARN 中的任务将其进度和状态(包括 counter)返回给应用管理器, 客户端每秒(通过mapreduce.client.progressmonitor.pollinterval 设置)向应用管理器请求进度更新, 展示给用户。  </p></blockquote></li><li><p><strong>作业完成</strong>  </p><blockquote><p>除了向应用管理器请求作业进度外, 客户端每 5 秒都会通过调用 waitForCompletion()来检查作业是否完成。 时间间隔可以通过 mapreduce.client.completion.pollinterval 来设置。作业完成之后, 应用管理器和 Container 会清理工作状态。 作业的信息会被作业历史服务器存储以备之后用户核查。</p></blockquote></li></ol><h3 id="Yarn-调度器和调度算法"><a href="#Yarn-调度器和调度算法" class="headerlink" title="Yarn 调度器和调度算法"></a>Yarn 调度器和调度算法</h3><p>Hadoop 作业调度器主要有三种： FIFO、 容量（Capacity Scheduler） 和公平（Fair Scheduler） 。 Apache Hadoop3.1.3 默认的资源调度器是 Capacity Scheduler。  </p><h4 id="先进先出调度器（FIFO）"><a href="#先进先出调度器（FIFO）" class="headerlink" title="先进先出调度器（FIFO）"></a>先进先出调度器（FIFO）</h4><p>FIFO 调度器（First In First Out） ：单队列，根据提交作业的先后顺序，先来先服务。  </p><p>优点：简单易懂；<br>缺点：不支持多队列，生产环境很少使用；  </p><h4 id="容量调度器（Capacity-Scheduler）"><a href="#容量调度器（Capacity-Scheduler）" class="headerlink" title="容量调度器（Capacity Scheduler）"></a>容量调度器（Capacity Scheduler）</h4><p>Capacity Scheduler 是 Yahoo 开发的多用户调度器。  </p><p><img src="/2022/07/17/Hadoop-Yarn/image-20220717145747592.png" alt="Capacity Scheduler"></p><p><strong>特点</strong>：</p><blockquote><ol><li><p>多队列： 每个队列可配置一定的资源量，每个队列采用FIFO调度策略。  </p></li><li><p>容量保证：管理员可为每个队列设置资源最低保证和资源使用上限  </p></li><li><p>灵活性：如果一个队列中的资源有剩余，可以暂时共享给那些需要资源的队列，而一旦该队列有新的应用程序提交，则其他队列借调的资源会归还给该队列。  </p></li><li><p>多租户：  </p><p>支持多用户共享集群和多应用程序同时运行。  </p><p>为了防止同一个用户的作业独占队列中的资源，该调度器会对同一用户提交的作业所占资源量进行限定。</p></li></ol></blockquote><p><strong>容量调度器资源分配算法</strong></p><p><img src="/2022/07/17/Hadoop-Yarn/image-20220717151047934.png" alt="Tree"></p><ol><li><p><strong>队列资源分配</strong></p><blockquote><p>从root开始，使用深度优先算法， 优先选择资源占用率最低的队列分配资源。  </p></blockquote></li><li><p><strong>作业资源分配</strong></p><blockquote><p>默认按照提交<code>作业的优先级</code>和<code>提交时间顺序</code>分配资源。  </p></blockquote></li><li><p><strong>容器资源分配</strong></p><blockquote><p>按照容器的优先级分配资源；<br>如果优先级相同，按照数据本地性原则：  </p><p>（ 1）任务和数据在同一节点</p><p>（ 2）任务和数据在同一机架</p><p>（ 3）任务和数据不在同一节点也不在同一机架</p></blockquote></li></ol><h4 id="公平调度器（Fair-Scheduler）"><a href="#公平调度器（Fair-Scheduler）" class="headerlink" title="公平调度器（Fair Scheduler）"></a>公平调度器（Fair Scheduler）</h4><p>Fair Schedulere 是 Facebook 开发的多用户调度器。  </p><p><img src="/2022/07/17/Hadoop-Yarn/image-20220717152008859.png" alt="Fair Scheduler"></p><p><strong>公平调度器特点</strong></p><ol><li><p><strong>与容量调度器相同点</strong></p><blockquote><p>多队列：支持多队列多作业  </p><p>容量保证：管理员可为每个队列设置资源最低保证和资源使用上线  </p><p>灵活性： 如果一个队列中的资源有剩余，可以暂时共享给那些需要资源的队列，而一旦该队列有新的应用程序提交，则其他队列借调的资源会归还给该队列。  </p><p>多租户：支持多用户共享集群和多应用程序同时运行；为了防止同一个用户的作业独占队列中的资源，该调度器会对同一用户提交的作业所占资源量进行限定。  </p></blockquote></li><li><p><strong>与容量调度器不同点</strong></p><blockquote><p><strong>核心调度策略不同 ：</strong></p><p>容量调度器：优先选择资源利用率低的队列  </p><p>公平调度器：优先选择对资源的缺额比例大的  </p><p><strong>每个队列可以单独设置资源分配方式：</strong></p><p>容量调度器： FIFO、 DRF  </p><p>公平调度器： FIFO、 FAIR、 DRF</p></blockquote></li></ol><p><strong>公平调度器——缺额</strong>  </p><p><img src="/2022/07/17/Hadoop-Yarn/image-20220717153925243.png" alt="difference"></p><blockquote><p>公平调度器设计目标是：在时间尺度上，所有作业获得公平的资源。某一时刻一个作业应获资源和实际获取资源的差距叫“缺额”  </p><p>调度器会优先为缺额大的作业分配资源  </p></blockquote><p><strong>队列资源分配方式</strong></p><p><strong>FIFO</strong>策略</p><blockquote><p>公平调度器每个队列资源分配策略如果选择FIFO的话， 此时公平调度器相当于上面讲过的容量调度器。  </p></blockquote><p><strong>Fair策略</strong></p><blockquote><p>Fair 策略（默认） 是一种基于最大最小公平算法实现的资源多路复用方式， 默认情况下， 每个队列内部采用该方式分配资源。 这意味着， 如果一个队列中有两个应用程序同时运行， 则每个应用程序可得到1&#x2F;2的资源；如果三个应用程序同时运行， 则每个应用程序可得到1&#x2F;3的资源。  </p><p>公平调度器具体资源分配流程和容量调度器一致；  </p><ol><li>选择队列</li><li>选择作业</li><li>选择容器</li></ol><p>以上三步， 每一步都是按照公平策略分配资源  </p></blockquote><p><img src="/2022/07/17/Hadoop-Yarn/image-20220717160150323.png" alt="Fair Strategy"></p><blockquote><p>实际最小资源份额： mindshare &#x3D; Min（资源需求量（4）， 配置的最小资源（2））  </p><p>是否饥饿： isNeedy &#x3D; 资源使用量（1） &lt; mindshare（实际最小资源份额（2））  </p><p>资源分配比： minShareRatio &#x3D; 资源使用量（1） &#x2F; Max（mindshare（2）, 1）  </p><p>资源使用权重比： useToWeightRatio &#x3D; 资源使用量 &#x2F; 权重  </p></blockquote><p><strong>DRF策略</strong><br>DRF（Dominant Resource Fairness） ， 我们之前说的资源， 都是单一标准， 例如只考虑内存（也是Yarn默认的情况） 。 但是很多时候我们资源有很多种， 例如内存， CPU， 网络带宽等， 这样我们很难衡量两个应用应该分配的资源比例。那么在YARN中， 我们用DRF来决定如何调度：<br>假设集群一共有100 CPU和10T 内存， 而应用A需要（2 CPU, 300GB） ， 应用B需要（6 CPU， 100GB） 。则两个应用分别需要A（2%CPU, 3%内存） 和B（6%CPU, 1%内存） 的资源， 这就意味着A是内存主导的, B是CPU主导的， 针对这种情况， 我们可以选择DRF策略对不同应用进行不同资源（CPU和内存） 的一个不同比例的限制。  </p><p>例子：（公平调度器资源分配算法  ）</p><p>1）<strong>队列资源分配</strong>  </p><p><strong>集群总资源100，有三个队列，对资源的需求分别是：</strong></p><blockquote><p>queueA -&gt; 20， queueB -&gt;50， queueC -&gt; 30  </p></blockquote><p><strong>第一次算： 100 &#x2F; 3 &#x3D; 33.33</strong></p><blockquote><p>queueA：分33.33 → 多13.33</p><p>queueB：分33.33 → 少16.67</p><p>queueC： 分33.33 → 多3.33  </p></blockquote><p><strong>第二次算： （ 13.33 + 3.33） &#x2F; 1 &#x3D; 16.66</strong></p><blockquote><p>queueA：分20</p><p>queueB：分33.33 + 16.66 &#x3D; 50</p><p>queueC： 分30  </p></blockquote><p>2）<strong>作业资源分配</strong>  </p><p>a） 不加权（ 关注点是Job的个数） ：  </p><blockquote><p>需求： 有一条队列总资源12个, 有4个job， 对资源的需求分别是:</p><p>job1-&gt;1, job2-&gt;2 , job3-&gt;6, job4-&gt;5  </p><p>第一次算: 12 &#x2F; 4 &#x3D; 3</p><p>job1: 分3 –&gt; 多2个</p><p>job2: 分3 –&gt; 多1个</p><p>job3: 分3 –&gt; 差3个</p><p>job4: 分3 –&gt; 差2个</p><p>第二次算: 3 &#x2F; 2 &#x3D; 1.5</p><p>job1: 分1</p><p>job2: 分2</p><p>job3: 分3 –&gt; 差3个 –&gt; 分1.5 –&gt; 最终: 4.5</p><p>job4: 分3 –&gt; 差2个 –&gt; 分1.5 –&gt; 最终: 4.5</p><p>第n次算: 一直算到没有空闲资源  </p></blockquote><p>b）加权（关注点是Job的权重） ：  </p><blockquote><p>需求： 有一条队列总资源16， 有4个job</p><p>对资源的需求分别是:</p><p>job1-&gt;4 job2-&gt;2 job3-&gt;10 job4-&gt;4</p><p>每个job的权重为:</p><p>job1-&gt;5 job2-&gt;8 job3-&gt;1 job4-&gt;2  </p><p>第一次算: 16 &#x2F; (5+8+1+2) &#x3D; 1</p><p>job1: 分5（权重） –&gt; 多1</p><p>job2: 分8 –&gt; 多6</p><p>job3: 分1 –&gt; 少9</p><p>job4: 分2 –&gt; 少2  </p><p>第二次算: 7 &#x2F; (1+2) &#x3D; 7&#x2F;3</p><p>job1: 分4</p><p>job2: 分2</p><p>job3: 分1 –&gt; 分7&#x2F;3（2.33） –&gt;少6.67</p><p>job4: 分2 –&gt; 分14&#x2F;3(4.66) –&gt;多2.66  </p><p>第三次算:2.66&#x2F;1&#x3D;2.66</p><p>job1: 分4</p><p>job2: 分2</p><p>job3: 分1 –&gt; 分2.66&#x2F;1 –&gt; 分2.66</p><p>job4: 分4  </p></blockquote><h4 id="调度器选择"><a href="#调度器选择" class="headerlink" title="调度器选择"></a>调度器选择</h4><ol><li><p>在生产环境下怎么选择？</p><blockquote><p>大厂：如果对并发度要求比较高，选择公平，要求服务器性能必须OK；</p><p>中小公司，集群服务器资源不太充裕选择容量。</p></blockquote></li><li><p>在生产环境怎么创建队列？</p><blockquote><p>调度器默认就1个default队列，不能满足生产要求。</p><p>按照框架：hive &#x2F;spark&#x2F; flink 每个框架的任务放入指定的队列（企业用的不是特别多）</p><p>按照业务模块：登录注册、购物车、下单、业务部门1、业务部门2</p></blockquote></li><li><p>创建多队列的好处？</p><blockquote><p>因为担心员工不小心，写递归死循环代码，把所有资源全部耗尽。</p><p>实现任务的<strong>降级</strong>使用，特殊时期保证重要的任务队列资源充足。</p><p>业务部门1（重要）&#x3D;》业务部门2（比较重要）&#x3D;》下单（一般）&#x3D;》购物车（一般）&#x3D;》登录注册（次要）</p></blockquote></li></ol><h3 id="Yarn-生产环境核心参数"><a href="#Yarn-生产环境核心参数" class="headerlink" title="Yarn 生产环境核心参数"></a>Yarn 生产环境核心参数</h3><p><strong>ResourceManager相关</strong></p><blockquote><p>配置调度器， 默认容量  ：yarn.resourcemanager.scheduler.class  </p><p>ResourceManager处理调度器请求的线程数量， 默认50：</p><p>arn.resourcemanager.scheduler.client.thread-count   </p></blockquote><p><strong>NodeManager相关</strong>  </p><blockquote><p>是否让yarn自己检测硬件进行配置， 默认false：</p><p>yarn.nodemanager.resource.detect-hardware-capabilities  </p><p>是否将虚拟核数当作CPU核数， 默认false：</p><p>yarn.nodemanager.resource.count-logical-processors-as-cores </p><p>虚拟核数和物理核数乘数， 例如： 4核8线程， 该<br>参数就应设为2， 默认1.0 ：</p><p>yarn.nodemanager.resource.pcores-vcores-multiplier  </p><p>NodeManager使用内存， 默认8G：</p><p>yarn.nodemanager.resource.memory-mb  </p><p>NodeManager  为系统保留多少内存以上二个参数配置一个即可：</p><p>yarn.nodemanager.resource.system-reserved-memory-mb  </p><p>NodeManager使用CPU核数， 默认8个 ：</p><p>yarn.nodemanager.resource.cpu-vcores</p><p>是否开启物理内存检查限制container， 默认打开 ：</p><p>yarn.nodemanager.pmem-check-enabled </p><p>是否开启虚拟内存检查限制container， 默认打开：</p><p>yarn.nodemanager.vmem-check-enabled</p><p>虚拟内存物理内存比例， 默认2.1：</p><p>yarn.nodemanager.vmem-pmem-ratio</p></blockquote><p>Container相关：</p><blockquote><p>容器最最小内存， 默认1G：</p><p>yarn.scheduler.minimum-allocation-mb  </p><p>容器最最大内存， 默认8G：</p><p>yarn.scheduler.maximum-allocation-mb  </p><p>容器最小CPU核数， 默认1个 ：</p><p>yarn.scheduler.minimum-allocation-vcores </p><p>容器最大CPU核数， 默认4个：</p><p>yarn.scheduler.maximum-allocation-vcores  </p></blockquote><h2 id="Hadoop-相关补充"><a href="#Hadoop-相关补充" class="headerlink" title="Hadoop 相关补充"></a>Hadoop 相关补充</h2><p><strong>基准测试</strong></p><p>搭建完Hadoop集群后需要对HDFS读写性能和MR计算能力测试。测试jar包在hadoop的share文件夹下。</p><p>集群总吞吐量 &#x3D; 带宽*集群节点个数&#x2F;副本数</p><p>例如：100m&#x2F;s * 10台&#x2F; 3&#x3D; 333m&#x2F;s</p><p>注意：如果测试数据在本地，那副本数-1。因为这个副本不占集群吞吐量。如果数据在集群外，向该集群上传，需要占用带宽。本公式就不用减1。</p><p><strong>Hadoop宕机</strong></p><ol><li>如果MR造成系统宕机。此时要控制Yarn同时运行的任务数，和每个任务申请的最大内存。调整参数：yarn.scheduler.maximum-allocation-mb（单个任务可申请的最多物理内存量，默认是8192MB）</li><li>如果写入文件过快造成NameNode宕机。那么调高Kafka的存储大小，控制从Kafka到HDFS的写入速度。例如，可以调整Flume每批次拉取数据量的大小参数batchsize。</li></ol><p><strong>Hadoop解决数据倾斜方法</strong></p><ol><li><p><strong>提前在map进行combine，减少传输的数据量</strong></p><blockquote><p>在Mapper加上combiner相当于提前进行reduce，即把一个Mapper中的相同key进行了聚合，减少shuffle过程中传输的数据量，以及Reducer端的计算量。</p><p>如果导致数据倾斜的key大量分布在不同的mapper的时候，这种方法就不是很有效了。</p></blockquote></li><li><p><strong>导致数据倾斜的key 大量分布在不同的mapper</strong></p><blockquote><p>（1）局部聚合加全局聚合。</p><p>第一次在map阶段对那些导致了数据倾斜的key 加上1到n的随机前缀，这样本来相同的key 也会被分到多个Reducer中进行局部聚合，数量就会大大降低。</p><p>第二次mapreduce，去掉key的随机前缀，进行全局聚合。</p><p>思想：二次mr，第一次将key随机散列到不同reducer进行处理达到负载均衡目的。第二次再根据去掉key的随机前缀，按原key进行reduce处理。</p><p>这个方法进行两次mapreduce，性能稍差。</p><p>（2）增加Reducer，提升并行度<br> JobConf.setNumReduceTasks(int)</p><p>（3）实现自定义分区</p><p>根据数据分布情况，自定义散列函数，将key均匀分配到不同Reducer</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>BigData</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>Yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MapReduce</title>
    <link href="/2022/07/17/Hadoop-MapReduce/"/>
    <url>/2022/07/17/Hadoop-MapReduce/</url>
    
    <content type="html"><![CDATA[<h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><h2 id="MapReduce概述"><a href="#MapReduce概述" class="headerlink" title="MapReduce概述"></a>MapReduce概述</h2><h3 id="MapReduce-定义"><a href="#MapReduce-定义" class="headerlink" title="MapReduce 定义"></a>MapReduce 定义</h3><p>MapReduce <code>分布式运算程序编程</code>框架，将用户编写的<code>业务逻辑代码</code>和<code>自带的默认组件</code>整合成一个完整的分布式运算程序，并发运行在一个 hadoop 集群上。</p><h3 id="MapReduce-优缺点"><a href="#MapReduce-优缺点" class="headerlink" title="MapReduce 优缺点"></a>MapReduce 优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>MapReduce 易于编程：它简单的实现一些接口，就可以完成一个分布式程序</li><li>良好的扩展性：通过简单地增加机器数量来提高它的计算能力</li><li>高容错性：自动处理某些问题，如其中一台机器挂了，它可以把上面的计算任务转移到另一个节点上运行，不至于这个任务运行</li><li>适合 PB 级以上海量数据的离线处理</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>不擅长实时计算</li><li>不擅长流式计算</li><li>不擅长 DAG （有向无环图）计算</li></ol><h3 id="MapReduce-进程"><a href="#MapReduce-进程" class="headerlink" title="MapReduce 进程"></a>MapReduce 进程</h3><blockquote><ol><li>MrAppMaster： 负责整个程序的过程调度及状态调度</li><li>MapTask: 负责 Map 阶段的整个数据处理流程</li><li>ReduceTask: 负责 Reduce 阶段的整个数据处理流程</li></ol></blockquote><h3 id="Word-Count"><a href="#Word-Count" class="headerlink" title="Word Count"></a>Word Count</h3><ol><li><p>按照 MapReduce 编程规范，分别编写 Mapper，Reducer， Driver。</p></li><li><p>准备环境</p><p>在 pom.xml 文件中添加如下依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hadoop-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​在项目的 src&#x2F;main&#x2F;resources 目录下，新建一个文件，命名为“log4j.properties”，在<br>文件中填入。  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">log4j.rootLogger</span>=INFO, stdout<br><span class="hljs-attr">log4j.appender.stdout</span>=org.apache.log4j.ConsoleAppender<br><span class="hljs-attr">log4j.appender.stdout.layout</span>=org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.stdout.layout.ConversionPattern</span>=%d %p [%c] - %m%n<br><span class="hljs-attr">log4j.appender.logfile</span>=org.apache.log4j.FileAppender<br><span class="hljs-attr">log4j.appender.logfile.File</span>=target/spring.log<br><span class="hljs-attr">log4j.appender.logfile.layout</span>=org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.logfile.layout.ConversionPattern</span>=%d %p [%c] - %m%n<br></code></pre></td></tr></table></figure><ol start="3"><li><p>编写程序</p><p>编写 Mapper 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.mapreduce.wordcount;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WordCountMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, IntWritable&gt;&#123;<br>    <span class="hljs-type">Text</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br>    <span class="hljs-type">IntWritable</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span><br>    <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// 1 获取一行</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> value.toString();<br>        <span class="hljs-comment">// 2 切割</span><br>        String[] words = line.split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-comment">// 3 输出</span><br>        <span class="hljs-keyword">for</span> (String word : words) &#123;<br>            k.set(word);<br>            context.write(k, v);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​编写 Reducer 类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.mapreduce.wordcount;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WordCountReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, IntWritable, Text, IntWritable&gt;&#123;<br>    <span class="hljs-type">int</span> sum;<br>    <span class="hljs-type">IntWritable</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;IntWritable&gt; values,Context</span><br><span class="hljs-params">    context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// 1 累加求和</span><br>        sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (IntWritable count : values) &#123;<br>            sum += count.get();<br>        &#125;<br>        <span class="hljs-comment">// 2 输出</span><br>        v.set(sum);<br>        context.write(key,v);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​编写 Driver 驱动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.mapreduce.wordcount;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WordCountDriver</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, InterruptedException &#123;<br>    <span class="hljs-comment">// 1 获取配置信息以及获取 job 对象</span><br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>    <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br>    <span class="hljs-comment">// 2 关联本 Driver 程序的 jar</span><br>    job.setJarByClass(WordCountDriver.class);<br>    <span class="hljs-comment">// 3 关联 Mapper 和 Reducer 的 jar</span><br>    job.setMapperClass(WordCountMapper.class);<br>    job.setReducerClass(WordCountReducer.class);<br>    <span class="hljs-comment">// 4 设置 Mapper 输出的 kv 类型</span><br>    job.setMapOutputKeyClass(Text.class);<br>    job.setMapOutputValueClass(IntWritable.class);<br>    <span class="hljs-comment">// 5 设置最终输出 kv 类型</span><br>    job.setOutputKeyClass(Text.class);<br>    job.setOutputValueClass(IntWritable.class);<br>    <span class="hljs-comment">// 6 设置输入和输出路径</span><br>    FileInputFormat.setInputPaths(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(args[<span class="hljs-number">0</span>]));<br>    FileOutputFormat.setOutputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(args[<span class="hljs-number">1</span>]));<br>    <span class="hljs-comment">// 7 提交 job</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> job.waitForCompletion(<span class="hljs-literal">true</span>);<br>    System.exit(result ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="Hadoop-序列化"><a href="#Hadoop-序列化" class="headerlink" title="Hadoop 序列化"></a>Hadoop 序列化</h2><ol><li>什么是序列化</li></ol><blockquote><p>序列化：把内存中的对象，转换成字节序列（或其他数据传输协议）以便于存储到磁盘（持久化）和网络传输。</p><p>反序列化：将收到的字节序列（或其他数据传输协议）或者是磁盘的持久化数据，转为内存中的对象。</p></blockquote><ol start="2"><li><p>内存中的对象只能在本地进程中使用而且关机就没了，序列化可以存储对象，在需要的时候调用，也可以将其发送到远程计算机使用。</p></li><li><p>Java 的序列化是一个重量级序列化框架（Serializable），一个对象被序列化后，会附带很多额外的信息（各种校验信息， Header，继承体系等），不便于在网络中高效传输。所以，Hadoop 自己开发了一套序列化机制（Writable）。</p></li><li><p>Hadoop 序列化特点：</p></li></ol><blockquote><p>紧凑 ： 高效使用存储空间。</p><p>快速： 读写数据的额外开销小。</p><p>互操作： 支持多语言的交互  。</p></blockquote><h4 id="自定义-bean-对象实现序列化接口（Writable）"><a href="#自定义-bean-对象实现序列化接口（Writable）" class="headerlink" title="自定义 bean 对象实现序列化接口（Writable）"></a>自定义 bean 对象实现序列化接口（Writable）</h4><ol><li>必须实现 Writable 接口  </li><li>反序列化时，需要反射调用空参构造函数，所以必须有空参构造  </li><li>重写序列化方法  </li><li>重写反序列化方法  </li><li>注意反序列化的顺序和序列化的顺序完全一致  </li><li>要想把结果显示在文件中，需要重写 toString()，可用”\t”分开，方便后续用。  </li><li>如果需要将自定义的 bean 放在 key 中传输，则还需要实现 Comparable 接口，因为MapReduce 框中的 Shuffle 过程要求对 key 必须能排序。</li></ol><p>例如：</p><p>统计每一个手机号耗费的总上行流量、 总下行流量、总流量  </p><p>输入数据格式：</p><table><thead><tr><th>id</th><th>手机号码</th><th>网络ip</th><th>上行流量</th><th>下行流量</th><th>网络状态码</th></tr></thead><tbody><tr><td>7</td><td>13560436666</td><td>120.196.100.99</td><td>1116</td><td>954</td><td>200</td></tr></tbody></table><p>期望输出数据格式：</p><table><thead><tr><th>手机号码</th><th>上行流量</th><th>下行流量</th><th>总流量</th></tr></thead><tbody><tr><td>13560436666</td><td>1116</td><td>954</td><td>2070</td></tr></tbody></table><p>编写流量统计的 Bean 对象  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.mapreduce.writable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Writable;<br><span class="hljs-keyword">import</span> java.io.DataInput;<br><span class="hljs-keyword">import</span> java.io.DataOutput;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-comment">//1 继承 Writable 接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Writable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> upFlow; <span class="hljs-comment">//上行流量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> downFlow; <span class="hljs-comment">//下行流量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> sumFlow; <span class="hljs-comment">//总流量</span><br>    <span class="hljs-comment">//2 提供无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FlowBean</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//3 提供三个参数的 getter 和 setter 方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getUpFlow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> upFlow;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUpFlow</span><span class="hljs-params">(<span class="hljs-type">long</span> upFlow)</span> &#123;<br>        <span class="hljs-built_in">this</span>.upFlow = upFlow;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getDownFlow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> downFlow;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDownFlow</span><span class="hljs-params">(<span class="hljs-type">long</span> downFlow)</span> &#123;<br>        <span class="hljs-built_in">this</span>.downFlow = downFlow;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getSumFlow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sumFlow;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSumFlow</span><span class="hljs-params">(<span class="hljs-type">long</span> sumFlow)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sumFlow = sumFlow;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSumFlow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.sumFlow = <span class="hljs-built_in">this</span>.upFlow + <span class="hljs-built_in">this</span>.downFlow;<br>    &#125;<br>    <span class="hljs-comment">//4 实现序列化和反序列化方法,注意顺序一定要保持一致</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(DataOutput dataOutput)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        dataOutput.writeLong(upFlow);<br>        dataOutput.writeLong(downFlow);<br>        dataOutput.writeLong(sumFlow);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFields</span><span class="hljs-params">(DataInput dataInput)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.upFlow = dataInput.readLong();<br>        <span class="hljs-built_in">this</span>.downFlow = dataInput.readLong();<br>        <span class="hljs-built_in">this</span>.sumFlow = dataInput.readLong();<br>    &#125;<br>    <span class="hljs-comment">//5 重写 ToString</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> upFlow + <span class="hljs-string">&quot;\t&quot;</span> + downFlow + <span class="hljs-string">&quot;\t&quot;</span> + sumFlow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​编写 Mapper 类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.mapreduce.writable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, FlowBean&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Text</span> <span class="hljs-variable">outK</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">FlowBean</span> <span class="hljs-variable">outV</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowBean</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span><br>    <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">//1 获取一行数据,转成字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> value.toString();<br>        <span class="hljs-comment">//2 切割数据</span><br>        String[] split = line.split(<span class="hljs-string">&quot;\t&quot;</span>);<br>        <span class="hljs-comment">//3 抓取我们需要的数据:手机号,上行流量,下行流量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">up</span> <span class="hljs-operator">=</span> split[split.length - <span class="hljs-number">3</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">down</span> <span class="hljs-operator">=</span> split[split.length - <span class="hljs-number">2</span>];<br>        <span class="hljs-comment">//4 封装 outK outV</span><br>        outK.set(phone);<br>        outV.setUpFlow(Long.parseLong(up));<br>        outV.setDownFlow(Long.parseLong(down));<br>        outV.setSumFlow();<br>        <span class="hljs-comment">//5 写出 outK outV</span><br>        context.write(outK, outV);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​编写 Reducer 类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.mapreduce.writable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, FlowBean, Text, FlowBean&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">FlowBean</span> <span class="hljs-variable">outV</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowBean</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;FlowBean&gt; values, Context</span><br><span class="hljs-params">    context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">totalUp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">totalDown</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//1 遍历 values,将其中的上行流量,下行流量分别累加</span><br>        <span class="hljs-keyword">for</span> (FlowBean flowBean : values) &#123;<br>            totalUp += flowBean.getUpFlow();<br>            totalDown += flowBean.getDownFlow();<br>        &#125;<br>        <span class="hljs-comment">//2 封装 outKV</span><br>        outV.setUpFlow(totalUp);<br>        outV.setDownFlow(totalDown);<br>        outV.setSumFlow();<br>        <span class="hljs-comment">//3 写出 outK outV</span><br>        context.write(key,outV);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​编写 Driver 驱动类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.mapreduce.writable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowDriver</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, InterruptedException &#123;<br>        <span class="hljs-comment">//1 获取 job 对象</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br>        <span class="hljs-comment">//2 关联本 Driver 类</span><br>        job.setJarByClass(FlowDriver.class);<br>        <span class="hljs-comment">//3 关联 Mapper 和 Reducer</span><br>        job.setMapperClass(FlowMapper.class);<br>        job.setReducerClass(FlowReducer.class);<br>        <span class="hljs-comment">//4 设置 Map 端输出 KV 类型</span><br>        job.setMapOutputKeyClass(Text.class);<br>        job.setMapOutputValueClass(FlowBean.class);<br>        <span class="hljs-comment">//5 设置程序最终输出的 KV 类型</span><br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(FlowBean.class);<br>        <span class="hljs-comment">//6 设置程序的输入输出路径</span><br>        FileInputFormat.setInputPaths(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;D:\\inputflow&quot;</span>));<br>        FileOutputFormat.setOutputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;D:\\flowoutput&quot;</span>));<br>        <span class="hljs-comment">//7 提交 Job</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> job.waitForCompletion(<span class="hljs-literal">true</span>);<br>        System.exit(b ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MapReduce-框架原理"><a href="#MapReduce-框架原理" class="headerlink" title="MapReduce 框架原理"></a>MapReduce 框架原理</h2><h3 id="InputFormat-数据输入"><a href="#InputFormat-数据输入" class="headerlink" title="InputFormat 数据输入"></a>InputFormat 数据输入</h3><p>MapTask 的并行度决定 Map 阶段的任务处理并发度，进而影响到整个 Job 的处理速度</p><p>对于 1G 数据启动 8 个 MapTask 可以提高并发能力，但是对于 1 k 的数据启动 8 个是否合适呢？启动 8 MapTask 的时间远大于处理数据的时间。</p><h4 id="MapTask-并行度决定机制"><a href="#MapTask-并行度决定机制" class="headerlink" title="MapTask 并行度决定机制"></a>MapTask 并行度决定机制</h4><blockquote><p>数据块：Block 是 HDFS 物理上把数据分成一块一块。数据块是 HDFS 的存储数据单位</p><p>数据切片：数据切片是逻辑上对输入进行切片，并不是在磁盘上切片存储。数据切片是 MapReduce 计算输入数据的单位，一个切片会对应启动一个 MapTask。</p></blockquote><ol><li>一个 job 的 <strong>Map 阶段并行度</strong>由客户端在提交 job 时的<strong>切片数决定</strong></li><li>每一个 Split 切片分配一个 MapTask 并行实例处理</li><li>默认情况下，切片大小 &#x3D; BlockSize</li><li>切片时不考虑数据集整体（总收入的数据涉及每日收入存储文件），而是逐个针对每一个文件单独切片（当日交易数据）。</li></ol><h4 id="Job-提交流程源码解析"><a href="#Job-提交流程源码解析" class="headerlink" title="Job 提交流程源码解析"></a>Job 提交流程源码解析</h4><p><img src="/2022/07/17/Hadoop-MapReduce/image-20220715112714270.png" alt="JobSubmit"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">waitForCompletion()<br>submit();<br><span class="hljs-comment">// 1 建立连接</span><br>connect();<br><span class="hljs-comment">// 1）创建提交 Job 的代理</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Cluster</span>(getConfiguration());<br><span class="hljs-comment">// （1）判断是本地运行环境还是 yarn 集群运行环境</span><br>initialize(jobTrackAddr, conf);<br><span class="hljs-comment">// 2 提交 job</span><br>submitter.submitJobInternal(Job.<span class="hljs-built_in">this</span>, cluster)<br><span class="hljs-comment">// 1）创建给集群提交数据的 Stag 路径</span><br><span class="hljs-type">Path</span> <span class="hljs-variable">jobStagingArea</span> <span class="hljs-operator">=</span> JobSubmissionFiles.getStagingDir(cluster, conf);<br><span class="hljs-comment">// 2）获取 jobid ，并创建 Job 路径</span><br><span class="hljs-type">JobID</span> <span class="hljs-variable">jobId</span> <span class="hljs-operator">=</span> submitClient.getNewJobID();<br><span class="hljs-comment">// 3）拷贝 jar 包到集群</span><br>copyAndConfigureFiles(job, submitJobDir);<br>rUploader.uploadFiles(job, jobSubmitDir);<br><span class="hljs-comment">// 4）计算切片，生成切片规划文件</span><br>writeSplits(job, submitJobDir);<br>maps = writeNewSplits(job, jobSubmitDir);<br>input.getSplits(job);<br><span class="hljs-comment">// 5）向 Stag 路径写 XML 配置文件</span><br>writeConf(conf, submitJobFile);<br>conf.writeXml(out);<br><span class="hljs-comment">// 6）提交 Job,返回提交状态</span><br>status = submitClient.submitJob(jobId, submitJobDir.toString(),<br>job.getCredentials());<br></code></pre></td></tr></table></figure><h4 id="FileInputFormat-切片机制"><a href="#FileInputFormat-切片机制" class="headerlink" title="FileInputFormat 切片机制"></a>FileInputFormat 切片机制</h4><p><strong>切片机制</strong></p><blockquote><p>简单地按照文件的内容长度进行切片  </p><p>切片大小， 默认等于Block大小  </p><p>切片时不考虑数据集整体， 而是逐个针对每一个文件单独切片  </p></blockquote><p>例如</p><table><thead><tr><th>源文件</th><th>切片后</th></tr></thead><tbody><tr><td>file1.txt          320M</td><td>file1.txt.split1          0-128M</td></tr><tr><td></td><td>file1.txt.split2          128-256M</td></tr><tr><td></td><td>file1.txt.split3          256-320M</td></tr><tr><td>file2.txt          10m</td><td>file2.txt.split1          0-10M</td></tr></tbody></table><p><strong>源码解析</strong></p><ol><li><p>程序先找到你数据存储的目录。  </p></li><li><p>开始遍历处理（规划切片）目录下的每一个文件  </p></li><li><p>遍历第一个文件xx.txt</p><blockquote><ol><li>获取文件大小fs.sizeOf(xx.txt)  </li><li>计算切片大小   computeSplitSize(Math.max(minSize,Math.min(maxSize,blocksize)))&#x3D;blocksize&#x3D;128M  </li><li>默认情况下，切片大小&#x3D;blocksize  </li><li>开始切，形成第1个切片： xx.txt —0:128M 第2个切片 xx.txt —128:256M 第3个切片 xx.txt—256M:300M  （ 每次切片时，都要判断切完剩下的部分是否大于块的1.1倍，不大于1.1倍就划分一块切片）  </li><li>将切片信息写到一个切片规划文件中  </li><li>整个切片的核心过程在getSplit()方法中完成  </li><li>InputSplit只记录了切片的元数据信息，比如起始位置、长度以及所在的节点列表等</li></ol></blockquote></li><li><p>提交切片规划文件到YARN上， YARN上的MrAppMaster就可以根据切片规划文件计算开启MapTask个数</p></li></ol><p><strong>参数配置</strong> </p><blockquote><p><strong>源码中计算切片大小的公式</strong> </p><p>Math.max(minSize, Math.min(maxSize, blockSize));<br>mapreduce.input.fileinputformat.split.minsize&#x3D;1 默认值为1<br>mapreduce.input.fileinputformat.split.maxsize&#x3D; Long.MAXValue 默认值Long.MAXValue 因此， 默认情况下， 切片大小&#x3D;blocksize。  </p><p><strong>切片大小设置</strong>  </p><p>maxsize（ 切片最大值） ：参数如果调得比blockSize小， 则会让切片变小， 而且就等于配置的这个参数的值。<br>minsize（ 切片最小值） ：参数调的比blockSize大， 则可以让切片变得比blockSize还大。</p><p><strong>获取切片信息API</strong> </p><p>&#x2F;&#x2F; 获取切片的文件名称<br>String name &#x3D; inputSplit.getPath().getName();<br>&#x2F;&#x2F; 根据文件类型获取切片信息<br>FileSplit inputSplit &#x3D; (FileSplit) context.getInputSplit();  </p></blockquote><h4 id="TextInputFormat"><a href="#TextInputFormat" class="headerlink" title="TextInputFormat"></a>TextInputFormat</h4><p><strong>FileInputFormat 实现类</strong>  </p><p>在运行 MapReduce 程序时，输入的文件格式包括：基于行的日志文件、二进制格式文件、数据库表等。 针对不同的数据类型，FileInputFormat 提供了常见的接口实现类来解决包括： TextInputFormat、 KeyValueTextInputFormat、NLineInputFormat、 CombineTextInputFormat 和自定义 InputFormat 等。  </p><p><strong>TextInputFormat</strong>  </p><p>TextInputFormat 是默认的 FileInputFormat 实现类。按行读取每条记录。 键是存储该行在整个文件中的起始字节偏移量， LongWritable 类型。值是这行的内容，不包括任何行终止符（换行符和回车符）， Text 类型。  </p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>源文件</td><td>Key&#x2F;Value</td></tr><tr><td>Rich learning form<br>Intelligent learning engine<br>Learning more convenient<br>From the real demand for more close to the enterprise</td><td>(0,Rich learning form)<br>(20,Intelligent learning engine)<br>(49,Learning more convenient)<br>(74,From the real demand for more close to the enterprise)</td></tr></tbody></table><h4 id="CombineTextInputFormat-切片机制"><a href="#CombineTextInputFormat-切片机制" class="headerlink" title="CombineTextInputFormat 切片机制"></a>CombineTextInputFormat 切片机制</h4><p>按文件规划切片，不管文件多小，都会单独一个切片（如果小文件很多，最后会合并产生好几个符合最大虚拟存储值的切片，MapTask 的数量是由切片数决定的），只交给一个 MapTask，用于解决大量小文件问题。</p><p><strong>虚拟存储切片最大值设置</strong></p><p>CombineTextInputFormat.setMaxInputSplitSize(job, 4194304);&#x2F;&#x2F; 4m<br>注意： 虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值。  </p><p><strong>切片机制</strong></p><ol><li><p>虚拟存储过程</p><blockquote><ol><li>将输入目录下所有文件大小， 依次和设置的 setMaxInputSplitSize 值比较， 如果不大于设置的最大值， 逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块； 当剩余数据大小超过设置的最大值且不大于最大值 2 倍，此时将文件均分成 2 个虚拟存储块（防止出现太小切片） 。<br>例如 setMaxInputSplitSize 值为 4M， 输入文件大小为 8.02M，则先逻辑上分成一个4M。 剩余的大小为 4.02M，如果按照 4M 逻辑划分，就会出现 0.02M 的小的虚拟存储文件， 所以将剩余的 4.02M 文件切分成（2.01M 和 2.01M）两个文件</li></ol></blockquote></li><li><p>切片过程</p><blockquote><ol><li><p>判断虚拟存储的文件大小是否大于 setMaxInputSplitSize 值，大于等于则单独<br>形成一个切片。  （主要是用于合并之后做判断，合并之后发现大于就不合了，小于就继续合）</p></li><li><p>如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片。  </p></li><li><p>测试举例：有 4 个小文件大小分别为 1.7M、 5.1M、 3.4M 以及 6.8M 这四个小文件，则虚拟存储之后形成 6 个文件块，大小分别为：</p><p>1.7M，（2.55M、 2.55M） ， 3.4M 以及（3.4M、 3.4M）  </p><p>最终会形成 3 个切片，大小分别为：  </p><p>（1.7+2.55） M， （2.55+3.4） M， （3.4+3.4） M</p></li></ol></blockquote></li></ol><h3 id="MapReduce-工作流程"><a href="#MapReduce-工作流程" class="headerlink" title="MapReduce 工作流程"></a>MapReduce 工作流程</h3><p><img src="/2022/07/17/Hadoop-MapReduce/MR_Procedure.jpg" alt="MapReduce Working Procedure"></p><h4 id="MapReduce-工作步骤"><a href="#MapReduce-工作步骤" class="headerlink" title="MapReduce 工作步骤"></a><a href="https://blog.csdn.net/qq_44350553/article/details/109550564">MapReduce 工作步骤</a></h4><ol><li><p>首先有一个待处理的文本ss.txt 假设为200M大小</p></li><li><p>在客户端submit()之前，获取待处理的数据的信息，然后根据参数配置，形成一个任务分配的规划 。（默认128m一个数据块）</p><blockquote><p>ss.txt 0-128 任务1</p><p>ss.txt 128-200 任务2</p></blockquote></li><li><p>提交信息</p><blockquote><p>Job.split（任务切片信息）</p><p>wc.jar（需要提交的jar包）</p><p>Job.xml（xml配置文件）</p><p>将这三个文件从MapReduce客户端提交到Yarn上的ResourceManager上进行处理。</p></blockquote></li><li><p>4.Yarn上提交时，会将每个任务封装成一个job，提交给yarn处理，ResourceManager会计算出MapTask数量（和切片数量一致）然后RM把任务分配给NodeMamager，在MR appmaster允许后，NodeManager就会来处理相应的任务（Maptask1&amp;Maptask2)，每个任务会并行执行。</p></li><li><p>MapTask会执行Mapper中的map方法，此方法需要传入k，v值，所以我们需要先从数据中获取k，v值，以作为输入的参数具体做法是：首先调用InputFormat方法，默认为TextInputFormat方法，在此方法中调用createRecordReader方法，将每个块封装（k,v）键值对，然后传递给map方法。</p></li><li><p>数据进入MapTask中以后会进行Map端的逻辑运算，运算完后，会进行写操作。</p></li><li><p>map端产生的数据如果直接进行写操作，写入到reduce中，会直接操作磁盘，这样就会进行大量的io操作，效率太低，所以map端reduce端之间会进行一个shuffle操作。</p></li><li><p>所以map端产生数据后会通过outputCollector向环形缓冲区写入数据，环形缓冲区分为两部分，一部分写入文件的元数据信息，另一部分写入文件的真实内容。环形缓冲区默认大小为100M，环形缓冲区写入80%数据以后，会反向溢写。</p></li><li><p>在溢写之前会对环形缓冲区中数据会按照指定的分区排序规则进行分区和排序，之所以反向溢写是为了可以边接收数据边向磁盘中溢写数据。</p></li><li><p>在分区和排序过后会把文件溢写到磁盘当中，可能发生多次溢写，可能溢写到多个文件。</p></li><li><p>对所有溢写到磁盘中的文件进行Merge归并排序操作。</p></li><li><p>在溢写到磁盘后和对磁盘中文件归并排序之前可能进行combine合并操作，它的意义是对每个MapTask输出的数据进行局部汇总，以减少网络传输量。</p><blockquote><p>第一：在Map阶段，由于map的进程数量是多于reduce的，所以map阶段处理的效率更高<br>第二：在Map阶段进行合并，这样传递给reduce的数据<br>会少很多。<br>第三：combine操作能够应用的前提是不能够影响最终的业务逻辑，combine的输出的kv要和reduce输入的kv对应起来。</p></blockquote></li></ol><p><strong>Map 阶段汇总</strong></p><p>宏观上看，MapTask阶段分为 Read阶段，Map阶段，Collect阶段，和溢写（spill）阶段, Merge 阶段  </p><blockquote><p>Read阶段:MapTask运用用户编写的RecordReader方法，从输入的inputsplit中解析出key&#x2F;value</p><p>Map阶段：将key&#x2F;value值放入用户编写的map（）方法中，产生一系列新的key&#x2F;value值。</p><p>Collect阶段，将用户在map（）阶段处理完成的每个key&#x2F;value数据，调用OutputCollector.collect（）方法，输出结果。在函数内部，它将会生成key&#x2F;value的分区（调用partioner），并写入到一个环形缓冲区当中。</p><p>spill阶段，即溢写，当环形缓冲区数据满时，MapReduce会将数据写入到本地磁盘上，此时会生成一个临时文件，需要注意的是，在数据写入到磁盘前，会对数据进行一次本地排序，有必要时，还会对数据进行合并，压缩等操作。</p><p>Merge 阶段：当所有数据处理完成后， MapTask 对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。</p><p>当所有数据处理完后， MapTask 会将所有临时文件合并成一个大文件， 并保存到文件output&#x2F;file.out 中，同时生成相应的索引文件 output&#x2F;file.out.index。<br>在进行文件合并过程中， MapTask 以分区为单位进行合并。对于某个分区， 它将采用多轮递归合并的方式。 每轮合并 mapreduce.task.io.sort.factor（默认 10） 个文件，并将产生的文件重新加入待合并列表中，对文件排序后，重复以上过程，直到最终得到一个大文件。让每个 MapTask 最终只生成一个数据文件，可避免同时打开大量文件和同时读取大量小文件产生的随机读取带来的开销。  </p><p>MRAppmaster职能：启动MapTask任务</p></blockquote><ol start="12"><li>所有MapTask数据处理完成后，启动相印数量的ReduceTask，并告知ReduceTask需要处理数据的范围（数据分区）</li><li>ReduceTask将MapTask中的数据下载到ReduceTask本地磁盘，然后合并不同的文件，进行归并排序。</li><li>最后将数据交给Reduce处理，一次读区一组数据。</li><li>最后通过OutputFormat的RecordWriter方法将数据写入到本地磁盘的文件当中。</li></ol><p><strong>Reduce 阶段汇总</strong></p><p>1.Copy 2.Merge 3.Sort 4.Reduce</p><blockquote><p>copy: ReduceTask将远程从MapTask上复制过来要处理的数据，针对某一片数据，如果数据的大小超过一个阈值，则直接存储在磁</p><p>盘中，否则直接放到内存中。</p><p>Merge：ReduceTask在远程复制的同时，后台启动了两个线程，将硬盘和内存中的数据进行合并，样可以避免内存占用过多，或者磁盘文件过多。</p><p>sort:按照MapReduce的语义，Reduce()的输入值是按照key进行聚集的一组数据，为了将key相同的数据放在一起，hadoop采用了基于排序的策略，由于MapTask阶段已经进行了局部排序，所以ReduceTask阶段只需要对所有数据进行一次归并排序即可</p><p>Reduce：Reducer会调用reduce()方法将处理好的数据写入到HDFS当中。</p></blockquote><p><strong>设置 ReduceTask 并行度 (个数)</strong></p><p> ReduceTask 的并行度同样影响整个 Job 的执行并发度和执行效率，但与 MapTask 的并发数由切片数决定不同， ReduceTask 数量的决定是可以直接手动设置：  </p><blockquote><p>&#x2F;&#x2F; 默认值是 1，手动设置为 4<br>job.setNumReduceTasks(4);  </p></blockquote><p>注:</p><ol><li>ReduceTask&#x3D;0， 表示没有Reduce阶段， 输出文件个数和Map个数一致。</li><li>ReduceTask默认值就是1， 所以输出文件个数为一个。</li><li>如果数据分布不均匀， 就有可能在Reduce阶段产生数据倾斜</li><li>ReduceTask数量并不是任意设置， 还要考虑业务逻辑需求， 有些情况下， 需要计算全局汇总结果， 就只能有1个ReduceTask。</li><li>具体多少个ReduceTask， 需要根据集群性能而定。</li><li>如果分区数不是1， 但是ReduceTask为1， 是否执行分区过程。 答案是：不执行分区过程。 因为在MapTask的源码中， 执行分区的前提是先判断ReduceNum个数是否大于1。 不大于1肯定不执行</li></ol><h4 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h4><p><strong>工作流程</strong></p><p><img src="/2022/07/17/Hadoop-MapReduce/image-20220716154211817.png" alt="Shuffle Working Procedure"></p><p>Shuffle是指在map()方法之后，reduce()方法之前所进行的数据处理过程，shuffle的流程详解如下：</p><ol><li>首先MapTask的Map方法将输出的(k，v)数据放入到环形缓冲区中。</li><li>当环形缓冲区数据达到80%时，会将数据不断溢写到磁盘当中，有可能溢出多个文件，多个溢出的文件会合并成为一个大的文件。</li><li>在溢出的过程以及合并的过程中，会调用partioner对磁盘中的数据会进行分区，进行按照key排序。</li><li>reduceTask会根据自身的分区号结合map端数据，取出相应的MapTask中的分区数据。</li><li>ReduceTask会储存来自不同MapTask的结果文件进行归并，排序。</li><li>当合并成大文件之后，shuffle过程就结束了，此时会进入reduce()方法。</li></ol><p><strong><a href="https://www.cnblogs.com/yin1361866686/p/11732071.html">spill</a></strong></p><p>spill线程为这次spill过程创建一个磁盘文件（从所有本地目录中轮询查找拥有足够大空间的目录，找到之后在该目录下创建一个类似“spillxx.out”的文件）。spill线程根据排过序的kvmeta逐个将partition的数据写入该文件，直到所有的partition都写完。一个partition在文件中对应的数据叫“段（segment）”。</p><p>partition在文件中的索引信息是由一个三元组记录的，该三元组包括：起始位置、原始数据长度、压缩之后的数据长度，一个partition对应一个三元组。所有的索引信息是存放在内存中的，若果内存空间不足了就会把后续的索引信息写到磁盘中。</p><p>从所有的本地目录总轮询查找拥有足够大空间的目录，在该目录下创建一个类似“spillxx.out.index”的文件，文件中不光存储了索引数据还存储了crc32的校验数据（spillxx.out.index文件和spillxx.out文件不一定是在同一个目录下）。</p><p>每一次spill过程会生成至少一个out文件，有时还会生成index文件，spill的次数也会在文件名中显现出来。</p><p><img src="/2022/07/17/Hadoop-MapReduce/image-20220716154914368.png" alt="spill"></p><p>溢写阶段详情：<br>步骤 1： 利用快速排序算法对缓存区内的数据进行排序，排序方式是，<strong>先按照分区编号Partition 进行排序</strong>，<strong>然后按照 key 进行排序</strong>。这样， 经过排序后，数据以分区为单位聚集在一起，且同一分区内所有数据按照 key 有序。</p><p>步骤 2： 按照分区编号由小到大依次将每个分区中的数据写入任务工作目录下的临时文件 output&#x2F;spillN.out（N 表示当前溢写次数）中。如果用户设置了 Combiner，则写入文件之前，对每个分区中的数据进行一次聚集操作。</p><p>步骤 3： 将分区数据的元信息写到内存索引数据结构 SpillRecord 中，其中每个分区的元信息包括在临时文件中的偏移量、压缩前数据大小和压缩后数据大小。如果当前内存索引大小超过 1MB，则将内存索引写到文件 output&#x2F;spillN.out.index 中。  </p><h3 id="MapReduce-优化"><a href="#MapReduce-优化" class="headerlink" title="MapReduce 优化"></a>MapReduce 优化</h3><p><strong>Map 阶段</strong></p><ol><li><p><strong>减少溢写的次数</strong></p><blockquote><p>mapreduce.task.io.sort.mb</p><p>Shuffle的环形缓冲区大小，默认100m，可以提高到200m</p><p>mapreduce.map.sort.spill.percent</p><p>环形缓冲区溢出的阈值，默认80% ，可以提高的90%</p></blockquote></li><li><p><strong>增加每次Merge合并次数</strong></p><blockquote><p>mapreduce.task.io.sort.factor默认10，可以提高到20</p></blockquote></li><li><p><strong>在不影响业务结果的前提条件下可以提前采用Combiner</strong></p><blockquote><p>job.setCombinerClass(xxxReducer.class);</p></blockquote></li><li><p><strong>异常重试</strong></p><blockquote><p>mapreduce.map.maxattempts每个Map Task最大重试次数，一旦重试次数超过该值，则认为Map Task运行失败，默认值：4。根据机器性能适当提高。</p></blockquote></li></ol><p><strong>Reduce阶段</strong></p><ol><li><p><strong>合理设置Map和Reduce数</strong></p><blockquote><p>两个都不能设置太少，也不能设置太多。太少，会导致Task等待，延长处理时间；太多，会导致 Map、Reduce任务间竞争资源，造成处理超时等错误。</p></blockquote></li><li><p><strong>设置Map、Reduce共存</strong></p><blockquote><p>调整mapreduce.job.reduce.slowstart.completedmaps当MapTask完成的比例达到该值后才会为ReduceTask申请资源。默认是0.05。</p></blockquote></li><li><p><strong>规避使用Reduce，因为Reduce在用于连接数据集的时候将会产生大量的网络消耗。</strong></p></li><li><p><strong>增加每个Reduce去Map中拿数据的并行数</strong></p><blockquote><p>mapreduce.reduce.shuffle.parallelcopies每个Reduce去Map中拉取数据的并行数，默认值是5。可以提高到10。</p></blockquote></li><li><p><strong>集群性能可以的前提下，增大Reduce端存储数据内存的大小</strong>。</p><blockquote><p>mapreduce.reduce.memory.mb 默认ReduceTask内存上限1024MB，根据128m数据对应1G内存原则，适当提高内存到4-6G</p></blockquote></li><li><p><strong>异常重试</strong></p><blockquote><p>mapreduce.reduce.maxattempts每个Reduce Task最大重试次数，一旦重试次数超过该值，则认为Reduce Task运行失败，默认值：4。</p></blockquote></li><li><p><strong>mapreduce.reduce.shuffle.input.buffer.percent</strong></p><blockquote><p>Buffer大小占Reduce可用内存的比例，默认值0.7。可以提高到0.8</p></blockquote></li><li><p>mapreduce.reduce.shuffle.merge.percent </p><blockquote><p>Buffer中的数据达到多少比例开始写入磁盘，默认值0.66。可以提高到0.75</p></blockquote></li></ol><p><strong>IO传输</strong></p><p>采用数据压缩的方式，减少网络IO的的时间。安装Snappy和LZOP压缩编码器。</p><p><strong>为了减少磁盘和传输IO，可以采用Snappy或者LZO压缩</strong></p><blockquote><p>conf.setBoolean(“mapreduce.map.output.compress”, true);</p><p>conf.setClass(“mapreduce.map.output.compress.codec”, SnappyCodec.class,CompressionCodec.class);</p><ol><li>map输入端主要考虑数据量大小和切片，支持切片的有Bzip2、LZO。注意：LZO要想支持切片必须创建索引；</li><li>map输出端主要考虑速度，速度快的snappy、LZO；</li><li>reduce输出端主要看具体需求，例如作为下一个mr输入需要考虑切片，永久保存考虑压缩率比较大的gzip。</li></ol></blockquote><p><strong>整体</strong></p><ol><li><p><strong>自定义分区，减少数据倾斜</strong></p><blockquote><p>定义类，继承Partitioner接口，重写getPartition方法</p></blockquote></li><li><p><strong>NodeManager默认内存8G，需要根据服务器实际配置灵活调整</strong></p><blockquote><p>例如128G内存，配置为100G内存左右，yarn.nodemanager.resource.memory-mb</p></blockquote></li><li><p><strong>单容器默认内存8G，需要根据该任务的数据量灵活调整</strong></p><blockquote><p>例如128m数据，配置1G内存，yarn.scheduler.maximum-allocation-mb。</p></blockquote></li><li><p><strong>mapreduce.map.memory.mb</strong></p><blockquote><p>控制分配给MapTask内存上限，如果超过会kill掉进程（报：Container is running beyond physical memory limits. Current usage:565MB of512MB physical memory used；Killing Container）。默认内存大小为1G，如果数据量是128m，正常不需要调整内存；如果数据量大于128m，可以增加MapTask内存，最大可以增加到4-5g。</p></blockquote></li><li><p><strong>mapreduce.reduce.memory.mb</strong></p><blockquote><p>控制分配给ReduceTask内存上限。默认内存大小为1G，如果数据量是128m，正常不需要调整内存；如果数据量大于128m，可以增加ReduceTask内存大小为4-5g。</p></blockquote></li><li><p><strong>mapreduce.map.java.opts</strong></p><blockquote><p>控制MapTask堆内存大小。（如果内存不够，报：java.lang.OutOfMemoryError）</p></blockquote></li><li><p><strong>mapreduce.reduce.java.opts</strong></p><blockquote><p>控制ReduceTask堆内存大小。（如果内存不够，报：java.lang.OutOfMemoryError）</p></blockquote></li><li><p><strong>mapreduce.task.timeout</strong></p><blockquote><p>如果一个Task在一定时间内没有任何进入，即不会读取新的数据，也没有输出数据，则认为该Task处于Block状态，可能是卡住了，也许永远会卡住，为了防止因为用户程序永远Block住不退出，则强制设置了一个该超时时间（单位毫秒），默认是600000（10分钟）。如果你的程序对每条输入数据的处理时间过长，建议将该参数调大。</p></blockquote></li><li><p><strong>可以增加MapTask的CPU核数，增加ReduceTask的CPU核数</strong></p></li><li><p><strong>增加每个Container的CPU核数和内存大小</strong></p></li><li><p><strong>在hdfs-site.xml文件中配置多目录（多磁盘）</strong></p></li></ol><h3 id="Partition-分区"><a href="#Partition-分区" class="headerlink" title="Partition 分区"></a>Partition 分区</h3><p>要求将统计结果按照条件输出到不同文件中（ 分区） 。  </p><p><strong>默认Partitioner分区</strong> </p><p>默认分区是根据key的hashCode对ReduceTasks个数取模得到的。用户没法控制哪个key存储到哪个分区。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashPartitioner</span>&lt;K, V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Partitioner</span>&lt;K, V&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPartition</span><span class="hljs-params">(K key, V value, <span class="hljs-type">int</span> numReduceTasks)</span> &#123;<br>        <span class="hljs-keyword">return</span> (key.hashCode() &amp; Integer.MAX_VALUE) % numReduceTasks;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自定义Partitioner步骤</strong></p><ol><li><p>自定义类继承Partitioner，重写getPartition()方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomPartitioner</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Partitioner</span>&lt;Text, FlowBean&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPartition</span><span class="hljs-params">(Text key, FlowBean value, <span class="hljs-type">int</span> numPartitions)</span> &#123;<br>        <span class="hljs-comment">// 控制分区代码逻辑</span><br>        … …<br>        <span class="hljs-keyword">return</span> partition;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在Job驱动中， 设置自定义Partitioner  </p><blockquote><p>job.setPartitionerClass(CustomPartitioner.class);  </p></blockquote></li><li><p>自定义Partition后，要根据自定义Partitioner的逻辑设置相应数量的ReduceTask  </p><blockquote><p>job.setNumReduceTasks(5);</p></blockquote></li></ol><p><strong>分区总结</strong></p><ol><li><p>如果ReduceTask的数量&gt; getPartition的结果数， 则会多产生几个空的输出文件part-r-000xx</p><blockquote><p>job.setNumReduceTasks(6);  大于5， 程序会正常运行， 会产生空文件  </p></blockquote></li><li><p>如果1&lt;ReduceTask的数量&lt;getPartition的结果数， 则有一部分分区数据无处安放， 会Exception</p></li><li><p>如果ReduceTask的数量&#x3D;1， 则不管MapTask端输出多少个分区文件， 最终结果都交给这一个ReduceTask， 最终也就只会产生一个结果文件 part-r-00000；  </p><blockquote><p>job.setNumReduceTasks(1);  会正常运行，只不过会产生一个输出文件  </p></blockquote></li><li><p>分区号必须从零开始， 逐一累加。</p></li></ol><p><strong>案例实操</strong></p><ol><li><p>增加自定义分区类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.mapreduce.partitionercompable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProvincePartitioner2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Partitioner</span>&lt;FlowBean, Text&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPartition</span><span class="hljs-params">(FlowBean flowBean, Text text, <span class="hljs-type">int</span> numPartitions)</span><br>    &#123;<br>        <span class="hljs-comment">//获取手机号前三位</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> text.toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">prePhone</span> <span class="hljs-operator">=</span> phone.substring(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//定义一个分区号变量 partition,根据 prePhone 设置分区号</span><br>        <span class="hljs-type">int</span> partition;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;136&quot;</span>.equals(prePhone))&#123;<br>        partition = <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;137&quot;</span>.equals(prePhone))&#123;<br>        partition = <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;138&quot;</span>.equals(prePhone))&#123;<br>        partition = <span class="hljs-number">2</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;139&quot;</span>.equals(prePhone))&#123;<br>        partition = <span class="hljs-number">3</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>        partition = <span class="hljs-number">4</span>;<br>        &#125;<br>        <span class="hljs-comment">//最后返回分区号 partition</span><br>        <span class="hljs-keyword">return</span> partition;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在驱动类中添加分区类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置自定义分区器</span><br>job.setPartitionerClass(ProvincePartitioner2.class);<br><span class="hljs-comment">// 设置对应的 ReduceTask 的个数</span><br>job.setNumReduceTasks(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="Combiner-合并"><a href="#Combiner-合并" class="headerlink" title="Combiner 合并"></a>Combiner 合并</h3><ol><li><p>Combiner是MR程序中Mapper和Reducer之外的一种组件。</p></li><li><p>Combiner组件的父类就是Reducer。</p></li><li><p>Combiner和Reducer的区别在于运行的位置</p><blockquote><p>Combiner是在每一个MapTask所在的节点运行;</p><p>Reducer是接收全局所有Mapper的输出结果；  </p></blockquote></li><li><p>Combiner的意义就是对每一个MapTask的输出进行局部汇总， 以减小网络传输量。</p></li><li><p>Combiner能够应用的前提是不能影响最终的业务逻辑， 而且， Combiner的输出kv<br>应该跟Reducer的输入kv类型要对应起来。</p></li></ol><p><strong>自定义 Combiner 实现步骤</strong>  </p><ol><li><p>自定义一个 Combiner 继承 Reducer，重写 Reduce 方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WordCountCombiner</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, IntWritable, Text,<br>IntWritable&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">IntWritable</span> <span class="hljs-variable">outV</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;IntWritable&gt; values, Context</span><br><span class="hljs-params">    context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (IntWritable value : values) &#123;<br>            sum += value.get();<br>        &#125;<br>        outV.set(sum);<br>        context.write(key,outV);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 Job 驱动类中设置：  </p><blockquote><p>job.setCombinerClass(WordCountCombiner.class);</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>BigData</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>MapReduce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hive</title>
    <link href="/2022/07/17/Hive/"/>
    <url>/2022/07/17/Hive/</url>
    
    <content type="html"><![CDATA[<h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><h2 id="Hive-概述"><a href="#Hive-概述" class="headerlink" title="Hive 概述"></a>Hive 概述</h2><h3 id="Hive-1"><a href="#Hive-1" class="headerlink" title="Hive"></a>Hive</h3><p>由 Facebook 开源用于解决海量<strong>结构化</strong>日志的数据统计工具。   </p><p>是基于 Hadoop 的一个<strong>数据仓库工具</strong>，可以将<strong>结构化的数据文件映射为一张表</strong>，并提供<strong>类 SQL</strong> 查询功能。  </p><p><strong>Hive 本质</strong>：将 HQL 转化成 MapReduce 程序  </p><blockquote><ol><li>Hive 处理的数据存储在 HDFS 上</li><li>Hive 分析数据底层的实现是 MapReduce</li><li>执行程序运行在 Yarn 上</li></ol></blockquote><img src="/2022/07/17/Hive/image-20220724091001449.png" alt="SQL-MapReduce" style="zoom: 33%;"><h3 id="Hive-优缺点"><a href="#Hive-优缺点" class="headerlink" title="Hive 优缺点"></a>Hive 优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>操作接口采用类 SQL 语法，提供快速开发的能力（简单、容易上手） 。  </li><li>避免了去写 MapReduce，减少开发人员的学习成本。  </li><li>Hive 的执行延迟比较高，因此 Hive 常用于数据分析，对实时性要求不高的场合。  </li><li>Hive 优势在于处理大数据，对于处理小数据没有优势，因为 Hive 的执行延迟比较<br>高  </li><li>Hive 支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li><p>Hive 的 HQL 表达能力有限  </p><blockquote><ol><li>迭代式算法无法表达  </li><li><strong>数据挖掘方面不擅长</strong>， 由于 MapReduce 数据处理流程的限制，效率更高的算法却无法实现。</li></ol></blockquote></li><li><p>Hive 的效率比较低  </p><blockquote><ol><li>Hive 自动生成的 MapReduce 作业，通常情况下不够智能化  </li><li>Hive 调优比较困难，粒度较粗</li></ol></blockquote></li></ol><h3 id="Hive-架构原理"><a href="#Hive-架构原理" class="headerlink" title="Hive 架构原理"></a>Hive 架构原理</h3><img src="/2022/07/17/Hive/image-20220724093129469.png" alt="Hive Architecture" style="zoom:50%;"><ol><li><p><strong>用户接口：Client</strong></p><blockquote><p>CLI（command-line interface）  </p><p>JDBC&#x2F;ODBC(jdbc 访问 hive)  </p><p>WEBUI（浏览器访问 hive）  </p></blockquote></li><li><p><strong>元数据： Metastore</strong>  </p><blockquote><p><strong>元数据包括</strong> ：表名、表所属的数据库（默认是 default）、表的拥有者、列&#x2F;分区字段、<br>表的类型（是否是外部表）、表的数据所在目录等；  </p><p>默认存储在自带的 derby 数据库中，<strong>推荐使用 MySQL 存储 Metastore</strong>  </p></blockquote></li><li><p><strong>Hadoop</strong>  </p><blockquote><p>使用 HDFS 进行存储，使用 MapReduce 进行计算。  </p></blockquote></li><li><p><strong>驱动器： Driver</strong>  </p><blockquote><ol><li><strong>解析器（SQL Parser）</strong>：将 SQL 字符串转换成抽象语法树 AST，这一步一般都用第三方工具库完成，比如 antlr；对 AST 进行语法分析，比如表是否存在、字段是否存在、 SQL语义是否有误。 </li><li><strong>编译器（Physical Plan）</strong>：将 AST 编译生成逻辑执行计划。  </li><li><strong>优化器（Query Optimizer）：</strong>对逻辑执行计划进行优化。  </li><li><strong>执行器（Execution）</strong>：把逻辑执行计划转换成可以运行的物理计划。对于 Hive 来说， 就是 MR&#x2F;Spark。</li></ol></blockquote></li></ol><p><img src="/2022/07/17/Hive/image-20220724101514813.png" alt="Hive Working Mechanism"></p><p>Hive 通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的 Driver，结合元数据(MetaStore)，将这些指令翻译成 MapReduce，提交到 Hadoop 中执行，最后，将执行返回的结果输出到用户交互接口。  </p><h4 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h4><p>由于 Hive 是针对数据仓库应用设计的，而<strong>数据仓库的内容是读多写少的</strong>。 因此， <strong>Hive 中不建议对数据的改写，所有的数据都是在加载的时候确定好的</strong>。 而数据库中的数据通常是需要经常进行修改的，因此可以使用 INSERT INTO … VALUES 添加数据，使用 UPDATE … SET 修改数据。  </p><h4 id="执行延迟"><a href="#执行延迟" class="headerlink" title="执行延迟"></a>执行延迟</h4><ol><li>Hive 在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。 </li><li>另外一个导致 Hive 执行延迟高的因素是 MapReduce 框架。由于 MapReduce 本身具有较高的延迟，因此在利用 MapReduce 执行 Hive 查询时，也会有较高的延迟。</li></ol><h2 id="Hive-数据类型"><a href="#Hive-数据类型" class="headerlink" title="Hive 数据类型"></a>Hive 数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table><thead><tr><th>Hive 数据类型</th><th>Java 数据类型</th><th>长度</th><th>例子</th></tr></thead><tbody><tr><td>TINYINT</td><td>byte</td><td>1byte 有符号整数</td><td>20</td></tr><tr><td>SMALINT</td><td>short</td><td>2byte 有符号整数</td><td>20</td></tr><tr><td>INT</td><td>int</td><td>4byte 有符号整数</td><td>20</td></tr><tr><td>BIGINT</td><td>long</td><td>8byte 有符号整数</td><td>20</td></tr><tr><td>BOOLEAN</td><td>boolean</td><td>布尔类型， true 或者 false</td><td>TRUE FALSE</td></tr><tr><td>FLOAT</td><td>float</td><td>单精度浮点数</td><td>3.14159</td></tr><tr><td>DOUBLE</td><td>double</td><td>双精度浮点数</td><td>3.14159</td></tr><tr><td>STRING</td><td>string</td><td>字符系列。可以指定字 符集。可以使用单引号或者双 引号。</td><td>‘ now is the time ’ “for all good men”</td></tr><tr><td>TIMESTAMP</td><td></td><td>时间类型</td><td></td></tr><tr><td>BINARY</td><td></td><td>字节数</td><td></td></tr></tbody></table><p>对于 Hive 的 String 类型相当于数据库的 varchar 类型，该类型是一个可变的字符串，不过它不能声明其中最多能存储多少个字符，理论上它可以存储 2GB 的字符数。  </p><h3 id="集合数据类型"><a href="#集合数据类型" class="headerlink" title="集合数据类型"></a>集合数据类型</h3><table><thead><tr><th>数据类型</th><th>描述</th><th>语法示例</th></tr></thead><tbody><tr><td>STRUCT</td><td>和 c 语言中的 struct 类似，都可以通过“点”符号访 问元素内容。例如，如果某个列的数据类型是 STRUCT{first STRING, last STRING},那么<strong>第 1 个元素可以通过字段.first 来引用</strong>。</td><td>struct() 例 如 struct&lt;street:string, city:string&gt;</td></tr><tr><td>MAP</td><td>MAP 是一组键-值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是 MAP，其中键 -&gt;值对是’ first’ -&gt;’ John’和’ last’ -&gt;’ Doe’，那么可以通过字段名[‘last’ ]获取最后一个元素</td><td>map() 例如 map&lt;string, int&gt;</td></tr><tr><td>ARRAY</td><td>数组是一组具有相同类型和名称的变量的集合。这些 变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘John’ , ‘Doe’ ]，那么第 2 个 元素可以通过数组名[1]进行引用。</td><td>Array() 例如 array<string></string></td></tr></tbody></table><p>Hive 有三种复杂数据类型 ARRAY、 MAP 和 STRUCT。 ARRAY 和 MAP 与 Java 中的 Array 和 Map 类似，而 STRUCT 与 C 语言中的 Struct 类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套。  </p><p><strong>案例实操</strong>  </p><ol><li><p>假设某表有如下一行， 我们用 JSON 格式来表示其数据结构。在 Hive 下访问的格<br>式为  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;songsong&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;friends&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;bingbing&quot;</span> <span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;lili&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">,</span> <span class="hljs-comment">//列表 Array,</span><br>    <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//键值 Map,</span><br>        <span class="hljs-attr">&quot;xiao song&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span> <span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;xiaoxiao song&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">19</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//结构 Struct,</span><br>        <span class="hljs-attr">&quot;street&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hui long guan&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;beijing&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>基于上述数据结构， 我们在 Hive 里创建对应的表， 并导入数据。  </p><p>创建本地测试文件 test.txt  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">songsong</span>,bingbing_lili,xiao song:<span class="hljs-number">18</span>_xiaoxiao song:<span class="hljs-number">19</span>,hui long<br><span class="hljs-attribute">guan_beijing</span><br><span class="hljs-attribute">yangyang</span>,caicai_susu,xiao yang:<span class="hljs-number">18</span>_xiaoxiao yang:<span class="hljs-number">19</span>,chao yang_beijing<br></code></pre></td></tr></table></figure><p>注意： MAP， STRUCT 和 ARRAY 里的<strong>元素间关系都可以用同一个字符表示</strong>， <strong>这里用“_”</strong>。  </p></li><li><p>Hive 上创建测试表 test  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test(<br>name string,<br>friends <span class="hljs-keyword">array</span><span class="hljs-operator">&lt;</span>string<span class="hljs-operator">&gt;</span>,<br>children map<span class="hljs-operator">&lt;</span>string, <span class="hljs-type">int</span><span class="hljs-operator">&gt;</span>,<br>address struct<span class="hljs-operator">&lt;</span>street:string, city:string<span class="hljs-operator">&gt;</span><br>)<br><span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;,&#x27;</span><br>collection items terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;_&#x27;</span><br>map keys terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;:&#x27;</span><br>lines terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\n&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>字段解释：  </p><p>row format delimited fields terminated by ‘,’ – 列分隔符  </p><p>collection items terminated by ‘_’ –MAP STRUCT 和 ARRAY 的分隔符(数据分割符号)  </p><p>map keys terminated by ‘:’– MAP 中的 key 与 value 的分隔符</p><p>lines terminated by ‘\n’;– 行分隔符</p></blockquote></li><li><p>导入文本数据到测试表</p><blockquote><p>load data local inpath ‘&#x2F;opt&#x2F;module&#x2F;hive&#x2F;datas&#x2F;test.txt’ into table test;  </p></blockquote></li><li><p>访问三种集合列里的数据，以下分别是 ARRAY， MAP， STRUCT 的访问方式  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">select</span> friends[<span class="hljs-number">1</span>],children[<span class="hljs-string">&#x27;xiao song&#x27;</span>],address.city <span class="hljs-keyword">from</span> test<br><span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=&quot;songsong&quot;;<br>OK<br>_c0 _c1 city<br>lili <span class="hljs-number">18</span> beijing<br><span class="hljs-type">Time</span> taken: <span class="hljs-number">0.076</span> seconds, Fetched: <span class="hljs-number">1</span> <span class="hljs-keyword">row</span>(s)<br></code></pre></td></tr></table></figure></li></ol><h3 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h3><ol><li><p>隐式类型转换规则如下:</p><blockquote><ol><li>任何整数类型都可以隐式地转换为一个范围更广的类型，如 TINYINT 可以转换成 INT， INT 可以转换成 BIGINT。  </li><li>所有整数类型、 FLOAT 和 <strong>STRING 类型</strong>都可以隐式地转换成 DOUBLE。  </li><li>TINYINT、 SMALLINT、 INT 都可以转换为 FLOAT。  </li><li>BOOLEAN 类型不可以转换为任何其它的类型。</li></ol></blockquote></li><li><p>可以使用 <strong>CAST</strong> 操作<strong>显示</strong>进行<strong>数据类型转换</strong>  </p><blockquote><p>例如 CAST(‘1’ AS INT)将把字符串’1’ 转换成整数 1；如果强制类型转换失败，如执行 CAST(‘X’ AS INT)，表达式返回空值 NULL。</p></blockquote></li></ol><h2 id="DDL-数据定义"><a href="#DDL-数据定义" class="headerlink" title="DDL 数据定义"></a>DDL 数据定义</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] database_name<br>[COMMENT database_comment]<br>[LOCATION hdfs_path]<br>[<span class="hljs-keyword">WITH</span> DBPROPERTIES (property_name<span class="hljs-operator">=</span>property_value, ...)];<br></code></pre></td></tr></table></figure><ol><li><p>创建一个数据库，数据库在 HDFS 上的默认存储路径是&#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;*.db。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> db_hive;<br></code></pre></td></tr></table></figure></li><li><p>避免要创建的数据库已经存在错误，增加 if not exists 判断。（标准写法）  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> db_hive;<br>FAILED: Execution Error, <span class="hljs-keyword">return</span> code <span class="hljs-number">1</span> <span class="hljs-keyword">from</span><br>org.apache.hadoop.hive.ql.exec.DDLTask. <span class="hljs-keyword">Database</span> db_hive already <span class="hljs-keyword">exists</span><br>hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> db_hive;<br></code></pre></td></tr></table></figure></li><li><p>创建一个数据库，指定数据库在 HDFS 上存放的位置  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> db_hive2 <span class="hljs-keyword">location</span> <span class="hljs-string">&#x27;/db_hive2.db&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h3><p><strong>显示数据库</strong>  </p><ol><li><p>显示数据库  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hive&gt; show databases<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>过滤显示查询的数据库  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> databases <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;db_hive*&#x27;</span>;<br>OK<br>db_hive<br>db_hive_1<br></code></pre></td></tr></table></figure></li></ol><p><strong>查看数据库详情</strong>  </p><ol><li><p>显示数据库信息  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">hive&gt; desc database db_hive;<br>OK<br>db_hive hdfs:<span class="hljs-regexp">//</span>hadoop102:<span class="hljs-number">9820</span><span class="hljs-regexp">/user/</span>hive<span class="hljs-regexp">/warehouse/</span>db_hive.db<br>albertUSER<br></code></pre></td></tr></table></figure></li><li><p>显示数据库详细信息， extended  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">hive&gt; desc database extended db_hive;<br>OK<br>db_hive hdfs:<span class="hljs-regexp">//</span>hadoop102:<span class="hljs-number">9820</span><span class="hljs-regexp">/user/</span>hive<span class="hljs-regexp">/warehouse/</span>db_hive.db<br>albertUSER<br></code></pre></td></tr></table></figure></li></ol><p><strong>切换当前数据库</strong>  </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">use</span> db_hive;<br></code></pre></td></tr></table></figure><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><p>用户可以使用 ALTER DATABASE 命令为某个数据库的 DBPROPERTIES 设置键-值对属性值，来描述这个数据库的属性信息。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> db_hive<br><span class="hljs-keyword">set</span> dbproperties(<span class="hljs-string">&#x27;createtime&#x27;</span>=<span class="hljs-string">&#x27;20170830&#x27;</span>);<br></code></pre></td></tr></table></figure><p>在 hive 中查看修改结果  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">hive&gt; desc database extended db_hive;<br>db_name comment location owner_name owner_type parameters<br>db_hive hdfs:<span class="hljs-regexp">//</span>hadoop102:<span class="hljs-number">9820</span><span class="hljs-regexp">/user/</span>hive<span class="hljs-regexp">/warehouse/</span>db_hive.db<br>albert USER &#123;createtime=<span class="hljs-number">20170830</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ol><li><p>删除空数据库  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">hive&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> db_hive2;<br></code></pre></td></tr></table></figure></li><li><p>如果删除的数据库不存在， 最好采用 if exists 判断数据库是否存在  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> db_hive;<br>FAILED: SemanticException [Error <span class="hljs-number">10072</span>]: <span class="hljs-keyword">Database</span> does <span class="hljs-keyword">not</span> exist: db_hive<br>hive&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> db_hive;<br></code></pre></td></tr></table></figure></li><li><p>如果数据库不为空，可以采用 cascade 命令，强制删除  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> db_hive;<br>FAILED: Execution Error, <span class="hljs-keyword">return</span> code <span class="hljs-number">1</span> <span class="hljs-keyword">from</span><br>org.apache.hadoop.hive.ql.exec.DDLTask.<br>InvalidOperationException(message:<span class="hljs-keyword">Database</span> db_hive <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> empty. One <span class="hljs-keyword">or</span><br>more <span class="hljs-keyword">tables</span> exist.)<br>hive&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> db_hive <span class="hljs-keyword">cascade</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><ol><li><p>建表语法</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs inform7">CREATE <span class="hljs-comment">[EXTERNAL]</span> TABLE <span class="hljs-comment">[IF NOT EXISTS]</span> table_name<br><span class="hljs-comment">[(col_name data_type <span class="hljs-comment">[COMMENT col_comment]</span>, ...)]</span><br><span class="hljs-comment">[COMMENT table_comment]</span><br><span class="hljs-comment">[PARTITIONED BY (col_name data_type <span class="hljs-comment">[COMMENT col_comment]</span>, ...)]</span><br><span class="hljs-comment">[CLUSTERED BY (col_name, col_name, ...)</span><br><span class="hljs-comment"><span class="hljs-comment">[SORTED BY (col_name <span class="hljs-comment">[ASC|DESC]</span>, ...)]</span> INTO num_buckets BUCKETS]</span><br><span class="hljs-comment">[ROW FORMAT row_format]</span><br><span class="hljs-comment">[STORED AS file_format]</span><br><span class="hljs-comment">[LOCATION hdfs_path]</span><br><span class="hljs-comment">[TBLPROPERTIES (property_name=property_value, ...)]</span><br><span class="hljs-comment">[AS select_statement]</span><br></code></pre></td></tr></table></figure></li><li><p>字段解释说明  </p><blockquote><ol><li><p>CREATE TABLE 创建一个指定名字的表。如果相同名字的表已经存在， 则抛出异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。  </p></li><li><p><strong>EXTERNAL 关键字</strong>可以让用户创建一个<strong>外部表</strong>，在建表的同时可以指定一个指向实际数据的路径（LOCATION） ， 在<strong>删除表的时候</strong>，<strong>内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。</strong>  </p></li><li><p>COMMENT：为表和列添加注释。  </p></li><li><p>PARTITIONED BY 创建分区表  </p></li><li><p>CLUSTERED BY 创建分桶表  </p></li><li><p>SORTED BY 不常用， 对桶中的一个或多个列另外排序  </p></li><li><p>ROW FORMAT  </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">DELIMITED [FIELDS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-type">char</span>] [COLLECTION ITEMS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-type">char</span>]<br>[MAP KEYS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-type">char</span>] [LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-type">char</span>]<br>| SERDE serde_name [<span class="hljs-keyword">WITH</span> SERDEPROPERTIES (property_name=property_value,<br>property_name=property_value, ...)]<br></code></pre></td></tr></table></figure><p>用户在建表的时候可以自定义 SerDe 或者使用自带的 SerDe。如果没有指定 ROW FORMAT 或者 ROW FORMAT DELIMITED，将会使用自带的 SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的 SerDe， <strong>Hive 通过 SerDe 确定表的具体的列的数据</strong>。  </p><p>SerDe 是 Serialize&#x2F;Deserilize 的简称， hive 使用 Serde 进行行对象的序列与反序列化。  </p></li><li><p>STORED AS 指定存储文件类型  </p><p>常用的存储文件类型： SEQUENCEFILE（二进制序列文件）、 TEXTFILE（文本）、 RCFILE（列式存储格式文件）<br>如果文件数据是纯文本，可以使用STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE。  </p></li><li><p>LOCATION ：指定表在 HDFS 上的存储位置。  </p></li><li><p>AS：后跟查询语句， 根据查询结果创建表。  </p></li><li><p>LIKE 允许用户复制现有的表结构，但是不复制数据。</p></li></ol></blockquote></li></ol><h3 id="管理表-内部表"><a href="#管理表-内部表" class="headerlink" title="管理表 ( 内部表 )"></a>管理表 ( 内部表 )</h3><ol><li><p>理论</p><blockquote><p>默认创建的表都是所谓的管理表，有时也被称为内部表。因为这种表， Hive 会（或多或少地）控制着数据的生命周期。 Hive 默认情况下会将这些表的数据存储在由配置项 hive.metastore.warehouse.dir(例如， &#x2F;user&#x2F;hive&#x2F;warehouse)所定义的目录的子目录下。    </p><p>当我们删除一个管理表时， Hive 也会删除这个表中数据。 管理表不适合和其他工具共享<br>数据。  </p></blockquote></li><li><p>案例实操  </p><ol><li><p>原始数据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1001</span><span class="hljs-string">ss1</span><br><span class="hljs-number">1002</span><span class="hljs-string">ss2</span><br><span class="hljs-number">1003</span><span class="hljs-string">ss3</span><br><span class="hljs-number">1004</span><span class="hljs-string">ss4</span><br><span class="hljs-number">1005</span><span class="hljs-string">ss5</span><br><span class="hljs-number">1006</span><span class="hljs-string">ss6</span><br><span class="hljs-number">1007</span><span class="hljs-string">ss7</span><br><span class="hljs-number">1008</span><span class="hljs-string">ss8</span><br><span class="hljs-number">1009</span><span class="hljs-string">ss9</span><br><span class="hljs-number">1010</span><span class="hljs-string">ss10</span><br><span class="hljs-number">1011</span><span class="hljs-string">ss11</span><br><span class="hljs-number">1012</span><span class="hljs-string">ss12</span><br><span class="hljs-number">1013</span><span class="hljs-string">ss13</span><br><span class="hljs-number">1014</span><span class="hljs-string">ss14</span><br><span class="hljs-number">1015</span><span class="hljs-string">ss15</span><br><span class="hljs-number">1016</span><span class="hljs-string">ss16</span><br></code></pre></td></tr></table></figure></li><li><p>普通创建表  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> student(<br>id <span class="hljs-type">int</span>, name string<br>)<br><span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span><br>stored <span class="hljs-keyword">as</span> textfile<br>location <span class="hljs-string">&#x27;/user/hive/warehouse/student&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>根据查询结果创建表（查询的结果会添加到新创建的表中）  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> student2 <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> id, name <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure></li><li><p>根据已经存在的表结构创建表  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> student3 <span class="hljs-keyword">like</span> student;<br></code></pre></td></tr></table></figure></li><li><p>查询类型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">desc</span> formatted student2;<br><span class="hljs-keyword">Table</span> <span class="hljs-keyword">Type</span>: MANAGED_TABLE<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h3><ol><li><p>理论</p><blockquote><p>因为表是外部表， 所以 Hive 并非认为其完全拥有这份数据。删除该表并不会删除掉这份数据，不过描述表的元数据信息会被删除掉。  </p></blockquote></li><li><p>管理表和外部表的使用场景  </p><blockquote><p>每天将收集到的网站日志定期流入 HDFS 文本文件。在外部表（原始日志表）的基础上做大量的统计分析，用到的中间表、结果表使用内部表存储，数据通过 SELECT+INSERT 进入内部表。</p></blockquote></li></ol><p><strong>案例实操</strong>  </p><p>分别创建部门和员工外部表，并向表中导入数据。  </p><ol start="0"><li><p>原始数据  </p><p>dept：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">10</span>ACCOUNTING<span class="hljs-number">1700</span><br><span class="hljs-attribute">20</span>RESEARCH<span class="hljs-number">1800</span><br><span class="hljs-attribute">30</span>SALES<span class="hljs-number">1900</span><br><span class="hljs-attribute">40</span>OPERATIONS<span class="hljs-number">1700</span><br></code></pre></td></tr></table></figure><p>emp:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">7369</span>SMITHCLERK<span class="hljs-number">7902</span><span class="hljs-number">1980</span>-<span class="hljs-number">12</span>-<span class="hljs-number">17</span><span class="hljs-number">800</span>.<span class="hljs-number">00</span><span class="hljs-number">20</span><br><span class="hljs-attribute">7499</span>ALLENSALESMAN<span class="hljs-number">7698</span><span class="hljs-number">1981</span>-<span class="hljs-number">2</span>-<span class="hljs-number">20</span><span class="hljs-number">1600</span>.<span class="hljs-number">00</span><span class="hljs-number">300</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7521</span>WARDSALESMAN<span class="hljs-number">7698</span><span class="hljs-number">1981</span>-<span class="hljs-number">2</span>-<span class="hljs-number">22</span><span class="hljs-number">1250</span>.<span class="hljs-number">00</span><span class="hljs-number">500</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7566</span>JONESMANAGER<span class="hljs-number">7839</span><span class="hljs-number">1981</span>-<span class="hljs-number">4</span>-<span class="hljs-number">2</span><span class="hljs-number">2975</span>.<span class="hljs-number">00</span><span class="hljs-number">20</span><br><span class="hljs-attribute">7654</span>MARTINSALESMAN<span class="hljs-number">7698</span><span class="hljs-number">1981</span>-<span class="hljs-number">9</span>-<span class="hljs-number">28</span><span class="hljs-number">1250</span>.<span class="hljs-number">00</span><span class="hljs-number">1400</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7698</span>BLAKEMANAGER<span class="hljs-number">7839</span><span class="hljs-number">1981</span>-<span class="hljs-number">5</span>-<span class="hljs-number">1</span><span class="hljs-number">2850</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7782</span>CLARKMANAGER<span class="hljs-number">7839</span><span class="hljs-number">1981</span>-<span class="hljs-number">6</span>-<span class="hljs-number">9</span><span class="hljs-number">2450</span>.<span class="hljs-number">00</span><span class="hljs-number">10</span><br><span class="hljs-attribute">7788</span>SCOTTANALYST<span class="hljs-number">7566</span><span class="hljs-number">1987</span>-<span class="hljs-number">4</span>-<span class="hljs-number">19</span><span class="hljs-number">3000</span>.<span class="hljs-number">00</span><span class="hljs-number">20</span><br><span class="hljs-attribute">7839</span>KINGPRESIDENT<span class="hljs-number">1981</span>-<span class="hljs-number">11</span>-<span class="hljs-number">17</span><span class="hljs-number">5000</span>.<span class="hljs-number">00</span><span class="hljs-number">10</span><br><span class="hljs-attribute">7844</span>TURNERSALESMAN<span class="hljs-number">7698</span><span class="hljs-number">1981</span>-<span class="hljs-number">9</span>-<span class="hljs-number">8</span><span class="hljs-number">1500</span>.<span class="hljs-number">00</span><span class="hljs-number">0</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7876</span>ADAMSCLERK<span class="hljs-number">7788</span><span class="hljs-number">1987</span>-<span class="hljs-number">5</span>-<span class="hljs-number">23</span><span class="hljs-number">1100</span>.<span class="hljs-number">00</span><span class="hljs-number">20</span><br><span class="hljs-attribute">7900</span>JAMESCLERK<span class="hljs-number">7698</span><span class="hljs-number">1981</span>-<span class="hljs-number">12</span>-<span class="hljs-number">3</span><span class="hljs-number">950</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7902</span>FORDANALYST<span class="hljs-number">7566</span><span class="hljs-number">1981</span>-<span class="hljs-number">12</span>-<span class="hljs-number">3</span><span class="hljs-number">3000</span>.<span class="hljs-number">00</span><span class="hljs-number">20</span><br><span class="hljs-attribute">7934</span>MILLERCLERK<span class="hljs-number">7782</span><span class="hljs-number">1982</span>-<span class="hljs-number">1</span>-<span class="hljs-number">23</span><span class="hljs-number">1300</span>.<span class="hljs-number">00</span><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li><li><p>上传数据到 HDFS  </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">hive (<span class="hljs-keyword">default</span>)&gt; dfs -mkdir /department<br>hive (<span class="hljs-keyword">default</span>)&gt; dfs -put <span class="hljs-regexp">/opt/m</span>odule<span class="hljs-regexp">/data/</span>dept.txt /department;<br>hive (<span class="hljs-keyword">default</span>)&gt; dfs -put <span class="hljs-regexp">/opt/m</span>odule<span class="hljs-regexp">/data/</span>emp.txt /department;<br></code></pre></td></tr></table></figure></li><li><p>建表语句， 创建外部表  </p><p>创建部门表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">external</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> dept(<br>deptno <span class="hljs-type">int</span>,<br>dname string,<br>loc <span class="hljs-type">int</span><br>)<br><span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span>;<br></code></pre></td></tr></table></figure><p>创建员工表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">external</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> emp(<br>empno <span class="hljs-type">int</span>,<br>ename string,<br>job string,<br>mgr string,<br>hiredate string,<br>sal <span class="hljs-type">double</span>,<br>comm <span class="hljs-type">double</span>,<br>deptno <span class="hljs-type">int</span><br>)<br><span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>查看创建的表  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt;<span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br></code></pre></td></tr></table></figure></li><li><p>查看表格式化数据  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">desc</span> formatted dept;<br><span class="hljs-keyword">Table</span> <span class="hljs-keyword">Type</span>: EXTERNAL_TABLE<br></code></pre></td></tr></table></figure></li><li><p>删除外部表  </p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">drop</span> <span class="hljs-built_in">table</span> dept;<br></code></pre></td></tr></table></figure><p>外部表删除后， hdfs 中的数据还在， 但是 metadata 中 dept 的元数据已被删除</p></li></ol><h4 id="管理表与外部表的互相转换"><a href="#管理表与外部表的互相转换" class="headerlink" title="管理表与外部表的互相转换"></a>管理表与外部表的互相转换</h4><ol><li><p>查询表的类型  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">desc</span> formatted student2;<br><span class="hljs-keyword">Table</span> <span class="hljs-keyword">Type</span>: MANAGED_TABLE<br></code></pre></td></tr></table></figure></li><li><p>修改内部表 student2 为外部表  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">alert table student2 <span class="hljs-keyword">set</span> <span class="hljs-title">tblproperties</span>(<span class="hljs-params"><span class="hljs-string">&#x27;EXTERNAL&#x27;</span>=<span class="hljs-string">&#x27;TRUE&#x27;</span></span>)</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询表的类型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">desc</span> formatted student2;<br><span class="hljs-keyword">Table</span> <span class="hljs-keyword">Type</span>: EXTERNAL_TABLE<br></code></pre></td></tr></table></figure></li><li><p>修改外部表 student2 为内部表  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student2 <span class="hljs-keyword">set</span> tblproperties(<span class="hljs-string">&#x27;EXTERNAL&#x27;</span>=<span class="hljs-string">&#x27;FALSE&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>查询表的类型  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">desc</span> formatted student2;<br><span class="hljs-keyword">Table</span> <span class="hljs-keyword">Type</span>: MANAGED_TABLE<br></code></pre></td></tr></table></figure><p><strong>注意</strong>： (‘EXTERNAL’&#x3D;’TRUE’)和(‘EXTERNAL’&#x3D;’FALSE’)为固定写法， 区分大小写！</p></li></ol><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><p><strong>重命名表</strong>  </p><ol><li><p>语法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TO</span> new_table_name<br></code></pre></td></tr></table></figure></li><li><p>实操</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt;  alert <span class="hljs-keyword">table</span> deppt_partition2 <span class="hljs-keyword">rename</span> <span class="hljs-keyword">to</span> dept_partition3;<br></code></pre></td></tr></table></figure></li></ol><p><strong>增加&#x2F;修改&#x2F;替换列信息</strong>  </p><ol><li><p>语法</p><ol><li><p>更新列</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> CHANGE [<span class="hljs-keyword">COLUMN</span>] col_old_name col_new_name<br>column_type [<span class="hljs-keyword">COMMENT</span> col_comment] [FIRST|<span class="hljs-keyword">AFTER</span> <span class="hljs-built_in">column_name</span>]<br></code></pre></td></tr></table></figure></li><li><p>增加和替换列  </p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span>|<span class="hljs-keyword">REPLACE</span> COLUMNS (col_name data_type [COMMENT<br>col_comment], ...)<br></code></pre></td></tr></table></figure><p><strong>注</strong>： ADD 是代表新增一字段， 字段位置在所有列后面(partition 列前)，<br>REPLACE 则是表示替换表中所有字段。</p></li></ol></li><li><p>实操</p><ol><li><p>查询表结构</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hive&gt; desc dept<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>添加列：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> dept <span class="hljs-keyword">add</span> <span class="hljs-keyword">columns</span>(deptdesc string);<br></code></pre></td></tr></table></figure></li><li><p>查询表结构</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hive&gt; desc dept<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>更新列  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> dept change <span class="hljs-keyword">column</span> deptdesc <span class="hljs-keyword">desc</span> string;<br></code></pre></td></tr></table></figure></li><li><p>查询表结构  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hive&gt; desc dept<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>替换列</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-function">alter tabel dept replace <span class="hljs-title">column</span>(<span class="hljs-params">deptno <span class="hljs-built_in">string</span>, dname <span class="hljs-built_in">string</span>, loc <span class="hljs-built_in">string</span></span>)</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询表结构 </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hive&gt; desc dept<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="DML-数据操作"><a href="#DML-数据操作" class="headerlink" title="DML 数据操作"></a>DML 数据操作</h2><h3 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h3><p><strong>向表中装载数据（Load）</strong>  </p><ol><li><p>语法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive&gt; <span class="hljs-keyword">load</span> data [<span class="hljs-keyword">local</span>] inpath <span class="hljs-string">&#x27;数据的 path&#x27;</span> [overwrite] <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span><br>student [<span class="hljs-keyword">partition</span> (partcol1=val1,…)];<br></code></pre></td></tr></table></figure><blockquote><p>load data:表示加载数据  </p><p>local:表示从本地加载数据到 hive 表； 否则从 HDFS 加载数据到 hive 表  </p><p>inpath:表示加载数据的路径  </p><p>overwrite:表示覆盖表中已有数据，<strong>否则表示追加</strong>  </p><p>into table:表示加载到哪张表  </p><p>student:表示具体的表  </p><p>partition:表示上传到指定分区  </p></blockquote></li><li><p>实操案例  </p><ol start="0"><li><p>创建一张表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(id string, <span class="hljs-type">name</span> string) <span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span><br>delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>加载本地文件到 hive  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/module/hive/datas/student.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> defalut.student<br></code></pre></td></tr></table></figure></li><li><p>加载 HDFS 文件到 hive 中  </p><p>上传文件到 HDFS  </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">hive (<span class="hljs-keyword">default</span>)&gt; dfs -put <span class="hljs-regexp">/opt/m</span>odule<span class="hljs-regexp">/hive/</span>data/student.txt<br><span class="hljs-regexp">/user/</span>albert/hive;<br></code></pre></td></tr></table></figure><p>加载 HDFS 上数据  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">load</span> data inpath <span class="hljs-string">&#x27;/user/albert/hive/student.txt&#x27;</span> <span class="hljs-keyword">into</span><br><span class="hljs-keyword">table</span> <span class="hljs-keyword">default</span>.student;<br></code></pre></td></tr></table></figure></li><li><p>加载数据覆盖表中已有的数据  </p><p>上传文件到 HDFS</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">hive (<span class="hljs-keyword">default</span>)&gt; dfs -put <span class="hljs-regexp">/opt/m</span>odule<span class="hljs-regexp">/data/</span>student.txt <span class="hljs-regexp">/user/</span>albert/hive;  <br></code></pre></td></tr></table></figure><p>加载数据覆盖表中已有的数据  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">load</span> data inpath <span class="hljs-string">&#x27;/user/albert/hive/student.txt&#x27;</span><br>overwrite <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">default</span>.student;<br></code></pre></td></tr></table></figure></li></ol></li></ol><p><strong>通过查询语句向表中插入数据（Insert）</strong>  </p><ol><li><p>创建一张表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student_par(id <span class="hljs-type">int</span>, <span class="hljs-type">name</span> string) <span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span><br>delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>基本插入数据  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> student_par <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;wangwu&#x27;</span>),(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>基本模式插入（根据单张表查询结果）  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> student_par <span class="hljs-keyword">select</span> id, name, <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">month</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;201709&#x27;</span>;<br></code></pre></td></tr></table></figure><p>insert into： 以追加数据的方式插入到表或分区， 原有数据不会删除  </p><p>insert overwrite： 会覆盖表中已存在的数据  </p><p><strong>注意</strong>： insert 不支持插入部分字段  </p></li><li><p>多表（多分区） 插入模式（根据多张表查询结果）  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> student <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;201707&#x27;</span>)<br><span class="hljs-keyword">select</span> id, name <span class="hljs-keyword">where</span> <span class="hljs-keyword">month</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;201709&#x27;</span><br><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> student <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-number">201706</span>)<br><span class="hljs-keyword">select</span> id, name <span class="hljs-keyword">where</span> <span class="hljs-keyword">month</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;201709&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ol><p><strong>查询语句中创建表并加载数据（As Select）</strong>  </p><p>根据查询结果创建表（查询的结果会添加到新创建的表中）  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> student3 <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> id, <span class="hljs-type">name</span> <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p><strong>创建表时通过 Location 指定加载数据路径</strong>  </p><ol><li><p>上传数据到 hdfs 上</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">hive (<span class="hljs-keyword">default</span>)&gt; dfs -mkdir /student;<br>hive (<span class="hljs-keyword">default</span>)&gt; dfs -put <span class="hljs-regexp">/opt/m</span>odule<span class="hljs-regexp">/datas/</span>student.txt /student;<br></code></pre></td></tr></table></figure></li><li><p>创建表，并指定在 hdfs 上的位置  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">external</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> student5(<br>id <span class="hljs-type">int</span>, name string)<br><span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span><br>location <span class="hljs-string">&#x27;/student&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询数据</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student5;<br></code></pre></td></tr></table></figure></li></ol><p><strong>Import 数据到指定 Hive 表中</strong>  </p><p><strong>注意</strong>： 先用 export 导出后， 再将数据导入。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">import</span> <span class="hljs-keyword">table</span> student2 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;/user/hive/warehouse/export/student&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h3><p><strong>Insert 导出</strong>  </p><ol><li><p>将查询的结果导出到本地  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">local</span> directory <span class="hljs-string">&#x27;/opt/module/hive/data/export/student&#x27;</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure></li><li><p>将查询的结果格式化导出本地</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">local</span> directory <span class="hljs-string">&#x27;/opt/module/hive/data/export/student1&#x27;</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure></li><li><p>将查询的结果导出到 HDFS 上(没有 local)  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">insert</span> overwrite directory <span class="hljs-string">&#x27;/user/albert/student2&#x27;</span><br><span class="hljs-keyword">ROW</span> <span class="hljs-keyword">FORMAT</span> DELIMITED FIELDS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\t&#x27;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure></li></ol><p><strong>Hadoop 命令导出到本地</strong>  </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">hive (<span class="hljs-keyword">default</span>)&gt; dfs -get <span class="hljs-regexp">/user/</span>hive<span class="hljs-regexp">/warehouse/</span>student/student.txt<br><span class="hljs-regexp">/opt/m</span>odule<span class="hljs-regexp">/data/</span>export/student3.txt;<br></code></pre></td></tr></table></figure><p><strong>Hive Shell 命令导出</strong>  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[test@hadoop102 hive]$ bin/hive -e <span class="hljs-string">&#x27;select * from default.student;&#x27;</span> &gt;<br><span class="hljs-regexp">/opt/m</span>odule<span class="hljs-regexp">/hive/</span>data<span class="hljs-regexp">/export/</span>student4.txt;<br></code></pre></td></tr></table></figure><p>Export 导出到 HDFS 上  </p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">(defahiveult)&gt; <span class="hljs-keyword">export</span> table <span class="hljs-keyword">default</span>.student <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;/user/hive/warehouse/export/student&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>export 和 import 主要用于两个 Hadoop 平台集群之间 Hive 表迁移。</strong>  </p><p>其他大数据组件 sqoop datax 等</p><p><strong>清除表中数据（Truncate）</strong>  </p><p><strong>注意</strong>： Truncate 只能删除管理表， 不能删除外部表中数据  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> student;<br></code></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询语句语法：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">ALL</span> | <span class="hljs-keyword">DISTINCT</span>] select_expr, select_expr, ...<br>    <span class="hljs-keyword">FROM</span> table_reference<br>    [<span class="hljs-keyword">WHERE</span> where_condition]<br>    [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> col_list]<br>    [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> col_list]<br>    [<span class="hljs-keyword">CLUSTER</span> <span class="hljs-keyword">BY</span> col_list<br>    | [DISTRIBUTE <span class="hljs-keyword">BY</span> col_list] [SORT <span class="hljs-keyword">BY</span> col_list]<br>    ]<br>[<span class="hljs-keyword">LIMIT</span> <span class="hljs-keyword">number</span>]<br></code></pre></td></tr></table></figure><h4 id="基本查询（Select…From）"><a href="#基本查询（Select…From）" class="headerlink" title="基本查询（Select…From）"></a>基本查询（Select…From）</h4><p><strong>全表和特定列查询</strong> </p><p>数据准备： </p><ol start="0"><li><p>原始数据：</p><p>dept:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">10</span>ACCOUNTING<span class="hljs-number">1700</span><br><span class="hljs-attribute">20</span>RESEARCH<span class="hljs-number">1800</span><br><span class="hljs-attribute">30</span>SALES<span class="hljs-number">1900</span><br><span class="hljs-attribute">40</span>OPERATIONS<span class="hljs-number">1700</span><br></code></pre></td></tr></table></figure><p>emp:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">7369</span>SMITHCLERK<span class="hljs-number">7902</span><span class="hljs-number">1980</span>-<span class="hljs-number">12</span>-<span class="hljs-number">17</span><span class="hljs-number">800</span>.<span class="hljs-number">00</span><span class="hljs-number">20</span><br><span class="hljs-attribute">7499</span>ALLENSALESMAN<span class="hljs-number">7698</span><span class="hljs-number">1981</span>-<span class="hljs-number">2</span>-<span class="hljs-number">20</span><span class="hljs-number">1600</span>.<span class="hljs-number">00</span><span class="hljs-number">300</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7521</span>WARDSALESMAN<span class="hljs-number">7698</span><span class="hljs-number">1981</span>-<span class="hljs-number">2</span>-<span class="hljs-number">22</span><span class="hljs-number">1250</span>.<span class="hljs-number">00</span><span class="hljs-number">500</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7566</span>JONESMANAGER<span class="hljs-number">7839</span><span class="hljs-number">1981</span>-<span class="hljs-number">4</span>-<span class="hljs-number">2</span><span class="hljs-number">2975</span>.<span class="hljs-number">00</span><span class="hljs-number">20</span><br><span class="hljs-attribute">7654</span>MARTINSALESMAN<span class="hljs-number">7698</span><span class="hljs-number">1981</span>-<span class="hljs-number">9</span>-<span class="hljs-number">28</span><span class="hljs-number">1250</span>.<span class="hljs-number">00</span><span class="hljs-number">1400</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7698</span>BLAKEMANAGER<span class="hljs-number">7839</span><span class="hljs-number">1981</span>-<span class="hljs-number">5</span>-<span class="hljs-number">1</span><span class="hljs-number">2850</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7782</span>CLARKMANAGER<span class="hljs-number">7839</span><span class="hljs-number">1981</span>-<span class="hljs-number">6</span>-<span class="hljs-number">9</span><span class="hljs-number">2450</span>.<span class="hljs-number">00</span><span class="hljs-number">10</span><br><span class="hljs-attribute">7788</span>SCOTTANALYST<span class="hljs-number">7566</span><span class="hljs-number">1987</span>-<span class="hljs-number">4</span>-<span class="hljs-number">19</span><span class="hljs-number">3000</span>.<span class="hljs-number">00</span><span class="hljs-number">20</span><br><span class="hljs-attribute">7839</span>KINGPRESIDENT<span class="hljs-number">1981</span>-<span class="hljs-number">11</span>-<span class="hljs-number">17</span><span class="hljs-number">5000</span>.<span class="hljs-number">00</span><span class="hljs-number">10</span><br><span class="hljs-attribute">7844</span>TURNERSALESMAN<span class="hljs-number">7698</span><span class="hljs-number">1981</span>-<span class="hljs-number">9</span>-<span class="hljs-number">8</span><span class="hljs-number">1500</span>.<span class="hljs-number">00</span><span class="hljs-number">0</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7876</span>ADAMSCLERK<span class="hljs-number">7788</span><span class="hljs-number">1987</span>-<span class="hljs-number">5</span>-<span class="hljs-number">23</span><span class="hljs-number">1100</span>.<span class="hljs-number">00</span><span class="hljs-number">20</span><br><span class="hljs-attribute">7900</span>JAMESCLERK<span class="hljs-number">7698</span><span class="hljs-number">1981</span>-<span class="hljs-number">12</span>-<span class="hljs-number">3</span><span class="hljs-number">950</span>.<span class="hljs-number">00</span><span class="hljs-number">30</span><br><span class="hljs-attribute">7902</span>FORDANALYST<span class="hljs-number">7566</span><span class="hljs-number">1981</span>-<span class="hljs-number">12</span>-<span class="hljs-number">3</span><span class="hljs-number">3000</span>.<span class="hljs-number">00</span><span class="hljs-number">20</span><br><span class="hljs-attribute">7934</span>MILLERCLERK<span class="hljs-number">7782</span><span class="hljs-number">1982</span>-<span class="hljs-number">1</span>-<span class="hljs-number">23</span><span class="hljs-number">1300</span>.<span class="hljs-number">00</span><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li><li><p>创建部门表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> dept(<br>deptno <span class="hljs-type">int</span>,<br>dname string,<br>loc <span class="hljs-type">int</span><br>)<br><span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>创建员工表  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> emp(<br>empno <span class="hljs-type">int</span>,<br>ename string,<br>job string,<br>mgr <span class="hljs-type">int</span>,<br>hiredate string,<br>sal <span class="hljs-type">double</span>,<br>comm <span class="hljs-type">double</span>,<br>deptno <span class="hljs-type">int</span>)<br><span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>导入数据  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/module/datas/dept.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> dept;<br><span class="hljs-keyword">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/module/datas/emp.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> emp;<br></code></pre></td></tr></table></figure></li></ol><p><strong>全表查询</strong>  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp;<br>hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> empno,ename,job,mgr,hiredate,sal,comm,deptno <span class="hljs-keyword">from</span> emp ;<br></code></pre></td></tr></table></figure><p><strong>选择特定列查询</strong>  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> empno, ename <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><blockquote><ol><li>SQL 语言大小写不敏感。  </li><li>SQL 可以写在一行或者多行  </li><li>关键字不能被缩写也不能分行  </li><li>各子句一般要分行写。  </li><li>使用缩进提高语句的可读性。</li></ol></blockquote><hr><p><strong>列别名</strong>  </p><ol><li><p>重命名一个列  </p></li><li><p>便于计算  </p></li><li><p>紧跟列名，也可以在列名和别名之间加入关键字‘AS’  </p></li><li><p>案例实操  </p><p>查询名称和部门  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">select</span> ename <span class="hljs-keyword">AS</span> <span class="hljs-type">name</span>, deptno dn <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure></li></ol><hr><p><strong>算术运算符</strong>  </p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>A+B</td><td>A 和 B 相加</td></tr><tr><td>A-B</td><td>A 减去 B</td></tr><tr><td>A*B</td><td>A 和 B 相乘</td></tr><tr><td>A&#x2F;B</td><td>A 除以 B</td></tr><tr><td>A%B</td><td>A 对 B 取余</td></tr><tr><td>A&amp;B</td><td>A 和 B 按位取与</td></tr><tr><td>A|B</td><td>A 和 B 按位取或</td></tr><tr><td>A^B</td><td>A 和 B 按位取异或</td></tr><tr><td>~A</td><td>A 按位取反</td></tr></tbody></table><p>案例实操： 查询出所有员工的薪水后加 1 显示。  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> sal +<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><hr><p><strong>常用函数</strong>  </p><ol><li><p>求总行数（count）  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*) cnt <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure></li><li><p>求工资的最大值（max）  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">max</span>(<span class="hljs-params">sal</span>) max_sal <span class="hljs-keyword">from</span> emp</span>;<br></code></pre></td></tr></table></figure></li><li><p>求工资的最小值（min）  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">min</span>(<span class="hljs-params">sal</span>) min_sal <span class="hljs-keyword">from</span> emp</span>;<br></code></pre></td></tr></table></figure></li><li><p>求工资的总和（sum）  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> <span class="hljs-keyword">sum</span>(sal) sum_sal <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure></li><li><p>求工资的平均值（avg）  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) avg_sal <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure></li></ol><hr><p><strong>Limit 语句</strong>  </p><p>典型的查询会返回多行数据。 LIMIT 子句用于限制返回的行数。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;<br>hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><hr><h5 id="Where-语句"><a href="#Where-语句" class="headerlink" title="Where 语句"></a>Where 语句</h5><ol><li><p>使用 WHERE 子句，将不满足条件的行过滤掉  </p></li><li><p>WHERE 子句紧随 FROM 子句  </p></li><li><p>案例实操  </p><p>查询出薪水大于 1000 的所有员工  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal &gt;<span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>： where 子句中不能使用字段别名。</p></li></ol><hr><p><strong>比较运算符（Between&#x2F;In&#x2F; Is Null）</strong>  </p><ol><li><p>下面表中描述了谓词操作符， 这些操作符同样可以用于 JOIN…ON 和 HAVING 语句中。  </p><table><thead><tr><th>操作符</th><th>支持的数据类型</th><th>描述</th></tr></thead><tbody><tr><td>A&#x3D;B</td><td>基本数据类型</td><td>如果 A 等于 B 则返回 TRUE，反之返回 FALSE</td></tr><tr><td>A&lt;&#x3D;&gt;B</td><td>基本数据类型</td><td>如果 A 和 B 都为 NULL，则返回 TRUE， 如果一边为 NULL， 返回 False</td></tr><tr><td>A&lt;&gt;B, A!&#x3D;B</td><td>基本数据类型</td><td>A 或者 B 为 NULL 则返回 NULL；如果 A 不等于 B，则返回 TRUE，反之返回 FALSE</td></tr><tr><td>A&lt;B</td><td>基本数据类型</td><td>A 或者 B 为 NULL，则返回 NULL；如果 A 小于 B，则返回 TRUE，反之返回 FALSE</td></tr><tr><td>A&lt;&#x3D;B</td><td>基本数据类型</td><td>A 或者 B 为 NULL，则返回 NULL；如果 A 小于等于 B，则返 回 TRUE，反之返回 FALSE</td></tr><tr><td>A&gt;B</td><td>基本数据类型</td><td>A 或者 B 为 NULL，则返回 NULL；如果 A 大于 B，则返回 TRUE，反之返回 FALSE</td></tr><tr><td>A&gt;&#x3D;B</td><td>基本数据类型</td><td>A 或者 B 为 NULL，则返回 NULL；如果 A 大于等于 B，则返 回 TRUE，反之返回 FALSE</td></tr><tr><td>A [NOT] BETWEEN B AND C</td><td>基本数据类型</td><td>如果 A， B 或者 C 任一为 NULL，则结果为 NULL。如果 A 的 值大于等于 B 而且小于或等于 C，则结果为 TRUE，反之为 FALSE。 如果使用 NOT 关键字则可达到相反的效果。</td></tr><tr><td>A IS NULL</td><td>所有数据类型</td><td>如果 A 等于 NULL，则返回 TRUE，反之返回 FALSE</td></tr><tr><td>A IS NOT NULL</td><td>所有数据类型</td><td>如果 A 不等于 NULL，则返回 TRUE，反之返回 FALSE</td></tr><tr><td>IN(数值 1, 数值 2)</td><td>所有数据类型</td><td>使用 IN 运算<strong>显示列表中的值</strong></td></tr><tr><td>A [NOT] LIKE B</td><td>STRING 类型</td><td><strong>B 是一个 SQL 下的简单正则表达式， 也叫通配符模式</strong>， 如 果 A 与其匹配的话，则返回 TRUE；反之返回 FALSE。 B 的表达式 说明如下：‘x%’表示 A 必须以字母‘x’开头，‘%x’表示 A 必须以字母’ x’结尾，而‘%x%’表示 A 包含有字母’ x’ ,可以 位于开头，结尾或者字符串中间。如果使用 NOT 关键字则可达到 相反的效果。</td></tr><tr><td>A RLIKE B, A REGEXP B</td><td>STRING 类型</td><td><strong>B 是基于 java 的正则表达式</strong>，如果 A 与其匹配，则返回 TRUE；反之返回 FALSE。匹配使用的是 JDK 中的正则表达式接口实现的，因为正则也依据其中的规则。例如，正则表达式必须和 整个字符串 A 相匹配，而不是只需与其字符串匹配。</td></tr></tbody></table></li><li><p>案例实操  </p><p>查询出薪水等于 5000 的所有员工  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal =<span class="hljs-number">5000</span>;<br></code></pre></td></tr></table></figure><p>查询工资在 <strong>500 到 1000</strong> 的员工信息  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-keyword">between</span> <span class="hljs-number">500</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><p>查询 comm 为空的所有员工信息  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>查询工资是 <strong>1500 或 5000</strong> 的员工信息  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-title">IN</span> (<span class="hljs-params"><span class="hljs-number">1500</span>, <span class="hljs-number">5000</span></span>)</span>;<br></code></pre></td></tr></table></figure></li></ol><hr><p><strong>Like 和 RLike</strong>  </p><ol><li><p>使用 LIKE 运算选择类似的值  </p></li><li><p>选择条件可以包含字符或数字:  </p><blockquote><p>% 代表零个或多个字符(任意个字符)。  </p><p>_ 代表一个字符。  </p></blockquote></li><li><p>RLIKE 子句  </p><p>RLIKE 子句是 Hive 中这个功能的一个扩展，其可以通过 Java 的正则表达式这个更强大的语言来指定匹配条件。  </p></li><li><p>案例实操  </p><ol><li><p>查找名字以 A 开头的员工信息  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;A%&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>查找名字中第二个字母为 A 的员工信息  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;_A%&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>查找名字中带有 A 的员工信息  \</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename RLIKE <span class="hljs-string">&#x27;[A]&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ol></li></ol><hr><p><strong>逻辑运算符（And&#x2F;Or&#x2F;Not）</strong>  </p><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>AND</td><td>逻辑并</td></tr><tr><td>OR</td><td>逻辑或</td></tr><tr><td>NOT</td><td>逻辑否</td></tr></tbody></table><p>案例实操</p><ol><li><p>查询薪水大于 1000，部门是 30  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal&gt;<span class="hljs-number">1000</span> and deptno=<span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询薪水大于 1000，或者部门是 30  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal&gt;<span class="hljs-number">1000</span> or deptno=<span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询<strong>除了 20 部门和 30 部门</strong>以外的员工信息  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno <span class="hljs-keyword">not</span> <span class="hljs-title">IN</span>(<span class="hljs-params"><span class="hljs-number">30</span>, <span class="hljs-number">20</span></span>)</span>;<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><h5 id="Group-By-语句"><a href="#Group-By-语句" class="headerlink" title="Group By 语句"></a>Group By 语句</h5><p>GROUP BY 语句通常会和聚合函数一起使用，按照一个或者多个列队结果<strong>进行分组</strong>，然后<strong>对每个组执行聚合操作</strong>。  </p><p>案例实操：  </p><ol><li><p>计算 emp 表每个部门的平均工资  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> t.deptno, <span class="hljs-built_in">avg</span>(t.sal) avg_sal <span class="hljs-keyword">from</span> emp t <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> t.deptno<br></code></pre></td></tr></table></figure></li><li><p>计算 emp 每个部门中每个岗位的最高薪水  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> t.deptno, t. job, <span class="hljs-built_in">max</span>(t.sal) max_sal <span class="hljs-keyword">from</span> emp t <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> t.deptno, t.job; <br></code></pre></td></tr></table></figure></li></ol><h5 id="Having-语句"><a href="#Having-语句" class="headerlink" title="Having 语句"></a>Having 语句</h5><ol><li><p>having 与 where 不同点  </p><blockquote><p>where 后面不能写分组函数， 而 having 后面可以使用分组函数。  </p><p>having <strong>只用于 group by</strong> 分组统计语句。  </p></blockquote></li><li><p>案例实操  </p><p>求每个部门的平均工资  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno<br></code></pre></td></tr></table></figure><p>求每个部门的平均薪水大于 2000 的部门  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">select</span> deptno, avg(sal) avg_sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno<br><span class="hljs-keyword">having</span> avg_sal &gt; <span class="hljs-number">2000</span>;<br></code></pre></td></tr></table></figure></li></ol><h5 id="Join-语句"><a href="#Join-语句" class="headerlink" title="Join 语句"></a>Join 语句</h5><p><strong>等值 Join</strong>  </p><p>Hive 支持通常的 SQL JOIN 语句。  </p><p>案例实操  </p><p>根据员工表和部门表中的部门编号相等，查询员工编号、员工名称和部门名称；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> e.empno, e.ename, d.deptno, d.dname <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno <span class="hljs-operator">=</span> d.deptno;<br></code></pre></td></tr></table></figure><p><strong>内连接</strong>  </p><p>内连接：只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> e.empno, e.ename, d.deptno <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno <span class="hljs-operator">=</span> d.deptno;<br></code></pre></td></tr></table></figure><p><strong>左外连接</strong>  </p><p>左外连接： JOIN 操作符左边表中符合 WHERE 子句的所有记录将会被返回。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> e.empno, e.ename, d.deptno <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno <span class="hljs-operator">=</span> d.deptno;<br></code></pre></td></tr></table></figure><p><strong>右外连接</strong>  </p><p>右外连接： JOIN 操作符右边表中符合 WHERE 子句的所有记录将会被返回。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> e.empno, e.ename, d.deptno <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno <span class="hljs-operator">=</span> d.deptno;<br></code></pre></td></tr></table></figure><p><strong>满外连接</strong>  </p><p>满外连接：将会返回所有表中符合 WHERE 语句条件的所有记录。如果任一表的指定字段没有符合条件的值的话，那么就使用 NULL 值替代。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> e.empno, e.ename, d.deptno <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">full</span> <span class="hljs-keyword">join</span><br>dept d <span class="hljs-keyword">on</span> e.deptno <span class="hljs-operator">=</span> d.deptno;<br></code></pre></td></tr></table></figure><hr><p><strong>多表连接</strong>  </p><p><strong>注意</strong>：连接 n 个表，至少需要 n-1 个连接条件。例如：连接三个表，至少需要两个连接条件。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span><span class="hljs-keyword">SELECT</span> e.ename, d.dname, l.loc_name<br>                <span class="hljs-keyword">FROM</span> emp e<br>                <span class="hljs-keyword">JOIN</span> dept d<br>                <span class="hljs-keyword">ON</span> d.deptno <span class="hljs-operator">=</span> e.deptno<br>                <span class="hljs-keyword">JOIN</span> location l<br>                <span class="hljs-keyword">ON</span> d.loc <span class="hljs-operator">=</span> l.loc;<br></code></pre></td></tr></table></figure><p>大多数情况下， Hive 会对每对 JOIN 连接对象启动一个 MapReduce 任务。本例中会首先启动一个 MapReduce job 对表 e 和表 d 进行连接操作，然后会再启动一个 MapReduce job 将第一个 MapReduce job 的输出和表 l;进行连接操作。  </p><p><strong>注意</strong>：为什么不是表 d 和表 l 先进行连接操作呢？这是因为 Hive 总是按照从左到右的顺序执行的。  </p><p><strong>优化</strong>： 当对 3 个或者更多表进行 join 连接时，如果每个 on 子句都使用相同的连接键的话，那么只会产生一个 MapReduce job。  </p><hr><p><strong>笛卡尔积</strong>  </p><p>笛卡尔集会在下面条件下产生  </p><ol><li>省略连接条件  </li><li>连接条件无效  </li><li>所有表中的所有行互相连接</li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> empno, dname <span class="hljs-keyword">from</span> emp, dept;<br></code></pre></td></tr></table></figure><hr><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h5 id="全局排序（Order-By）"><a href="#全局排序（Order-By）" class="headerlink" title="全局排序（Order By）"></a>全局排序（Order By）</h5><p>Order By： 全局排序， 只有一个 Reducer  </p><ol><li><p>使用 ORDER BY 子句排序  </p><blockquote><p>ASC（ascend） : 升序（默认）</p><p>DESC（descend） : 降序  </p></blockquote></li><li><p>ORDER BY 子句在 SELECT 语句的结尾</p></li></ol><p>案例实操  </p><ol><li><p>查询员工信息按工资升序排列  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal;<br></code></pre></td></tr></table></figure></li><li><p>查询员工信息按工资降序排列  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure></li><li><p>按照员工薪水的 2 倍排序  （<strong>按别名</strong>）</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> ename, sal*<span class="hljs-number">2</span> twosal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> twosal;<br></code></pre></td></tr></table></figure></li></ol><p><strong>多个列排序</strong>  </p><p>按照部门和工资升序排序  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> ename, deptno, sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> deptno, sal;<br></code></pre></td></tr></table></figure><hr><h5 id="每个-Reduce-内部排序（Sort-By）"><a href="#每个-Reduce-内部排序（Sort-By）" class="headerlink" title="每个 Reduce 内部排序（Sort By）"></a>每个 Reduce 内部排序（Sort By）</h5><p>Sort By： 对于<strong>大规模的数据集 order by 的效率非常低</strong>。在很多情况下， 并不需要全局排序， 此时可以使用 sort by。  </p><p>Sort by 为每个 reducer 产生一个排序文件。 每个 Reducer 内部进行排序， 对全局结果集来说不是排序  </p><ol><li><p>设置 reduce 个数  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">hive (default)&gt; <span class="hljs-built_in">set</span> mapreduce.job.<span class="hljs-attribute">reduces</span>=3;<br></code></pre></td></tr></table></figure></li><li><p>查看设置 reduce 个数  </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">set</span> mapreduce.job.reduces;<br></code></pre></td></tr></table></figure></li><li><p>根据部门编号降序查看员工信息  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hive (<span class="hljs-literal">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp sort <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure></li><li><p>将查询结果导入到文件中（按照部门编号降序排序）  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive (<span class="hljs-keyword">default</span>)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">local</span> directory<br><span class="hljs-string">&#x27;/opt/module/data/sortby-result&#x27;</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp sort <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure></li></ol><hr><h5 id="分区（Distribute-By）"><a href="#分区（Distribute-By）" class="headerlink" title="分区（Distribute By）"></a>分区（Distribute By）</h5><p>Distribute By： 在有些情况下， 我们需要控制某个特定行应该到哪个 reducer， 通常是为了进行后续的聚集操作。 distribute by 子句可以做这件事。 distribute by 类似 MR 中 partition（自定义分区） ，进行分区，结合 sort by 使用。</p><p>对于 distribute by 进行测试，一定要分配多 reduce 进行处理，否则无法看到 distribute by 的效果。 </p><p>先按照部门编号分区，再按照员工编号降序排序。  </p><p>案例实操：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">set</span> mapreduce.job.reduces=<span class="hljs-number">3</span>;<br>hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">local</span> directory<br><span class="hljs-string">&#x27;/opt/module/data/distribute-result&#x27;</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp distribute <span class="hljs-keyword">by</span><br>deptno sort <span class="hljs-keyword">by</span> empno <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：  </p><blockquote><p>distribute by 的分区规则是根据<strong>分区字段的 hash 码与 reduce 的个数进行模除</strong>后，余数相同的分到一个区。  </p><p>Hive 要求 DISTRIBUTE BY 语句要写在 SORT BY 语句之前。  </p></blockquote><hr><h5 id="Cluster-By"><a href="#Cluster-By" class="headerlink" title="Cluster By"></a>Cluster By</h5><p>当 distribute by 和 sorts by 字段相同时，可以使用 cluster by 方式。  </p><p>cluster by 除了具有 distribute by 的功能外还兼具 sort by 的功能。但是<strong>排序只能是升序排序</strong>， 不能指定排序规则为 ASC 或者 DESC。  </p><p>以下两种写法等价:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">cluster</span> <span class="hljs-keyword">by</span> deptno;<br>hive (<span class="hljs-keyword">default</span>)&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp distribute <span class="hljs-keyword">by</span> deptno sort <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>： 按照部门编号分区，不一定就是固定死的数值，可以是 <strong>20 号和 30 号部门分到一个分区里面去。</strong>  </p>]]></content>
    
    
    <categories>
      
      <category>BigData</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hive</tag>
      
      <tag>HSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka</title>
    <link href="/2022/07/17/Kafka/"/>
    <url>/2022/07/17/Kafka/</url>
    
    <content type="html"><![CDATA[<h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="Kafka-概述"><a href="#Kafka-概述" class="headerlink" title="Kafka 概述"></a>Kafka 概述</h2><h3 id="Kafka-定义"><a href="#Kafka-定义" class="headerlink" title="Kafka 定义"></a>Kafka 定义</h3><p>Kafka：一个分布式的基于发布&#x2F;订阅模式的<code>消息队列</code>（Message Queue），主要用于大数据实时处理领域。也是一个<code>开源分布式事件流平台</code>（Event Streaming Platform），用于高性能数据管道、流分析、数据集成和关键任务应用。</p><p>发布&#x2F;订阅：  消息的发布者不会将消息直接发送给特定的订阅者， 而是将发布的消息分为不同的类别， 订阅者只接收感兴趣的消息。  </p><p><strong>消息队列的应用场景</strong>  </p><p><strong>缓冲&#x2F;消峰</strong>    </p><blockquote><p>有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</p></blockquote><img src="/2022/07/17/Kafka/image-20220719103226806.png" alt="image-20220719103226806" style="zoom: 50%;"><p><strong>解耦</strong></p><blockquote><p>允许你独立的扩展或修改两边的处理过程， 只要确保它们遵守同样的接口约束。  </p></blockquote><img src="/2022/07/17/Kafka/image-20220719103424612.png" alt="image-20220719103424612" style="zoom:50%;"><p><strong>异步通信</strong>  </p><blockquote><p>允许用户把一个消息放入队列， 但并不立即处理它， 然后在需要的时候再去处理它们。  </p></blockquote><img src="/2022/07/17/Kafka/image-20220719103448821.png" alt="image-20220719103448821" style="zoom:50%;"><p><strong>消息队列的两种模式</strong>  </p><img src="/2022/07/17/Kafka/image-20220719103512602.png" alt="image-20220719103512602" style="zoom:50%;"><p><strong>点对点模式</strong></p><blockquote><p>消费者主动拉取数据，消息收到后清除消息  </p></blockquote><p><strong>发布&#x2F;订阅模式</strong>  </p><blockquote><p>可以有多个topic主题（浏览、点赞、收藏、评论等）  </p><p>消费者消费数据之后，不删除数据  </p><p>每个消费者相互独立，都可以消费到数据  </p></blockquote><h2 id="Kafka-架构"><a href="#Kafka-架构" class="headerlink" title="Kafka 架构"></a>Kafka 架构</h2><h3 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h3><ol><li>为方便扩展，并提高吞吐量，一个topic分为多个partition  </li><li>配合分区的设计，提出消费者组的概念，组内每个消费者并行消费  </li><li>为提高可用性，为每个partition增加若干副本，类似NameNode HA  </li><li>ZK中记录谁是leader， Kafka2.8.0以后也可以配置不采用ZK</li></ol><img src="/2022/07/17/Kafka/image-20220719111044803.png" alt="Kafka architecture" style="zoom:50%;"><ol><li><strong>Producer</strong>： 消息生产者，就是向 Kafka broker 发消息的客户端。  </li><li><strong>Consumer</strong>： 消息消费者，向 Kafka broker 取消息的客户端。  </li><li><strong>Consumer Group（CG）</strong>： 消费者组，由多个 consumer 组成。 消费者组内每个消费者负责<code>消费不同分区</code>的数据，<code>一个分区只能由一个组内消费者消费</code>；消费者组之间互不影响。 所有的消费者都属于某个消费者组，即<code>消费者组是逻辑上的一个订阅者</code>。  </li><li><strong>Broker</strong>： 一台 Kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个 broker 可以容纳多个 topic。  </li><li><strong>Topic</strong>： 可以理解为一个队列， 生产者和消费者面向的都是一个 topic。  </li><li><strong>Partition</strong>： 为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服务器）上， 一个 topic 可以分为多个 partition（如按时间（day，hour）），每个 partition 是一个有序的队列。  </li><li><strong>Replica</strong>： 副本。 <code>一个 topic 的每个分区都有若干个副本</code>，一个 Leader 和若干个 Follower。</li><li><strong>Leader</strong>： 每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是 Leader。    </li><li><strong>Follower</strong>： 每个分区多个副本中的“从”，实时从 Leader 中同步数据，保持和Leader 数据的同步。 Leader 发生故障时，某个 Follower 会成为新的 Leader。</li></ol><h2 id="Kafka-快速入门"><a href="#Kafka-快速入门" class="headerlink" title="Kafka 快速入门"></a>Kafka 快速入门</h2><p><strong>集群规划</strong>  </p><table><thead><tr><th>hadoop102</th><th>hadoop103</th><th>hadoop104</th></tr></thead><tbody><tr><td>zk</td><td>zk</td><td>zk</td></tr><tr><td>kafka</td><td>kafka</td><td>kafka</td></tr></tbody></table><p>注意： 停止 Kafka 集群时，一定要等 Kafka 所有节点进程全部停止后再停止 Zookeeper集群。因为 Zookeeper 集群当中记录着 Kafka 集群相关信息， Zookeeper 集群一旦先停止，Kafka 集群就没有办法再获取停止进程的信息，只能手动杀死 Kafka 进程了。  </p><p><strong>topic命令行操作</strong>  </p><p>bin&#x2F;kafka-topics.sh  + ：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>–bootstrap-server &lt;String: server toconnect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号。</td></tr><tr><td>–topic &lt;String: topic&gt;</td><td>操作的 topic 名称。</td></tr><tr><td>–create</td><td>创建主题。</td></tr><tr><td>–delete</td><td>删除主题。</td></tr><tr><td>–alter</td><td>修改主题。</td></tr><tr><td>–list</td><td>查看所有主题。</td></tr><tr><td>–describe</td><td>查看主题详细描述。</td></tr><tr><td>–partitions &lt;Integer: # of partitions&gt;</td><td>设置分区数。</td></tr><tr><td>–replication-factor&lt;Integer: replication factor&gt;</td><td>设置分区副本。</td></tr><tr><td>–config &lt;String: name&#x3D;value&gt;</td><td>更新系统默认的配置。</td></tr></tbody></table><p>创建 first topic ：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[test@hadoop102 kafka]</span>$  bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span> hadoop102:<span class="hljs-number">9092</span> <span class="hljs-attr">--create</span> <span class="hljs-attr">--partitions</span> <span class="hljs-number">1</span> <span class="hljs-attr">--replication-factor</span> <span class="hljs-number">3</span> <span class="hljs-attr">--topic</span> first<br></code></pre></td></tr></table></figure><p><strong>producer 命令行操作</strong> ：</p><p>bin&#x2F;kafka-console-producer.sh  + </p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>–bootstrap-server &lt;String: server toconnect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号。</td></tr><tr><td>–topic &lt;String: topic&gt;</td><td>操作的 topic 名称。</td></tr></tbody></table><p>发送消息：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[test@hadoop102 kafka]</span>$ bin/kafka-console-producer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span> hadoop102:<span class="hljs-number">9092</span> <span class="hljs-attr">--topic</span> first<br>&gt;hello world<br>&gt;flink spark<br></code></pre></td></tr></table></figure><p><strong>consumer 命令行操作</strong>：</p><p>bin&#x2F;kafka-console-consumer.sh  +</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>–bootstrap-server &lt;String: server toconnect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号。</td></tr><tr><td>–topic &lt;String: topic&gt;</td><td>操作的 topic 名称。</td></tr><tr><td>–from-beginning</td><td>从头开始消费。</td></tr><tr><td>–group &lt;String: consumer group id&gt;</td><td>指定消费者组名称。</td></tr></tbody></table><p>消费 first 主题中的数据：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[test@hadoop102 kafka]</span>$ bin/kafka-console-consumer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span> hadoop102:<span class="hljs-number">9092</span> <span class="hljs-attr">--topic</span> first<br></code></pre></td></tr></table></figure><p>把主题中所有的数据都读取出来（包括历史数据）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[test@hadoop102 kafka]</span>$ bin/kafka-console-consumer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span> hadoop102:<span class="hljs-number">9092</span> <span class="hljs-attr">--from-beginning</span> <span class="hljs-attr">--topic</span> first<br></code></pre></td></tr></table></figure><h3 id="发送原理"><a href="#发送原理" class="headerlink" title="发送原理"></a>发送原理</h3><p>在消息发送的过程中，涉及到了两个线程——main 线程和 Sender 线程。在 main 线程中创建了一个双端队列 RecordAccumulator。 main 线程将消息发送给 RecordAccumulator，Sender 线程不断从 RecordAccumulator 中拉取消息发送到 Kafka Broker。  </p><p><img src="/2022/07/17/Kafka/image-20220720102623312.png" alt="principle of sending"></p><p><strong>生产者重要参数列表</strong>  </p><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>bootstrap.servers</td><td>生 产 者 连 接 集 群 所 需 的 broker 地 址 清 单 。 例 如hadoop102:9092,hadoop103:9092,hadoop104:9092，可以 设置 1 个或者多个，中间用逗号隔开。注意这里并非需要所有的 broker 地址，因为生产者从给定的 broker 里查找到其他 broker 信息。</td></tr><tr><td>key.serializer 和 value.serializer</td><td>指定发送消息的 key 和 value 的序列化类型。一定要写全类名。</td></tr><tr><td>buffer.memory</td><td>RecordAccumulator 缓冲区总大小， 默认 <strong>32m</strong>。</td></tr><tr><td>batch.size</td><td>缓冲区一批数据最大值， 默认 <strong>16k</strong>。适当增加该值，可 以提高吞吐量，但是如果该值设置太大，会导致数据 传输延迟增加。</td></tr><tr><td>linger.ms</td><td>如果数据迟迟未达到 batch.size， sender 等待 linger.time 之后就会发送数据。单位 ms， 默认值是 <strong>0ms</strong>，表示没 有延迟。 <strong>生产环境</strong>建议该值大小为 <strong>5-100ms</strong> 之间。</td></tr><tr><td>acks</td><td>0：生产者发送过来的数据，不需要等数据落盘应答。 1：生产者发送过来的数据， Leader 收到数据后应答。 -1（all）：生产者发送过来的数据， Leader+和 isr 队列 里面的所有节点收齐数据后应答。 <strong>默认值是-1， -1 和 all 是等价的</strong>。</td></tr><tr><td>max.in.flight.requests.per.connection</td><td>允许最多没有返回 ack 的次数， <strong>默认为 5</strong>，开启幂等性 要保证该值是 1-5 的数字。</td></tr><tr><td>retries</td><td>当消息发送出现错误的时候，系统会重发消息。 retries 表示重试次数。 <strong>默认是 int 最大值， 2147483647</strong>。 如果设置了重试，还想保证消息的有序性，需要设置 MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION&#x3D;1 否则在重试此失败消息的时候，其他的消息可能发送 成功了。</td></tr><tr><td>retry.backoff.ms</td><td>两次重试之间的时间间隔，默认是 100ms。</td></tr><tr><td>enable.idempotence</td><td>是否<strong>开启幂等性</strong>， <strong>默认 true</strong>，开启幂等性。</td></tr><tr><td>compression.type</td><td>生产者发送的所有数据的压缩方式。 <strong>默认是 none</strong>，也 就是不压缩。 <strong>支持压缩</strong>类型： <strong>none、 gzip、 snappy、 lz4 和 zstd</strong>。</td></tr></tbody></table><p>例子 ： 带回调函数的异步发送 </p><p><img src="/2022/07/17/Kafka/image-20220720102833704.png" alt="sending with callback"></p><p>回调函数会在 producer 收到 ack 时调用，为异步调用，该方法有两个参数，分别是元数据信息（RecordMetadata） 和异常信息（Exception），如果 Exception 为 null，说明消息发送成功，如果 Exception 不为 null，说明消息发送失败。  </p><p>注意：消息发送失败会自动重试，不需要我们在回调函数中手动重试。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.kafka.producer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomProducerCallback</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">// 1. 创建 kafka 生产者的配置对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">// 2. 给 kafka 配置对象添加配置信息</span><br>        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;hadoop102:9092&quot;</span>);<br>        <span class="hljs-comment">// key,value 序列化（必须）： key.serializer， value.serializer</span><br>        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br>        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br>        <span class="hljs-comment">// 3. 创建 kafka 生产者对象</span><br>        KafkaProducer&lt;String, String&gt; kafkaProducer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;String, String&gt;(properties);<br>            <span class="hljs-comment">// 4. 调用 send 方法,发送消息</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                <span class="hljs-comment">// 添加回调</span><br>                kafkaProducer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(<span class="hljs-string">&quot;first&quot;</span>, <span class="hljs-string">&quot;test &quot;</span> + i), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Callback</span>() &#123;<br>                    <span class="hljs-comment">// 该方法在 Producer 收到 ack 时调用，为异步调用</span><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCompletion</span><span class="hljs-params">(RecordMetadata metadata, Exception exception)</span> &#123;<br>                    <span class="hljs-keyword">if</span> (exception == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 没有异常,输出信息到控制台</span><br>                    System.out.println(<span class="hljs-string">&quot; 主 题 ： &quot;</span> + metadata.topic() + <span class="hljs-string">&quot;-&gt;&quot;</span> + <span class="hljs-string">&quot;分区： &quot;</span> + metadata.partition());<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 出现异常打印</span><br>                    exception.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;);<br>                <span class="hljs-comment">// 延迟一会会看到数据发往不同分区</span><br>                Thread.sleep(<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-comment">// 5. 关闭资源</span><br>        kafkaProducer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：  </p><p>在 hadoop102 上开启 Kafka 消费者。  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[test@hadoop103 kafka]</span>$ bin/kafka-console-consumer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span> hadoop102:<span class="hljs-number">9092</span> <span class="hljs-attr">--topic</span> first<br></code></pre></td></tr></table></figure><p>在 IDEA 中执行代码，观察 hadoop102 控制台中是否接收到消息。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">test </span>0<br><span class="hljs-keyword">test </span>1<br><span class="hljs-keyword">test </span>2<br><span class="hljs-keyword">test </span>3<br><span class="hljs-keyword">test </span>4<br></code></pre></td></tr></table></figure><p>在 IDEA 控制台观察回调信息。  </p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq">主题： <span class="hljs-built_in">first</span>-&gt;分区： <span class="hljs-number">0</span><br>主题： <span class="hljs-built_in">first</span>-&gt;分区： <span class="hljs-number">0</span><br>主题： <span class="hljs-built_in">first</span>-&gt;分区： <span class="hljs-number">1</span><br>主题： <span class="hljs-built_in">first</span>-&gt;分区： <span class="hljs-number">1</span><br>主题： <span class="hljs-built_in">first</span>-&gt;分区： <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>同步发送 API</strong>  </p><p>只需在异步发送的基础上，再调用一下 get()方法即可。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 异步发送 默认</span><br>kafkaProducer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(<span class="hljs-string">&quot;first&quot;</span>,<span class="hljs-string">&quot;kafka&quot;</span> + i));<br><span class="hljs-comment">// 同步发送</span><br>kafkaProducer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(<span class="hljs-string">&quot;first&quot;</span>,<span class="hljs-string">&quot;kafka&quot;</span> + i)).get();<br></code></pre></td></tr></table></figure><h3 id="生产者分区"><a href="#生产者分区" class="headerlink" title="生产者分区"></a>生产者分区</h3><p><strong>好处</strong></p><ol><li><p><strong>便于合理使用存储资源</strong>：</p><blockquote><p>每个Partition在一个Broker上存储， 可以把海量的数据按照分区切割成一块一块数据存储在多台Broker上。 合理控制分区的任务， 可以实现<strong>负载均衡</strong>的效果。 </p></blockquote></li><li><p><strong>提高并行度</strong>：</p><blockquote><p>生产者可以以分区为单位发送数据；消费者可以以分区为单位进行消费数据。</p></blockquote></li></ol><h4 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h4><p><strong>在IDEA中全局查找（ctrl +n） ProducerRecord类， 在类中可以看到如下构造方法：</strong>  </p><ol><li><p>指明partition的情况下，直接将指明的值作为partition值；例如partition&#x3D;0，所有数据写入分区0：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProducerRecord</span><span class="hljs-params">(String topic, Integer partition, Long timestamp, K key, V value, Iterable&lt;Header&gt; headers)</span> &#123;<br>... ...<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProducerRecord</span><span class="hljs-params">(String topic, Integer partition, Long timestamp, K key, V value)</span> &#123;<br>... ...<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProducerRecord</span><span class="hljs-params">(String topic, Integer partition, K key, V value, Iterable&lt;Header&gt; headers)</span> &#123;<br>... ...<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProducerRecord</span><span class="hljs-params">(String topic, Integer partition, K key, V value)</span> &#123;<br>... ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>没有指明partition值但有key的情况下， 将key的hash值与topic的partition数进行取余得到partition值：</p><blockquote><p>例如： key1的hash值&#x3D;5， key2的hash值&#x3D;6 ， topic的partition数&#x3D;2， 那么key1 对应的value1写入1号分区， key2对应的value2写入0号分区。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProducerRecord</span><span class="hljs-params">(String topic, K key, V value)</span> &#123;<br>... ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>既没有partition值又没有key值的情况下， Kafka采用Sticky Partition（黏性分区器） ， 会随机选择一个分区， 并尽可能一直使用该分区， 待该分区的batch已满或者已完成， Kafka再随机一个分区进行使用（和上一次的分区不同） 。  </p><blockquote><p>例如：第一次随机选择0号分区， 等0号分区当前批次满了（默认16k） 或者linger.ms设置的时间到， Kafka再随机一个分区进行使用（如果还是0会继续随机） 。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProducerRecord</span><span class="hljs-params">(String topic, V value)</span> &#123;<br>... ...<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>自定义分区器</strong>  </p><p>如果研发人员可以根据企业需求，自己重新实现分区器。  </p><p>例如我们实现一个分区器实现， 发送过来的数据中如果包含 test，就发往 0 号分区，不包含 test，就发往 1 号分区。  </p><p><strong>实现步骤</strong>  </p><ol><li><p>定义类实现 Partitioner 接口。  </p></li><li><p>重写 partition()方法。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.kafka.producer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.Partitioner;<br><span class="hljs-keyword">import</span> org.apache.kafka.common.Cluster;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 1. 实现接口 Partitioner</span><br><span class="hljs-comment">* 2. 实现 3 个方法:partition,close,configure</span><br><span class="hljs-comment">* 3. 编写 partition 方法,返回分区号</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPartitioner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Partitioner</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 返回信息对应的分区</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> topic 主题</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> key 消息的 key</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> keyBytes 消息的 key 序列化后的字节数组</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> value 消息的 value</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> valueBytes 消息的 value 序列化后的字节数组</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> cluster 集群元数据可以查看分区信息</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(String topic, Object key, <span class="hljs-type">byte</span>[] keyBytes, Object value, <span class="hljs-type">byte</span>[] valueBytes, Cluster cluster)</span> &#123;<br>        <span class="hljs-comment">// 获取消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msgValue</span> <span class="hljs-operator">=</span> value.toString();<br>        <span class="hljs-comment">// 创建 partition</span><br>        <span class="hljs-type">int</span> partition;<br>        <span class="hljs-comment">// 判断消息是否包含 test</span><br>        <span class="hljs-keyword">if</span> (msgValue.contains(<span class="hljs-string">&quot;test&quot;</span>))&#123;<br>            partition = <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            partition = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 返回分区号</span><br>        <span class="hljs-keyword">return</span> partition;<br>    &#125;<br>    <span class="hljs-comment">// 关闭资源</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>    <br>    &#125;<br>    <span class="hljs-comment">// 配置方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(Map&lt;String, ?&gt; configs)</span> &#123;<br>    <br>    &#125;<br>    <br>    <br><br></code></pre></td></tr></table></figure></li><li><p>使用分区器的方法，在生产者的配置中添加分区器参数。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.kafka.producer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomProducerCallbackPartitions</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;hadoop102:9092&quot;</span>);<br>properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br>properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br><span class="hljs-comment">// 添加自定义分区器</span><br>properties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, <span class="hljs-string">&quot;com.test.kafka.producer.MyPartitioner&quot;</span>);<br>KafkaProducer&lt;String, String&gt; kafkaProducer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;&gt;(properties);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>kafkaProducer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(<span class="hljs-string">&quot;first&quot;</span>, <span class="hljs-string">&quot;test&quot;</span> + i), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Callback</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCompletion</span><span class="hljs-params">(RecordMetadata metadata, Exception e)</span> &#123;<br><span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot; 主 题 ： &quot;</span> + metadata.topic() + <span class="hljs-string">&quot;-&gt;&quot;</span> + <span class="hljs-string">&quot;分区： &quot;</span> + metadata.partition());<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;);<br>&#125;<br>kafkaProducer.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>生产者如何提高吞吐量</strong>  </p><blockquote><p>batch.size：批次大小，默认16k  </p><p>linger.ms：等待时间，修改为5-100ms  </p><p>compression.type：压缩snappy  </p><p>RecordAccumulator：缓冲区大小，修改为64m  </p></blockquote><h4 id="数据可靠性"><a href="#数据可靠性" class="headerlink" title="数据可靠性"></a>数据可靠性</h4><p><strong>ack 应答原理</strong>  </p><p><img src="/2022/07/17/Kafka/image-20220720112526804.png" alt="ack"></p><p><strong>0</strong>： 生产者发送过来的数据， 不需要等数据落盘应答  </p><blockquote><p><strong>数据可靠性分析</strong>：丢数</p></blockquote><p><strong>1</strong>： 生产者发送过来的数据， Leader收到数据后应答。  </p><blockquote><p><strong>数据可靠性分析</strong>：丢数  </p><p>如：应答完成后，还没开始同步副本， Leader挂了  </p><p>新的Leader不会收到Hello的信息，因为生产者已经认为发送成功了。  </p></blockquote><p><strong>-1（all）</strong> ： 生产者发送过来的数据， Leader和ISR队列里面的所有节点收齐数据后应答。  </p><p><strong>思考</strong>： Leader收到数据， 所有Follower都开始同步数据，但有一个Follower， 因为某种故障， 迟迟不能与Leader进行同步， 那这个问题怎么解决呢？  </p><blockquote><p><strong>Leader维护了一个动态的in-sync replica set（ ISR） ， 意为和Leader保持同步的Follower+Leader集合(leader： 0， isr:0,1,2)。</strong>  </p><p>如果Follower长时间未向Leader发送通信请求或同步数据，则该Follower将被踢出ISR。 该时间阈值由replica.lag.time.max.ms参数设定，默认30s。 例如2超时， (leader:0, isr:0,1)。  </p><p>这样就不用等长期联系不上或者已经故障的节点。  </p></blockquote><p><strong>数据可靠性分析</strong>：  </p><p>如果分区副本设置为1个， 或者ISR里应答的最小副本数量（ min.insync.replicas 默认为1） 设置为1， 和ack&#x3D;1的效果是一样的， 仍然有丢数的风险（leader： 0， isr:0） 。  </p><p><strong>数据完全可靠条件 &#x3D; ACK级别设置为-1 + 分区副本大于等于2 + ISR里应答的最小副本数量大于等于2</strong>  </p><p><strong>可靠性总结</strong>：  </p><blockquote><p><strong>acks&#x3D;0</strong>， 生产者发送过来数据就不管了， 可靠性差， 效率高；  </p><p><strong>acks&#x3D;1</strong>， 生产者发送过来数据Leader应答， 可靠性中等， 效率中等；  </p><p><strong>acks&#x3D;-1</strong>， 生产者发送过来数据Leader和ISR队列里面所有Follwer应答， 可靠性高， 效率低；  </p><p>在生产环境中， acks&#x3D;0很少使用； acks&#x3D;1， 一般用于传输普通日志， 允许丢个别数据； acks&#x3D;-1， 一般用于传输和钱相关的数据，对可靠性要求比较高的场景。  </p></blockquote><p>代码中需要添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置 acks</span><br>properties.put(ProducerConfig.ACKS_CONFIG, <span class="hljs-string">&quot;all&quot;</span>);<br><span class="hljs-comment">// 重试次数 retries，默认是 int 最大值， 2147483647</span><br>properties.put(ProducerConfig.RETRIES_CONFIG, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h4 id="数据重复-amp-数据去重"><a href="#数据重复-amp-数据去重" class="headerlink" title="数据重复 &amp; 数据去重"></a>数据重复 &amp; 数据去重</h4><p>Leader 在生产者发送过来的数据， Leader和ISR队列里面的所有节点收齐数据（hello）后应答，在最后应答时，leader 的 ack 还没有发出就挂了，导致 Producer 认为发送失败重传，但是新的 Leader （之前的 follower） 中已经有了该数据（hello）再次发送就导致了数据重复。</p><hr><p><strong>数据传递语义</strong>  </p><blockquote><p><strong>至少一次（At Least Once）</strong> &#x3D; ACK级别设置为-1 + 分区副本大于等于2 + ISR里应答的最小副本数量大于等于2  </p><p><strong>最多一次（At Most Once）</strong> &#x3D; ACK级别设置为0  </p></blockquote><p><strong>总结</strong>：</p><blockquote><p>At Least Once可以保证数据不丢失， 但是不能保证数据不重复；  </p><p>At Most Once可以保证数据不重复， 但是不能保证数据不丢失。    </p></blockquote><p><strong>精确一次（Exactly Once）</strong> ： 对于一些非常重要的信息， 比如和钱相关的数据， 要求数据既不能重复也不丢失。<br>Kafka 0.11版本以后， 引入了一项重大特性： <strong>幂等性</strong>和<strong>事务</strong>。  </p><hr><p><strong>幂等性</strong></p><blockquote><p>指Producer不论向Broker发送多少次重复数据， Broker端都只会持久化一条， 保证了不重复。  </p></blockquote><p><strong>精确一次（Exactly Once） &#x3D; 幂等性 + 至少一次（ ack&#x3D;-1 + 分区副本数&gt;&#x3D;2 + ISR最小副本数量&gt;&#x3D;2） 。</strong>  </p><p><strong>重复数据的判断标准</strong>：</p><blockquote><p>具有&lt;PID, Partition, SeqNumber&gt;相同主键的消息提交时， Broker只会持久化一条。 其中PID是Kafka每次重启都会分配一个新的； Partition 表示分区号； Sequence Number是单调自增的。  </p><p>所以幂等性只能保证的是在单分区单会话内不重复。 </p><p>例如：</p><p>（Sequence&#x3D;0，PID&#x3D;1000，Value&#x3D;Hello  ）；（Sequence&#x3D;1，PID&#x3D;1000，Value&#x3D;world  ）；  （Sequence&#x3D;1，PID&#x3D;1000，Value&#x3D;world  ）:negative_squared_cross_mark:</p></blockquote><p><strong>如何使用幂等性</strong></p><p>开启参数 enable.idempotence 默认为 true， false 关闭。  </p><hr><p><strong>生产者事务</strong></p><p><strong>事务原理</strong>：</p><p><strong>幂等性并不能跨多个分区运行</strong>，而事务可以弥补这个缺陷。<strong>事务可以保证对多个分区写入操作的原子性</strong>。操作的原子性是指多个操作要么全部成功，要么全部失败，不存在不一致的情况。</p><p>对流式应用而言，一个典型的应用模式为“consumer-transform-produce”, 这种模式下消费和生产并存： 应用程序从某个主题中消费消息，然后经过一系列操作写入另一个主题，消费者可能再提交消费位移的过程中出现问题而导致重复消费，也有可能生产者重复生产消息。 kafka中的事务可以使应用程<strong>序将消费消息，生产消息、提交消费位移当作原子操作来处理</strong>，同时成功或者失败，即使该生产或消费跨越多个分区。</p><p><img src="/2022/07/17/Kafka/image-20220720145425755.png" alt="transaction"></p><p><strong>场景</strong></p><ol><li>最简单的需求是producer发的多条消息组成一个事务这些消息需要对consumer同时可见或者同时不可见 。</li><li>producer可能会给多个topic，多个partition发消息，这些消息也需要能放在一个事务里面，这就形成了一个典型的分布式事务</li><li>kafka的应用场景经常是应用先消费一个topic，然后做处理再发到另一个topic，这个consume-transform-produce过程需要放到一个事务里面，比如在消息处理或者发送的过程中如果失败了，消费位点也不能提交。</li><li>producer或者producer所在的应用可能会挂掉，新的producer启动以后需要知道怎么处理之前未完成的事务 。</li><li>流式处理的拓扑可能会比较深，如果下游只有等上游消息事务提交以后才能读到，可能会导致rt非常长吞吐量也随之下降很多，所以需要实现read committed和read uncommitted两种事务隔离级别。</li></ol><p>transactionalId与PID一一对应，两者之间所不同的是transactionalId由用户显示设置，而PID是由kafka内部分配的。 为了保证新的生产者启动后，具有相同transactionalId的旧生产者能够立即失效，每个生产者通过transactionalId获取PID的同时，还会获取一个单调递增的producer epoch(对应下面要讲述的kafkaProducer.initTransactions()方法)。 如果使用同一个transactionalId开启两个生产者，那么前一个生产者会报提示有一个新的生产者利用同一个事务id申请了producer epoch。提示老的生产者它再broker里面已经过期了。</p><p>从生产者的角度分析，通过事务，Kafka 可以保证跨生产者会话的消息幂等发送，以及跨生产者会话的事务恢复。前者表示具有相同 transactionalId 的新生产者实例被创建且工作的时候，旧的且拥有相同transactionalId的生产者实例将不再工作。后者指当某个生产者实例宕机后，新的生产者实例可以保证任何未完成的旧事务要么被提交（Commit），要么被中止（Abort），如此可以使新的生产者实例从一个正常的状态开始工作。</p><p>而从消费者的角度分析，事务能保证的语义相对偏弱。出于以下原因，Kafka 并不能保证已提交的事务中的所有消息都能够被消费：</p><ol><li>对采用日志压缩策略的主题而言，事务中的某些消息有可能被清理（相同key的消息，后写入的消息会覆盖前面写入的消息）。</li><li>事务中消息可能分布在同一个分区的多个日志分段（LogSegment）中，当老的日志分段被删除时，对应的消息可能会丢失。</li><li>消费者可以通过seek（）方法访问任意offset的消息，从而可能遗漏事务中的部分消息。</li><li>消费者在消费时可能没有分配到事务内的所有分区，如此它也就不能读取事务中的所有消息。</li></ol><p>说明：开启事务， 必须开启幂等性。  </p><p>Producer 在使用事务功能前，必须先自定义一个唯一的 transactional.id。 有了 transactional.id，即使客户端挂掉了，它重启后也能继续处理未完成的事务  </p><p>Kafka 的事务一共有如下 5 个 API  ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1 初始化事务</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">initTransactions</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 2 开启事务</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">beginTransaction</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ProducerFencedException;<br><span class="hljs-comment">// 3 在事务内提交已经消费的偏移量（主要用于消费者）</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">sendOffsetsToTransaction</span><span class="hljs-params">(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets, String consumerGroupId)</span> <span class="hljs-keyword">throws</span> ProducerFencedException;<br><span class="hljs-comment">// 4 提交事务</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">commitTransaction</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ProducerFencedException;<br><span class="hljs-comment">// 5 放弃事务（类似于回滚事务的操作）</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">abortTransaction</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ProducerFencedException;<br><br></code></pre></td></tr></table></figure><p>单个 Producer，使用事务保证消息的仅一次发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.kafka.producer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomProducerTransactions</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">// 1. 创建 kafka 生产者的配置对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">// 2. 给 kafka 配置对象添加配置信息</span><br>        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="hljs-string">&quot;hadoop102:9092&quot;</span>);<br>        <span class="hljs-comment">// key,value 序列化</span><br>        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br>        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br>        <span class="hljs-comment">// 设置事务 id（必须），事务 id 任意起名</span><br>        properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, <span class="hljs-string">&quot;transaction_id_0&quot;</span>);<br>        <span class="hljs-comment">// 3. 创建 kafka 生产者对象</span><br>        KafkaProducer&lt;String, String&gt; kafkaProducer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;String, String&gt;(properties);<br>        <span class="hljs-comment">// 初始化事务</span><br>kafkaProducer.initTransactions();<br><span class="hljs-comment">// 开启事务</span><br>kafkaProducer.beginTransaction()<br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 4. 调用 send 方法,发送消息</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">// 发送消息</span><br>                kafkaProducer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(<span class="hljs-string">&quot;first&quot;</span>, <span class="hljs-string">&quot;test &quot;</span> + i));<br>            &#125;<br>            <span class="hljs-comment">// 提交事务</span><br>            kafkaProducer.commitTransaction();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// 终止事务</span><br>kafkaProducer.abortTransaction();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 5. 关闭资源</span><br>            kafkaProducer.close();<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数据有序"><a href="#数据有序" class="headerlink" title="数据有序"></a>数据有序</h4><p>单分区内， 有序（有条件的） ；</p><p>多分区， 分区与分区间无序；  </p><hr><h4 id="数据乱序"><a href="#数据乱序" class="headerlink" title="数据乱序"></a>数据乱序</h4><ol><li><p>kafka在1.x版本之前保证数据单分区有序：</p><blockquote><p>max.in.flight.requests.per.connection&#x3D;1（ 不需要考虑是否开启幂等性） 。  </p></blockquote></li><li><p>kafka在1.x及以后版本保证数据单分区有序：</p><blockquote><ol><li><p>未开启幂等性</p><p>max.in.flight.requests.per.connection需要设置为1。  </p></li><li><p>开启幂等性  </p><p>max.in.flight.requests.per.connection需要设置小于等于5。  </p><p>原因说明：因为在kafka1.x以后，启用幂等后， kafka服务端会缓存producer发来的最近5个request的元数据，故无论如何，都可以保证最近5个request的数据都是有序的。</p></li></ol></blockquote></li></ol><p><img src="/2022/07/17/Kafka/image-20220720152541375.png" alt="数据乱序"></p><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><h4 id="Zookeeper-存储的-Kafka-信息"><a href="#Zookeeper-存储的-Kafka-信息" class="headerlink" title="Zookeeper 存储的 Kafka 信息"></a>Zookeeper 存储的 Kafka 信息</h4><p><img src="/2022/07/17/Kafka/image-20220720155905524.png" alt="Kafka info in zookeeper"></p><p>在zookeeper的服务端存储的Kafka相关信息：  </p><blockquote><ol><li>&#x2F;kafka&#x2F;brokers&#x2F;ids : [0,1,2] 记录有哪些服务器  </li><li>&#x2F;kafka&#x2F;brokers&#x2F;topics&#x2F;first&#x2F;partitions&#x2F;0&#x2F;state : {“leader”:1 ,”isr”:[1,0,2] } 记录谁是Leader，有哪些服务器可用  </li><li>&#x2F;kafka&#x2F;controller {“brokerid” :0} 辅助选举Leader</li></ol></blockquote><h4 id="Kafka-Broker-总体工作流程"><a href="#Kafka-Broker-总体工作流程" class="headerlink" title="Kafka Broker 总体工作流程"></a>Kafka Broker 总体工作流程</h4><p><img src="/2022/07/17/Kafka/image-20220720165554946.png" alt="borker working procedure"></p><p><strong>Broker 重要参数</strong>  </p><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>replica.lag.time.max.ms</td><td>ISR 中， 如果 Follower 长时间未向 Leader 发送通 信请求或同步数据，则该 Follower 将被踢出 ISR。 该时间阈值， <strong>默认 30s。</strong></td></tr><tr><td>auto.leader.rebalance.enable</td><td><strong>默认是 true</strong>。 自动 Leader Partition 平衡。</td></tr><tr><td>leader.imbalance.per.broker.percentage</td><td>**默认是 10%**。 每个 broker 允许的不平衡的 leader 的比率。如果每个 broker 超过了这个值，控制器 会触发 leader 的平衡。</td></tr><tr><td>leader.imbalance.check.interval.seconds</td><td><strong>默认值 300 秒</strong>。检查 leader 负载是否平衡的间隔时 间。</td></tr><tr><td>log.segment.bytes</td><td>Kafka 中 log 日志是分成一块块存储的，此配置是 指 log 日志划分 成块的大小， <strong>默认值 1G</strong>。</td></tr><tr><td>log.index.interval.bytes</td><td><strong>默认 4kb</strong>， kafka 里面每当写入了 4kb 大小的日志 （.log），然后就往 index 文件里面记录一个索引。</td></tr><tr><td>log.retention.hours</td><td>Kafka 中数据保存的时间， <strong>默认 7 天</strong>。</td></tr><tr><td>log.retention.minutes</td><td>Kafka 中数据保存的时间， <strong>分钟级别</strong>，默认关闭。</td></tr><tr><td>log.retention.ms</td><td>Kafka 中数据保存的时间， <strong>毫秒级别</strong>，默认关闭</td></tr><tr><td>log.retention.check.interval.ms</td><td>检查数据是否保存超时的间隔， <strong>默认是 5 分钟</strong>。</td></tr><tr><td>log.retention.bytes</td><td><strong>默认等于-1，表示无穷大</strong>。 超过设置的所有日志总大小，删除最早的 segment。</td></tr><tr><td>log.cleanup.policy</td><td><strong>默认是 delete</strong>，表示所有数据启用删除策略；如果设置值为 compact，表示所有数据启用压缩策 略。</td></tr><tr><td>num.io.threads</td><td><strong>默认是 8</strong>。 负责写磁盘的线程数。整个参数值要占 总核数的 50%。</td></tr><tr><td>num.replica.fetchers</td><td>副本拉取线程数，这个参数占总核数的 50%的 1&#x2F;3</td></tr><tr><td>num.network.threads</td><td><strong>默认是 3</strong>。 数据传输线程数，这个参数占总核数的 50%的 2&#x2F;3 。</td></tr><tr><td>log.flush.interval.messages</td><td>强制页缓存刷写到磁盘的条数，默认是 long 的最 大值， 9223372036854775807。一般不建议修改， 交给系统自己管理。</td></tr><tr><td>log.flush.interval.ms</td><td>每隔多久，刷数据到磁盘，默认是 null。一般不建 议修改，交给系统自己管理。</td></tr></tbody></table><h4 id="节点服役和退役"><a href="#节点服役和退役" class="headerlink" title="节点服役和退役"></a>节点服役和退役</h4><p><strong>服役新节点</strong></p><ol><li><p>关闭 hadoop104，并右键执行克隆操作。  </p></li><li><p>开启 hadoop105，并修改 IP 地址。  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#根据你自己的 Hadoop 集群网络来配置</span><br><span class="hljs-section">[root@hadoop104 ~]</span><span class="hljs-comment"># vim /etc/sysconfig/network-scripts/ifcfgens33</span><br><span class="hljs-attr">DEVICE</span>=ens33<br><span class="hljs-attr">TYPE</span>=Ethernet<br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">BOOTPROTO</span>=static<br><span class="hljs-attr">NAME</span>=<span class="hljs-string">&quot;ens33&quot;</span><br><span class="hljs-attr">IPADDR</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">10.105</span><br><span class="hljs-attr">PREFIX</span>=<span class="hljs-number">24</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">10.2</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">10.2</span><br></code></pre></td></tr></table></figure></li><li><p>在 hadoop105 上，修改主机名称为 hadoop105。  </p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@hadoop104</span> ~]<span class="hljs-meta"># vim /etc/hostname</span><br>hadoop105<br></code></pre></td></tr></table></figure></li><li><p>重新启动 hadoop104、 hadoop105。  </p></li><li><p>修改 haodoop105 中 kafka 的 broker.id 为 3。  </p></li><li><p>删除 hadoop105 中 kafka 下的 datas 和 logs。  </p></li><li><p>启动 hadoop102、 hadoop103、 hadoop104 上的 kafka 集群  </p></li><li><p>单独启动 hadoop105 中的 kafka。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[<span class="hljs-built_in">test</span>@hadoop105 kafka]$ bin/kafka-server-start.sh -daemon ./config/server.properties<br></code></pre></td></tr></table></figure></li></ol><p><strong>执行负载均衡操作</strong>  </p><ol><li><p>创建一个要均衡的主题。  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span>test@hadoop102 kafka<span class="hljs-punctuation">]</span>$ vim topics-to-move.json<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;topics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>生成一个负载均衡的计划。  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span>test@hadoop102 kafka<span class="hljs-punctuation">]</span>$ bin/kafka-reassign-partitions.sh --bootstrap-server hadoop102<span class="hljs-punctuation">:</span><span class="hljs-number">9092</span> --topics-to-move-json-file topics-to-move.json --broker-list <span class="hljs-string">&quot;0,1,2,3&quot;</span> --generate<br><br>Current partition replica assignment<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partitions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br><br>Proposed partition reassignment configuration<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partitions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>创建副本存储计划（所有副本存储在 broker0、 broker1、 broker2、 broker3 中）。  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span>test@hadoop102 kafka<span class="hljs-punctuation">]</span>$ vim increase-replication-factor.json<br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partitions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>执行副本存储计划。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[test@hadoop102 kafka]$ bin/kafka-<span class="hljs-keyword">reassign</span>-partitions.sh <span class="hljs-comment">--bootstrap-server hadoop102:9092 --reassignment-json-file increase-replication-factor.json --execute</span><br></code></pre></td></tr></table></figure></li><li><p>验证副本存储计划。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">[test@hadoop102 kafka]$ bin/kafka-reassign-partitions.<span class="hljs-keyword">sh</span> --bootstrap-server hadoop102:<span class="hljs-number">9092</span> --reassignment-json-<span class="hljs-keyword">file</span> increase-replication-factor.json --verify<br><br>Status of partition reassignment:<br>Reassignment of partition <span class="hljs-keyword">first</span>-<span class="hljs-number">0</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">complete</span>.<br>Reassignment of partition <span class="hljs-keyword">first</span>-<span class="hljs-number">1</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">complete</span>.<br>Reassignment of partition <span class="hljs-keyword">first</span>-<span class="hljs-number">2</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">complete</span>.<br><br>Clearing broker-level throttles <span class="hljs-keyword">on</span> brokers <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>Clearing topic-level throttles <span class="hljs-keyword">on</span> topic <span class="hljs-keyword">first</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>退役旧节点</strong></p><p>  先按照退役一台节点， <strong>生成执行计划</strong>，然后按照服役时操作流程<strong>执行负载均衡</strong>。  </p><ol><li><p>创建一个要均衡的主题。  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span>test@hadoop102 kafka<span class="hljs-punctuation">]</span>$ vim topics-to-move.json<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;topics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>创建执行计划。  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span>test@hadoop102 kafka<span class="hljs-punctuation">]</span>$ bin/kafka-reassign-partitions.sh --bootstrap-server hadoop102<span class="hljs-punctuation">:</span><span class="hljs-number">9092</span> --topics-to-move-json-file topics-to-move.json --broker-list <span class="hljs-string">&quot;0,1,2&quot;</span> --generate<br><br>Current partition replica assignment<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partitions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br><br>Proposed partition reassignment configuration<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partitions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>创建副本存储计划（所有副本存储在 broker0、 broker1、 broker2 中）。  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span>test@hadoop102 kafka<span class="hljs-punctuation">]</span>$ vim increase-replication-factor.json<br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partitions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;first&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;log_dirs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>执行副本存储计划。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[test@hadoop102 kafka]$ bin/kafka-<span class="hljs-keyword">reassign</span>-partitions.sh <span class="hljs-comment">--bootstrap-server hadoop102:9092 --reassignment-json-file increase-replication-factor.json --execute</span><br></code></pre></td></tr></table></figure></li><li><p>验证副本存储计划。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">[test@hadoop102 kafka]$ bin/kafka-reassign-partitions.<span class="hljs-keyword">sh</span> --bootstrap-server hadoop102:<span class="hljs-number">9092</span> --reassignment-json-<span class="hljs-keyword">file</span> increase-replication-factor.json --verify<br><br>Status of partition reassignment:<br>Reassignment of partition <span class="hljs-keyword">first</span>-<span class="hljs-number">0</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">complete</span>.<br>Reassignment of partition <span class="hljs-keyword">first</span>-<span class="hljs-number">1</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">complete</span>.<br>Reassignment of partition <span class="hljs-keyword">first</span>-<span class="hljs-number">2</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">complete</span>.<br><br>Clearing broker-level throttles <span class="hljs-keyword">on</span> brokers <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>Clearing topic-level throttles <span class="hljs-keyword">on</span> topic <span class="hljs-keyword">first</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>执行停止命令</strong>  </p><p>在 hadoop105 上执行停止命令即可。  </p><h3 id="Kafka-副本"><a href="#Kafka-副本" class="headerlink" title="Kafka 副本"></a>Kafka 副本</h3><h4 id="副本基本信息"><a href="#副本基本信息" class="headerlink" title="副本基本信息"></a>副本基本信息</h4><ol><li><p>Kafka 副本作用：提高数据可靠性。  </p></li><li><p>Kafka 默认副本 1 个，生产环境一般配置为 2 个，保证数据可靠性；太多副本会增加磁盘存储空间，增加网络上数据传输，降低效率。  </p></li><li><p>Kafka 中副本分为： Leader 和 Follower。 Kafka 生产者只会把数据发往 Leader，然后 Follower 找 Leader 进行同步数据。  </p></li><li><p>Kafka 分区中的所有副本统称为 AR（Assigned Repllicas）。  </p><blockquote><p>AR &#x3D; ISR + OSR</p><p>ISR，表示和 Leader 保持同步的 Follower 集合。 如果 Follower 长时间未向 Leader 发送通信请求或同步数据，则该 Followe 将被踢出 ISR。该时间阈值由 replica.lag.time.max.ms 参数设定，默认 30s。 Leader 发生故障之后，就会从 ISR 中选举新的 Leader。  </p><p>OSR， 表示 Follower 与 Leader 副本同步时，延迟过多的副本。</p></blockquote></li></ol><h4 id="Leader-选举流程"><a href="#Leader-选举流程" class="headerlink" title="Leader 选举流程"></a>Leader 选举流程</h4><p>Kafka 集群中有一个 broker 的 Controller 会被选举为 Controller Leader，负责管理集群 broker 的上下线，所有 topic 的分区副本分配和 Leader 选举等工作。</p><p>Controller 的信息同步工作是依赖于 Zookeeper 的。  </p><p><img src="/2022/07/17/Kafka/image-20220720165554946.png" alt="borker working procedure"></p><h4 id="Leader-和-Follower-故障处理细节"><a href="#Leader-和-Follower-故障处理细节" class="headerlink" title="Leader 和 Follower 故障处理细节"></a>Leader 和 Follower 故障处理细节</h4><p><strong>LEO（Log End Offset）</strong>： 每个副本的最后一个offset， LEO其实就是最新的offset + 1。  </p><p><strong>HW（High Watermark）</strong>： 所有副本中最小的LEO 。  </p><p><img src="/2022/07/17/Kafka/image-20220721102712676.png" alt="Follower ERROR"></p><p><strong>Follower故障</strong>  </p><ol><li>Follower发生故障后会被临时踢出ISR  </li><li>这个期间Leader和Follower继续接收数据  </li><li>待该Follower恢复后， Follower会读取本地磁盘记录的上次的HW，并将log文件高于HW的部分截取掉，从HW开始向Leader进行同步  </li><li>等该Follower的LEO大于等于该Partition的HW，即Follower追上Leader之后，就可以重新加入ISR了。</li></ol><p><img src="/2022/07/17/Kafka/image-20220721103039002.png" alt="Leader ERROR"></p><p><strong>Leader故障</strong>  </p><ol><li>Leader发生故障之后，会从ISR中选出一个新的Leader  </li><li>为保证多个副本之间的数据一致性，其余的Follower会先将各自的log文件高于HW的部分截掉，然后从新的Leader同步数据。</li></ol><p><strong>注意</strong>：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。  </p><h4 id="手动调整分区副本存储"><a href="#手动调整分区副本存储" class="headerlink" title="手动调整分区副本存储"></a>手动调整分区副本存储</h4><p>在生产环境中， 每台服务器的配置和性能不一致， 但是Kafka只会根据自己的代码规则创建对应的分区副本， 就会导致个别服务器存储压力较大。 所有需要手动调整分区副本的存储。  </p><p>副本</p><table><thead><tr><th>broker</th><th>storage capacity</th><th>before_replicas</th><th>after_replicas</th></tr></thead><tbody><tr><td>broker0</td><td>32T</td><td>1_Leader 2_Follower</td><td>1_Leader 2_Leader 3_Follower 4_Follower</td></tr><tr><td>broker1</td><td>32T</td><td>2_Leader 3_Follower</td><td>3_Leader 4_Leader 1_Follower 2_Follower</td></tr><tr><td>broker2</td><td>4T</td><td>3_Leader 4_Follower</td><td></td></tr><tr><td>broker3</td><td>4T</td><td>4_Leader 1_Follower</td><td></td></tr></tbody></table><p>手动调整分区副本存储的步骤如下：  </p><ol><li><p>创建一个新的 topic， 名称为 three。  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[test@hadoop102 kafka]</span>$ bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span> hadoop102:<span class="hljs-number">9092</span> <span class="hljs-attr">--create</span> <span class="hljs-attr">--partitions</span> <span class="hljs-number">4</span> <span class="hljs-attr">--replication-factor</span> <span class="hljs-number">2</span> <span class="hljs-attr">--topic</span> three<br></code></pre></td></tr></table></figure></li><li><p>查看分区副本存储情况。  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[test@hadoop102 kafka]</span>$ bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span> hadoop102:<span class="hljs-number">9092</span> <span class="hljs-attr">--describe</span> <span class="hljs-attr">--topic</span> three<br></code></pre></td></tr></table></figure></li><li><p>创建副本存储计划（所有副本都指定存储在 broker0、 broker1 中）。  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span>test@hadoop102 kafka<span class="hljs-punctuation">]</span>$ vim increase-replication-factor.json<br><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;partitions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>执行副本存储计划。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[test@hadoop102 kafka]$ bin/kafka-<span class="hljs-keyword">reassign</span>-partitions.sh <span class="hljs-comment">--bootstrap-server hadoop102:9092 --reassignment-json-file increase-replication-factor.json --execute</span><br></code></pre></td></tr></table></figure></li><li><p>验证副本存储计划。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[test@hadoop102 kafka]$ bin/kafka-<span class="hljs-keyword">reassign</span>-partitions.sh <span class="hljs-comment">--bootstrap-server hadoop102:9092 --reassignment-json-file increase-replication-factor.json --verify</span><br></code></pre></td></tr></table></figure></li><li><p>查看分区副本存储情况。  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[test@hadoop102 kafka]</span>$ bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span><br>hadoop102:<span class="hljs-number">9092</span> <span class="hljs-attr">--describe</span> <span class="hljs-attr">--topic</span> three<br></code></pre></td></tr></table></figure></li></ol><h4 id="Leader-Partition-负载平衡"><a href="#Leader-Partition-负载平衡" class="headerlink" title="Leader Partition 负载平衡"></a>Leader Partition 负载平衡</h4><p>正常情况下， Kafka本身会自动把Leader Partition均匀分散在各个机器上， 来保证每台机器的读写吞吐量都是均匀的。 但是如果某些broker宕机， 会导致Leader Partition过于集中在其他少部分几台broker上， 这会导致少数几台broker的读写请求压力过高， 其他宕机的broker重启之后都是follower partition， 读写请求很低， 造成集群负载不均衡。  </p><p><strong>配置参数</strong></p><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>auto.leader.rebalance.enable</td><td>默认是 true。 自动 Leader Partition 平衡。 生产环 境中， leader 重选举的代价比较大，可能会带来 性能影响，建议设置为 false 关闭。</td></tr><tr><td>leader.imbalance.per.broker.percentage</td><td>默认是 10%。 每个 broker 允许的不平衡的 leader 的比率。如果每个 broker 超过了这个值，控制器 会触发 leader 的平衡。</td></tr><tr><td>leader.imbalance.check.interval.seconds</td><td>默认值 300 秒。检查 leader 负载是否平衡的间隔 时间。</td></tr></tbody></table><p>例子</p><table><thead><tr><th>broker</th><th>Topic</th><th>Partition</th><th>Leader</th><th>Replicas</th><th>Isr</th></tr></thead><tbody><tr><td>2</td><td>test</td><td>0</td><td>0</td><td>3，0，2，1</td><td>3，0，2，1</td></tr><tr><td>1</td><td>test</td><td>1</td><td>1</td><td>1，2，3，0</td><td>1，2，3，0</td></tr><tr><td>0</td><td>test</td><td>2</td><td>2</td><td>0，3，1，2</td><td>0，3，1，2</td></tr><tr><td>3</td><td>test</td><td>3</td><td>3</td><td>2，1，0，3</td><td>2，1，0，3</td></tr></tbody></table><p>针对broker0节点，分区2的AR优先副本是0节点，但是0节点却不是Leader节点，所以不平衡数加1， AR副本总数是4  </p><blockquote><p>所以broker0节点不平衡率为1&#x2F;4&gt;10%，需要再平衡。  </p></blockquote><p>broker2和broker3节点和broker0不平衡率一样，需要再平衡。</p><p>Broker1的不平衡数为0，不需要再平衡  </p><h4 id="增加副本因子"><a href="#增加副本因子" class="headerlink" title="增加副本因子"></a>增加副本因子</h4><p>在生产环境当中，由于某个主题的重要等级需要提升，我们考虑增加副本。副本数的增加需要先制定计划，然后根据计划执行。  </p><ol><li><p>创建 topic </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[test@hadoop102 kafka]</span>$ bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span> hadoop102:<span class="hljs-number">9092</span> <span class="hljs-attr">--create</span> <span class="hljs-attr">--partitions</span> <span class="hljs-number">3</span> <span class="hljs-attr">--replication-factor</span> <span class="hljs-number">1</span> -- topic four<br></code></pre></td></tr></table></figure></li><li><p>手动增加副本存储  </p><p>创建副本存储计划（所有副本都指定存储在 broker0、 broker1、 broker2 中）。  </p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[test@hadoop102 kafka]$ vim increase-replication-factor.json<br><br>&#123;<span class="hljs-string">&quot;version&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;partitions&quot;</span>:[&#123;<span class="hljs-string">&quot;topic&quot;</span>:<span class="hljs-string">&quot;four&quot;</span>,<span class="hljs-string">&quot;partition&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;replicas&quot;</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]&#125;,&#123;<span class="hljs-string">&quot;topic&quot;</span>:<span class="hljs-string">&quot;four&quot;</span>,<span class="hljs-string">&quot;partition&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;replicas&quot;</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]&#125;,&#123;<span class="hljs-string">&quot;topic&quot;</span>:<span class="hljs-string">&quot;four&quot;</span>,<span class="hljs-string">&quot;partition&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;replicas&quot;</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]&#125;]&#125;<br></code></pre></td></tr></table></figure><p>执行副本存储计划  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[test@hadoop102 kafka]$ bin/kafka-<span class="hljs-keyword">reassign</span>-partitions.sh <span class="hljs-comment">--bootstrap-server hadoop102:9092 --reassignment-json-file increase-replication-factor.json --execute</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h3><h4 id="文件存储机制"><a href="#文件存储机制" class="headerlink" title="文件存储机制"></a>文件存储机制</h4><p>Topic是逻辑上的概念， 而partition是物理上的概念， 每个partition对应于一个log文件， 该log文件中存储的就是Producer生产的数据。 <strong>Producer生产的数据会被不断追加到该log文件末端</strong>， 为防止log文件过大导致数据定位效率低下， Kafka采取了<strong>分片</strong>和<strong>索引机制</strong>，将每个<strong>partition分为多个segment</strong>。 每个segment包括： “.index”文件、 “.log”文件和.timeindex等文件。 这些文件位于一个文件夹下， 该文件夹的命名规则为： topic名称+分区序号， 例如： first-0。  </p><p><img src="/2022/07/17/Kafka/image-20220721112416658.png" alt="File Storage"></p><p>一个topic分为多个partition  </p><p>一个partition分为多个segment  </p><blockquote><p>每个 segment</p><p>.log 日志文件<br>.index 偏移量索引文件<br>.timeindex 时间戳索引文件<br>其他文件  </p></blockquote><p><strong>说明</strong>： index和log文件以当前 segment 的第一条消息的offset命名。  </p><p><strong>Topic 数据到底存储在什么位置？</strong>  </p><ol><li><p>启动生产者，并发送消息。  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[test@hadoop102 kafka]</span>$ bin/kafka-console-producer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span> hadoop102:<span class="hljs-number">9092</span> <span class="hljs-attr">--topic</span> first<br>&gt;hello world<br></code></pre></td></tr></table></figure></li><li><p>查看 hadoop102（或者 hadoop103、 hadoop104）的&#x2F;opt&#x2F;module&#x2F;kafka&#x2F;datas&#x2F;first-1 （first-0、 first-2）路径上的文件。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[test@hadoop104 first<span class="hljs-number">-1</span>]$ ls<br><span class="hljs-number">00000000000000000092.</span><span class="hljs-keyword">index</span><br><span class="hljs-number">00000000000000000092.</span><span class="hljs-keyword">log</span><br><span class="hljs-number">00000000000000000092.</span><span class="hljs-keyword">snapshot</span><br><span class="hljs-number">00000000000000000092.</span>timeindex<br>leader-epoch-<span class="hljs-keyword">checkpoint</span><br><span class="hljs-keyword">partition</span>.metadata<br></code></pre></td></tr></table></figure></li><li><p>通过工具查看 index 和 log 信息。  </p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tap">[test@hadoop104 first-1]$ kafka-run-class.sh kafka.tools.DumpLogSegments --files ./00000000000000000000.index<br><br>Dumping ./00000000000000000000.index<br>offset:<span class="hljs-number"> 3 </span>position: 152<br><br>[test@hadoop104 first-1]$ kafka-run-class.sh kafka.tools.DumpLogSegments --files ./00000000000000000000.log<br><br>Dumping datas/first-0/00000000000000000000.log<br>Starting offset: 0<br>baseOffset:<span class="hljs-number"> 0 </span>lastOffset:<span class="hljs-number"> 1 </span>count:<span class="hljs-number"> 2 </span>baseSequence: -1 lastSequence: -1 producerId: -1 producerEpoch: -1 partitionLeaderEpoch:<span class="hljs-number"> 0 </span>isTransactional: false isControl: false position:<span class="hljs-number"> 0 </span>CreateTime:<span class="hljs-number"> 1636338440962 </span>size:<span class="hljs-number"> 75 </span>magic:<span class="hljs-number"> 2 </span>compresscodec: none crc:<span class="hljs-number"> 2745337109 </span>isvalid: true<br><br>baseOffset:<span class="hljs-number"> 2 </span>lastOffset:<span class="hljs-number"> 2 </span>count:<span class="hljs-number"> 1 </span>baseSequence: -1 lastSequence: -1 producerId: -1 producerEpoch: -1 partitionLeaderEpoch:<span class="hljs-number"> 0 </span>isTransactional: false isControl: false position:<span class="hljs-number"> 75 </span>CreateTime:<span class="hljs-number"> 1636351749089 </span>size:<span class="hljs-number"> 77 </span>magic:<span class="hljs-number"> 2 </span>compresscodec: none crc:<span class="hljs-number"> 273943004 </span>isvalid: true<br><br>baseOffset:<span class="hljs-number"> 3 </span>lastOffset:<span class="hljs-number"> 3 </span>count:<span class="hljs-number"> 1 </span>baseSequence: -1 lastSequence: -1 producerId: -1 producerEpoch: -1 partitionLeaderEpoch:<span class="hljs-number"> 0 </span>isTransactional: false isControl: false position:<span class="hljs-number"> 152 </span>CreateTime:<span class="hljs-number"> 1636351749119 </span>size:<span class="hljs-number"> 77 </span>magic:<span class="hljs-number"> 2 </span>compresscodec: none crc:<span class="hljs-number"> 106207379 </span>isvalid: true<br><br>baseOffset:<span class="hljs-number"> 4 </span>lastOffset:<span class="hljs-number"> 8 </span>count:<span class="hljs-number"> 5 </span>baseSequence: -1 lastSequence: -1 producerId: -1 producerEpoch: -1 partitionLeaderEpoch:<span class="hljs-number"> 0 </span>isTransactional: false isControl: false position:<span class="hljs-number"> 229 </span>CreateTime:<span class="hljs-number"> 1636353061435 </span>size:<span class="hljs-number"> 141 </span>magic:<span class="hljs-number"> 2 </span>compresscodec: none crc:<span class="hljs-number"> 157376877 </span>isvalid: true<br><br>baseOffset:<span class="hljs-number"> 9 </span>lastOffset:<span class="hljs-number"> 13 </span>count:<span class="hljs-number"> 5 </span>baseSequence: -1 lastSequence: -1 producerId: -1 producerEpoch: -1 partitionLeaderEpoch:<span class="hljs-number"> 0 </span>isTransactional: false isControl: false position:<span class="hljs-number"> 370 </span>CreateTime:<span class="hljs-number"> 1636353204051 </span>size:<span class="hljs-number"> 146 </span>magic:<span class="hljs-number"> 2 </span>compresscodec: none crc:<span class="hljs-number"> 4058582827 </span>isvalid: true<br></code></pre></td></tr></table></figure></li></ol><p><strong>index 文件和 log 文件详解</strong>  </p><p><img src="/2022/07/17/Kafka/image-20220721140234682.png" alt="index &amp; log"></p><ol><li>根据目标offset定位Segment文件  </li><li>找到小于等于目标offset的最大offset对应的索引项  </li><li>定位到log文件  </li><li>向下遍历找到目标Record</li></ol><p><strong>注意</strong>：</p><ol><li>.index为稀疏索引，大约每往log文件写入4kb数据，会往index文件写入一条索引。参数log.index.interval.bytes默认4kb。  </li><li>Index文件中保存的offset为相对offset，这样能确保offset的值所占空间不会过大，<br>因此能将offset的值控制在固定大小</li></ol><p>日志存储参数配置  </p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>log.segment.bytes</td><td>Kafka 中 log 日志是分成一块块存储的，此配置是指 log 日志划分 成块的大小， <strong>默认值 1G</strong>。</td></tr><tr><td>log.index.interval.bytes</td><td><strong>默认 4kb</strong>， kafka 里面每当写入了 4kb 大小的日志（.log），然后就 往 index 文件里面记录一个索引。 稀疏索引。</td></tr></tbody></table><h4 id="文件清理策略"><a href="#文件清理策略" class="headerlink" title="文件清理策略"></a>文件清理策略</h4><p>Kafka 中默认的日志保存时间为 7 天，可以通过调整如下参数修改保存时间:</p><blockquote><p>log.retention.hours， 最低优先级小时，默认 7 天。  </p><p>log.retention.minutes， 分钟。  </p><p>log.retention.ms， 最高优先级毫秒。  </p><p>log.retention.check.interval.ms， 负责设置检查周期，默认 5 分钟。  </p></blockquote><p>Kafka 中提供的<strong>日志清理策略</strong>有 <strong>delete</strong> 和 <strong>compact</strong> 两种。  </p><p><strong>delete 日志删除</strong>：</p><p>将过期数据删除  </p><blockquote><p>log.cleanup.policy &#x3D; delete 所有数据启用删除策略  </p><ol><li>基于时间：默认打开。 以 segment 中所有记录中的最大时间戳作为该文件时间戳。  </li><li>基于大小：默认关闭。超过设置的所有日志总大小，删除最早的 segment。 log.retention.bytes，默认等于-1，表示无穷大。</li></ol></blockquote><p><strong>compact 日志压缩</strong>：  </p><p>对于相同key的不同value值， 只保留最后一个版本。  </p><p>log.cleanup.policy &#x3D; compact 所有数据启用压缩策略  </p><p>压缩前：</p><table><thead><tr><th>Offset</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>key</td><td>K1</td><td>K2</td><td>K1</td><td><strong>K1</strong></td><td><strong>K3</strong></td><td><strong>K4</strong></td><td>K5</td><td><strong>K5</strong></td><td><strong>K2</strong></td></tr><tr><td>value</td><td>V1</td><td>V2</td><td>V3</td><td>V4</td><td>V5</td><td>V6</td><td>V7</td><td>V8</td><td>V9</td></tr></tbody></table><p>压缩后：</p><table><thead><tr><th>Offset</th><th>3</th><th>4</th><th>5</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>key</td><td><strong>K1</strong></td><td><strong>K3</strong></td><td><strong>K4</strong></td><td><strong>K5</strong></td><td><strong>K2</strong></td></tr><tr><td>value</td><td>V4</td><td>V5</td><td>V6</td><td>V8</td><td>V9</td></tr></tbody></table><p>压缩后的offset可能是不连续的， 比如上图中没有6， 当从这些offset(6)消费消息时， 将会拿到比这个offset大的offset(7)对应的消息， 实际上会拿到offset为7的消息， 并从这个位置开始消费。  </p><p>这种策略只适合特殊场景， 比如消息的key是用户ID， value是用户的资料， 通过这种压缩策略， 整个消息集里就保存了所有用户最新的资料。  </p><h3 id="高效读写数据"><a href="#高效读写数据" class="headerlink" title="高效读写数据"></a>高效读写数据</h3><ol><li>Kafka 本身是分布式集群，可以采用分区技术，并行度高  </li><li>读数据采用稀疏索引， 可以快速定位要消费的数据  </li><li>顺序写磁盘  (追加)</li><li>页缓存 + 零拷贝技术</li></ol><h4 id="页缓存-零拷贝技术"><a href="#页缓存-零拷贝技术" class="headerlink" title="页缓存 + 零拷贝技术"></a>页缓存 + 零拷贝技术</h4><p>零拷贝：Kafka的数据加工处理操作交由Kafka生产者和Kafka消费者处理。 Kafka Broker应用层不关心存储的数据， 所以就不用走应用层， 传输效率高。  </p><p>PageCache页缓存： Kafka重度依赖底层操作系统提供的PageCache功能。 当上层有写操作时， 操作系统只是将数据写入PageCache。 当读操作发生时， 先从PageCache中查找， 如果找不到， 再去磁盘中读取。 实际上PageCache是把尽可能多的空闲内存都当做了磁盘缓存来使用。  </p><p><img src="/2022/07/17/Kafka/image-20220721144904818.png" alt="页缓存 + 零拷贝技术"></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>log.flush.interval.messages</td><td>强制页缓存刷写到磁盘的条数，默认是 long 的最大值， 9223372036854775807。 一般不建议修改，交给系统自己管 理。</td></tr><tr><td>log.flush.interval.ms</td><td>每隔多久，刷数据到磁盘，默认是 null。一般不建议修改， 交给系统自己管理。</td></tr></tbody></table><h3 id="Kafka-消费者"><a href="#Kafka-消费者" class="headerlink" title="Kafka 消费者"></a>Kafka 消费者</h3><p>Kafka 消费方式  </p><p>pull（ 拉） 模式：  </p><blockquote><p>consumer采用从broker中主动拉取数据。  （<strong>Kafka采用这种方式。</strong>  ）</p></blockquote><p>push（推）模式：  </p><blockquote><p>Kafka没有采用这种方式，因为由broker决定消息发送速率， 很难适应所有消费者的<br>消费速率。 例如推送的速度是50m&#x2F;s，Consumer1、 Consumer2就来不及处理消息。  </p></blockquote><p>pull模式不足之处是， 如果Kafka没有数据， 消费者可能会陷入循环中， 一直返回空数据。  </p><h4 id="Kafka-消费者总体工作流程"><a href="#Kafka-消费者总体工作流程" class="headerlink" title="Kafka 消费者总体工作流程"></a>Kafka 消费者总体工作流程</h4><p><img src="/2022/07/17/Kafka/image-20220721153317187.png" alt="consumer working procedure"></p><h4 id="消费者组原理"><a href="#消费者组原理" class="headerlink" title="消费者组原理"></a>消费者组原理</h4><p><strong>消费者组</strong>  </p><p><strong>Consumer Group（CG）</strong> ：消费者组， 由多个consumer组成。 形成一个消费者组的条件， 是所有消费者的groupid相同。  </p><blockquote><p>消费者<strong>组内</strong>每个消费者负责消费不同分区的数据， <strong>一个分区只能由一个组内消费者消费</strong>。  </p><p>消费者组之间互不影响。 所有的消费者都属于某个消费者组， 即消费者组是逻辑上的一个订阅者。  </p><p>如果向消费组中添加更多的消费者， 超过主题分区数量， 则有一部分消费者就会闲置， 不会接收任何消息。  </p></blockquote><p><strong>消费者组初始化流程</strong></p><p><img src="/2022/07/17/Kafka/image-20220721155647476.png" alt="consumer group initial procedure"></p><ol><li><p>coordinator：辅助实现消费者组的初始化和分区的分配。  </p><blockquote><p>coordinator节点选择 &#x3D; groupid的hashcode值 % 50（___consumer_offsets的分区数量）例如： groupid的hashcode值 &#x3D; 1， 1% 50 &#x3D; 1，那么 __consumer_offsets topic 的1号分区，哪个broker上，就选择这个节点的coordinator作为这个消费者组的老大。消费者组下的所有的消费者提交offset的时候就往这个分区去提交offset。  （每个消费者的offset由消费者提交到系统主题保存 ）</p></blockquote></li></ol><p><strong>消费者组详细消费流程</strong>  </p><p><img src="/2022/07/17/Kafka/image-20220721164251758.png" alt="consumer group consuming procedure"></p><p><strong>消费者重要参数</strong>  </p><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>bootstrap.servers</td><td>向 Kafka 集群建立初始连接用到的 host&#x2F;port 列表。</td></tr><tr><td>key.deserializer 和 value.deserializer</td><td>指定接收消息的 key 和 value 的反序列化类型。一定要写全 类名。</td></tr><tr><td>group.id</td><td>标记消费者所属的消费者组。</td></tr><tr><td>enable.auto.commit</td><td><strong>默认值为 true</strong>，消费者会自动周期性地向服务器提交偏移 量。</td></tr><tr><td>auto.commit.interval.ms</td><td>如果设置了 enable.auto.commit 的值为 true， 则该值定义了 消费者偏移量向 Kafka 提交的频率， <strong>默认 5s</strong>。</td></tr><tr><td>auto.offset.reset</td><td>当 Kafka 中没有初始偏移量或当前偏移量在服务器中不存在 （如，数据被删除了），该如何处理？ earliest：自动重置偏 移量到最早的偏移量。 <strong>latest： 默认， 自动重置偏移量为最 新的偏移量。</strong> none：如果消费组原来的（ previous）偏移量 不存在，则向消费者抛异常。 anything：向消费者抛异常。</td></tr><tr><td>offsets.topic.num.partitions</td><td>__consumer_offsets 的分区数， <strong>默认是 50 个分区。</strong></td></tr><tr><td>heartbeat.interval.ms</td><td>Kafka 消费者和 coordinator 之间的心跳时间， <strong>默认 3s</strong>。 该条目的值必须小于 session.timeout.ms ，也不应该高于 session.timeout.ms 的 1&#x2F;3。</td></tr><tr><td>session.timeout.ms</td><td>Kafka 消费者和 coordinator 之间连接超时时间， <strong>默认 45s。</strong> 超过该值，该消费者被移除，消费者组执行再平衡。</td></tr><tr><td>max.poll.interval.ms</td><td>消费者处理消息的最大时长， <strong>默认是 5 分钟</strong>。超过该值，该 消费者被移除，消费者组执行再平衡。</td></tr><tr><td>fetch.min.bytes</td><td><strong>默认 1 个字节</strong>。消费者获取服务器端一批消息最小的字节数。</td></tr><tr><td>fetch.max.wait.ms</td><td><strong>默认 500ms</strong>。如果没有从服务器端获取到一批数据的最小字 节数。该时间到，仍然会返回数据。</td></tr><tr><td>fetch.max.bytes</td><td><strong>默认 Default: 52428800（ 50 m）</strong>。消费者获取服务器端一批消息最大的字节数。如果服务器端一批次的数据大于该值 （50m）仍然可以拉取回来这批数据，因此，这不是一个绝 对最大值。一批次的大小受 message.max.bytes （ broker config） or max.message.bytes （topic config） 影响。</td></tr><tr><td>max.poll.records</td><td>一次 poll 拉取数据返回消息的最大条数， <strong>默认是 500 条。</strong></td></tr></tbody></table><h4 id="分区的分配以及再平衡（针对消费者组）"><a href="#分区的分配以及再平衡（针对消费者组）" class="headerlink" title="分区的分配以及再平衡（针对消费者组）"></a>分区的分配以及再平衡（针对消费者组）</h4><ol><li>一个consumer group中有多个consumer组成， 一个 topic有多个partition组成， 现在的问题是， 到底由哪个consumer来消费哪个partition的数据。  </li><li>Kafka有四种主流的分区分配策略： <strong>Range、 RoundRobin、 Sticky、 CooperativeSticky</strong>。可以通过配置参数partition.assignment.strategy，修改分区的分配策略。默认策略是Range + CooperativeSticky。 <strong>Kafka可以同时使用多个分区分配策略</strong>。</li></ol><p><strong>参数配置</strong></p><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>heartbeat.interval.ms</td><td>Kafka 消费者和 coordinator 之间的心跳时间， <strong>默认 3s</strong>。 该条目的值必须小于 session.timeout.ms，也不应该高于 session.timeout.ms 的 1&#x2F;3。</td></tr><tr><td>session.timeout.ms</td><td>Kafka 消费者和 coordinator 之间连接超时时间， <strong>默认 45s</strong>。超 过该值，该消费者被移除，消费者组执行再平衡。</td></tr><tr><td>max.poll.interval.ms</td><td>消费者处理消息的最大时长， <strong>默认是 5 分钟</strong>。超过该值，该 消费者被移除，消费者组执行再平衡。</td></tr><tr><td>partition.assignment.strategy</td><td>消 费 者 分 区 分 配 策 略 ， 默 认 策 略 是 Range + CooperativeSticky。 Kafka 可以同时使用多个分区分配策略。 可 以 选 择 的 策 略 包 括 ： Range 、 RoundRobin 、 Sticky 、 CooperativeSticky</td></tr></tbody></table><h4 id="Range-以及再平衡"><a href="#Range-以及再平衡" class="headerlink" title="Range 以及再平衡"></a>Range 以及再平衡</h4><p><strong>Range 分区策略原理</strong>  </p><img src="/2022/07/17/Kafka/image-20220722135756851.png" alt="Range" style="zoom:50%;"><p><strong>Range</strong> 是对<strong>每个 topic</strong> 而言的。  </p><blockquote><p>首先对<strong>同一个 topic 里面的分区按照序号进行排序</strong>，并对<strong>消费者按照字母顺序进行排序</strong>。  </p><p>假如现在有 7 个分区， 3 个消费者，排序后的分区将会是0,1,2,3,4,5,6；消费者排序完之后将会是C0,C1,C2。  </p><p>通过 <strong>partitions数&#x2F;consumer数</strong> 来决定每个消费者应该消费几个分区。 <strong>如果除不尽，那么前面几个消费者将会多消费 1 个分区。</strong>  </p><p>例如， 7&#x2F;3 &#x3D; 2 余 1 ，除不尽，那么 消费者 C0 便会多消费 1 个分区。 8&#x2F;3&#x3D;2余2，除不尽，那么C0和C1分别多消费一个。  </p><p><strong>注意</strong>： 如果只是针对 1 个 topic 而言， C0消费者多消费1个分区影响不是很大。但是如果有 N 多个 topic，那么针对每个 topic，消费者 C0都将多消费 1 个分区， topic越多， C0消费的分区会比其他消费者明显多消费 N 个分区。</p><p><strong>容易产生数据倾斜！</strong>  </p></blockquote><p><strong>Range 分区分配策略案例</strong>  </p><ol><li><p>修改主题 first 为 7 个分区。  <strong>注意</strong>：分区数可以增加，但是不能减少。  </p></li><li><p>复制 CustomConsumer 类， 创建 CustomConsumer2。这样可以由三个消费者 CustomConsumer、 CustomConsumer1、 CustomConsumer2 组成消费者组，组名都为“ test”，同时启动 3 个消费者。  </p></li><li><p>启动 CustomProducer 生产者，发送 500 条消息，随机发送到不同的分区。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.kafka.producer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomProducer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;hadoop102:9092&quot;</span>);<br>        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());<br>        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());<br>        KafkaProducer&lt;String, String&gt; kafkaProducer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;&gt;(properties);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>            kafkaProducer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(<span class="hljs-string">&quot;first&quot;</span>, i, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;atguigu&quot;</span>));<br>        &#125;<br>        kafkaProducer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明</strong>： Kafka 默认的分区分配策略就是 Range + CooperativeSticky， 所以不需要修改策略。</p></li></ol><p><strong>Range 分区分配再平衡案例</strong>  </p><ol><li><p>停止掉 0 号消费者， 快速重新发送消息观看结果（45s 以内，越快越好）。  </p><blockquote><p>1 号消费者：消费到 3、 4 号分区数据。  </p><p>2 号消费者：消费到 5、 6 号分区数据。  </p><p>0 号消费者的任务会整体被分配到 1 号消费者或者 2 号消费者  。</p><p><strong>说明</strong>： 0 号消费者挂掉后，消费者组需要按照<strong>超时时间 45s 来判断它是否退出</strong>，所以需要等待，时间到了 45s 后，判断它真的退出就会把任务分配给其他 broker 执行。  </p></blockquote></li><li><p>再次重新发送消息观看结果（45s 以后）。  </p><blockquote><p>1 号消费者：消费到 0、 1、 2、 3 号分区数据。  </p><p>2 号消费者：消费到 4、 5、 6 号分区数据  </p><p><strong>说明</strong>：消费者 0 已经被踢出消费者组，所以重新按照 range 方式分配。</p></blockquote></li></ol><h4 id="RoundRobin-以及再平衡"><a href="#RoundRobin-以及再平衡" class="headerlink" title="RoundRobin 以及再平衡"></a>RoundRobin 以及再平衡</h4><p><strong>RoundRobin</strong> 针对集群中<strong>所有Topic</strong>而言。  </p><p>RoundRobin 轮询分区策略，是把<strong>所有的 partition</strong> 和<strong>所有的 consumer</strong>（？同一个消费者组） 都列出来，然后按照 hashcode 进行排序，最后通过轮询算法来分配 partition 给到各个消费者。  </p><img src="/2022/07/17/Kafka/image-20220722135855563.png" alt="RoundRobin" style="zoom:50%;"><p><strong>RoundRobin 分区分配策略案例</strong>  </p><ol><li><p>依次在 CustomConsumer、 CustomConsumer1、 CustomConsumer2 三个消费者代码中修改分区分配策略为 RoundRobin。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改分区分配策略</span><br>properties.put(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG, <span class="hljs-string">&quot;org.apache.kafka.clients.consumer.RoundRobinAssignor&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>重启 3 个消费者，重复发送消息的步骤，观看分区结果。</p></li></ol><p><strong>RoundRobin 分区分配再平衡案例</strong>  </p><ol><li><p>停止掉 0 号消费者，快速重新发送消息观看结果（45s 以内，越快越好）。  </p><blockquote><p>1 号消费者：消费到 2、 5 号分区数据  </p><p>2 号消费者：消费到 4、 1 号分区数据  </p><p>0 号消费者的任务会按照 <strong>RoundRobin</strong> 的方式，把数据轮询分成 0 、 6 和 3 号分区数据，分别由 1 号消费者或者 2 号消费者消费。  </p><p>说明： 0 号消费者挂掉后，消费者组需要按照超时时间 45s 来判断它是否退出，所以需<br>要等待，时间到了 45s 后，判断它真的退出就会把任务分配给其他 broker 执行。  </p></blockquote></li><li><p>再次重新发送消息观看结果（45s 以后）。  </p><blockquote><p>1 号消费者：消费到 0、 2、 4、 6 号分区数据  </p><p>2 号消费者：消费到 1、 3、 5 号分区数据  </p><p>说明：消费者 0 已经被踢出消费者组，所以重新按照 RoundRobin 方式分配。</p></blockquote></li></ol><h4 id="Sticky-以及再平衡"><a href="#Sticky-以及再平衡" class="headerlink" title="Sticky 以及再平衡"></a>Sticky 以及再平衡</h4><p><strong>粘性分区定义</strong>： 可以理解为分配的结果带有“粘性的”。即在执行一次新的分配之前，考虑上一次分配的结果，<strong>尽量少的调整分配的变动，可以节省大量的开销</strong>。  </p><p>粘性分区是 Kafka 从 0.11.x 版本开始引入这种分配策略， <strong>首先会尽量均衡的放置分区到消费者上面</strong>，在出现<strong>同一消费者组内消费者</strong>出现问题的时候，<strong>会尽量保持原有分配的分区不变化</strong>。  </p><ol><li><p>设置主题为 first， 7 个分区；准备 3 个消费者，采用粘性分区策略，并进行消费，观察消费分配情况。然后再停止其中一个消费者，再次观察消费分配情况。  </p></li><li><p>修改分区分配策略为粘性。  </p><blockquote><p>注意： 3 个消费者都应该注释掉，之后重启 3 个消费者，如果出现报错，全部停止等会再重启，或者修改为全新的消费者组。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改分区分配策略</span><br>ArrayList&lt;String&gt; startegys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>startegys.add(<span class="hljs-string">&quot;org.apache.kafka.clients.consumer.StickyAssignor&quot;</span>);<br>properties.put(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG, startegys);<br></code></pre></td></tr></table></figure></li><li><p>使用同样的生产者发送 500 条消息。  </p><blockquote><p>可以看到会尽量保持分区的个数近似划分分区。</p></blockquote></li></ol><p><strong>Sticky 分区分配再平衡案例</strong>  </p><ol><li><p>停止掉 0 号消费者，快速重新发送消息观看结果（45s 以内，越快越好）。  </p><blockquote><p>1 号消费者：消费到 2、 5、 3 号分区数据。  </p><p>2 号消费者：消费到 4、 6 号分区数据。  </p><p>0 号消费者的任务会按照粘性规则，尽可能均衡的随机分成 0 和 1 号分区数据，分别由 1 号消费者或者 2 号消费者消费。  </p><p><strong>说明</strong>： 0 号消费者挂掉后，消费者组需要按照超时时间 45s 来判断它是否退出，所以需要等待，时间到了 45s 后，判断它真的退出就会把任务分配给其他 broker 执行  </p></blockquote></li><li><p>再次重新发送消息观看结果（45s 以后）。  </p><blockquote><p>1 号消费者：消费到 2、 3、 5 号分区数据。  </p><p>2 号消费者：消费到 0、 1、 4、 6 号分区数据。  </p><p><strong>说明</strong>：消费者 0 已经被踢出消费者组，所以重新按照粘性方式分配。</p></blockquote></li></ol><h3 id="offset-位移"><a href="#offset-位移" class="headerlink" title="offset 位移"></a>offset 位移</h3><p>Kafka0.9版本之前，consumer默认将offset保存在Zookeeper中，从0.9版本开始， <strong>consumer默认将offset保存在Kafka一个内置的topic中，该topic为__consumer_offsets</strong>。</p><p><strong>__consumer_offsets 主题里面采用 key 和 value 的方式存储数据</strong>。 <strong>key 是 group.id+topic+分区号， value 就是当前 offset 的值</strong>。 <strong>每隔一段时间， kafka 内部会对这个 topic 进行 compact，也就是每个 group.id+topic+分区号就保留最新数据。</strong>  </p><p><strong>消费 offset 案例</strong></p><blockquote><ol start="0"><li><p><strong>思想</strong>：__consumer_offsets 为 Kafka 中的 topic，那就可以通过消费者进行消费。  </p></li><li><p>在配置文件 config&#x2F;consumer.properties 中添加配置 exclude.internal.topics&#x3D;false，默认是 true，表示不能消费系统主题。为了查看该系统主题数据，所以该参数修改为 false。</p></li><li><p>采用命令行方式， 创建一个新的 topic。</p></li></ol>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[test@hadoop102 kafka]</span>$ bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--bootstrap-server</span> hadoop102:<span class="hljs-number">9092</span> <span class="hljs-attr">--create</span> <span class="hljs-attr">--topic</span> test <span class="hljs-attr">--partitions</span> <span class="hljs-number">2</span> <span class="hljs-attr">--replication-factor</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>启动生产者往 test 生产数据。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">[<span class="hljs-keyword">test</span>@hadoop102 kafka]$ bin/kafka-console-producer.<span class="hljs-keyword">sh</span> --topic <span class="hljs-keyword">test</span> --<span class="hljs-keyword">bootstrap</span>-server hadoop102:9092<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：指定消费者组名称，更好观察数据存储位置（key 是 group.id+<strong>topic</strong>+分区号）。  </p></li><li><p>查看消费者消费主题__consumer_offsets。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[test@hadoop102 kafka]$ bin/kafka-console-consumer.sh --topic __consumer_offsets --bootstrap-server hadoop102:9092 --consumer.config config/consumer.properties --formatter <span class="hljs-string">&quot;kafka.coordinator.group.GroupMetadataManager\$OffsetsMessageFormatter&quot;</span> --from-beginning<br><br>[offset,test,1]::OffsetAndMetadata(<span class="hljs-attribute">offset</span>=7,<br><span class="hljs-attribute">leaderEpoch</span>=Optional[0], <span class="hljs-attribute">metadata</span>=, <span class="hljs-attribute">commitTimestamp</span>=1622442520203,<br><span class="hljs-attribute">expireTimestamp</span>=None)<br>[offset,test,0]::OffsetAndMetadata(<span class="hljs-attribute">offset</span>=8,<br><span class="hljs-attribute">leaderEpoch</span>=Optional[0], <span class="hljs-attribute">metadata</span>=, <span class="hljs-attribute">commitTimestamp</span>=1622442520203,<br><span class="hljs-attribute">expireTimestamp</span>=None)<br></code></pre></td></tr></table></figure></li></ol></blockquote><h4 id="自动提交-offset"><a href="#自动提交-offset" class="headerlink" title="自动提交 offset"></a>自动提交 offset</h4><p>为了使我们能够专注于自己的业务逻辑， Kafka提供了自动提交offset的功能。<br>自动提交offset的<strong>相关参数</strong>：  </p><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>enable.auto.commit</td><td><strong>默认值为 true</strong>，消费者会自动周期性地向服务器提交偏移量。</td></tr><tr><td>auto.commit.interval.ms</td><td>如果设置了 enable.auto.commit 的值为 true， 则该值定义了消 费者偏移量向 Kafka 提交的频率， <strong>默认 5s</strong>。</td></tr></tbody></table><p><img src="/2022/07/17/Kafka/image-20220722145046430.png" alt="auto-commit offsets"></p><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.kafka.consumer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomConsumerAutoOffset</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <br>        <span class="hljs-comment">// 1. 创建 kafka 消费者配置类</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-comment">// 2. 添加配置参数</span><br>   <span class="hljs-comment">// 添加连接</span><br>    properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;hadoop102:9092&quot;</span>);<br>    <span class="hljs-comment">// 配置序列化 必须</span><br>    properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>    properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>    <span class="hljs-comment">// 配置消费者组</span><br>properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-comment">// 是否自动提交 offset</span><br>properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 提交 offset 的时间周期 1000ms，默认 5s</span><br>properties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="hljs-number">1000</span>);<br><span class="hljs-comment">//3. 创建 kafka 消费者</span><br>KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;&gt;(properties);<br><span class="hljs-comment">//4. 设置消费主题 形参是列表</span><br>consumer.subscribe(Arrays.asList(<span class="hljs-string">&quot;first&quot;</span>));<br><span class="hljs-comment">//5. 消费数据</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-comment">// 读取消息</span><br>ConsumerRecords&lt;String, String&gt; consumerRecords = consumer.poll(Duration.ofSeconds(<span class="hljs-number">1</span>));<br><span class="hljs-comment">// 输出消息</span><br><span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;<br>System.out.println(consumerRecord.value());<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="手动提交-offset"><a href="#手动提交-offset" class="headerlink" title="手动提交 offset"></a>手动提交 offset</h4><p>虽然自动提交offset十分简单便利， 但由于其是基于时间提交的， 开发人员难以把握offset提交的时机。 因此Kafka还提供了手动提交offset的API。</p><p><img src="/2022/07/17/Kafka/image-20220722152354972.png" alt="commit offset by hand">  </p><p>手动提交offset的方法有两种：分别是<strong>commitSync（ 同步提交）</strong> 和<strong>commitAsync（ 异步提交）</strong> 。 </p><blockquote><p><strong>两者的相同点</strong>：都会将本次<strong>提交</strong>的<strong>一批数据最高的偏移量</strong>提交；</p><p><strong>不同点</strong>： 同步提交阻塞当前线程， 一直到提交成功， 并且会自动失败重试（由不可控因素导致， 也会出现提交失败） ；而异步提交则没有失败重试机制， 故有可能提交失败。  </p></blockquote><p><strong>同步提交 offset</strong></p><p> 由于同步提交 offset 有失败重试机制，故更加可靠， 但是由于一直等待提交结果，提交的效率比较低。 以下为同步提交 offset 的示例。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.kafka.consumer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomConsumerByHandSync</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 创建 kafka 消费者配置类</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">// 2. 添加配置参数</span><br>        <span class="hljs-comment">// 添加连接</span><br>        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;hadoop102:9092&quot;</span>);<br>        <span class="hljs-comment">// 配置序列化 必须</span><br>        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        <span class="hljs-comment">// 配置消费者组</span><br>        properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-comment">// 是否自动提交 offset</span><br>properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">//3. 创建 kafka 消费者</span><br>KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;&gt;(properties);<br><span class="hljs-comment">//4. 设置消费主题 形参是列表</span><br>consumer.subscribe(Arrays.asList(<span class="hljs-string">&quot;first&quot;</span>));<br><span class="hljs-comment">//5. 消费数据</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-comment">// 读取消息</span><br>ConsumerRecords&lt;String, String&gt; consumerRecords = consumer.poll(Duration.ofSeconds(<span class="hljs-number">1</span>));<br><span class="hljs-comment">// 输出消息</span><br><span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;<br>System.out.println(consumerRecord.value());<br>&#125;<br><span class="hljs-comment">// 同步提交 offset</span><br>consumer.commitSync();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>异步提交 offset</strong>  </p><p>虽然<strong>同步提交 offset 更可靠</strong>一些，但是由于其会阻塞当前线程，直到提交成功。因此<strong>吞吐量会受到很大的影响</strong>。因此更多的情况下，会选用异步提交 offset 的方式。  </p><p>以下为异步提交 offset 的示例：  </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.test.kafka.consumer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomConsumerByHandSync</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        <span class="hljs-comment">// 1. 创建 kafka 消费者配置类</span><br>        Properties properties = <span class="hljs-keyword">new</span> <span class="hljs-type">Properties</span>();<br>        <span class="hljs-comment">// 2. 添加配置参数</span><br>        <span class="hljs-comment">// 添加连接</span><br>        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;hadoop102:9092&quot;</span>);<br>        <span class="hljs-comment">// 配置序列化 必须</span><br>        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        <span class="hljs-comment">// 配置消费者组</span><br>        properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-comment">// 是否自动提交 offset</span><br>properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">//3. 创建 kafka 消费者</span><br>KafkaConsumer&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-type">KafkaConsumer</span>&lt;&gt;(properties);<br><span class="hljs-comment">//4. 设置消费主题 形参是列表</span><br>consumer.subscribe(Arrays.asList(<span class="hljs-string">&quot;first&quot;</span>));<br><span class="hljs-comment">//5. 消费数据</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-comment">// 读取消息</span><br>ConsumerRecords&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt; consumerRecords = consumer.poll(Duration.ofSeconds(<span class="hljs-number">1</span>));<br><span class="hljs-comment">// 输出消息</span><br><span class="hljs-keyword">for</span> (ConsumerRecord&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt; consumerRecord : <span class="hljs-type">consumerRecords</span>) &#123;<br>System.out.println(consumerRecord.value());<br>&#125;<br><span class="hljs-comment">// 同步提交 offset</span><br>consumer.commitAsync();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>指定 Offset 消费</strong>  </p><p>auto.offset.reset &#x3D; earliest | latest | none 默认是 latest。  </p><p>当 Kafka 中没有初始偏移量（消费者组第一次消费）或服务器上不再存在当前偏移量时（例如该数据已被删除），该怎么办？  </p><blockquote><ol><li>earliest：自动将偏移量重置为最早的偏移量， –from-beginning。  </li><li>latest（默认值）：自动将偏移量重置为最新偏移量。  </li><li>none：如果未找到消费者组的先前偏移量，则向消费者抛出异常。</li></ol></blockquote><p>任意指定 offset 位移开始消费  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.kafka.consumer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;<br><span class="hljs-keyword">import</span> org.apache.kafka.common.TopicPartition;<br><span class="hljs-keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;<br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomConsumerSeek</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 0 配置信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">// 连接</span><br>        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;hadoop102:9092&quot;</span>);<br>        <span class="hljs-comment">// key value 反序列化</span><br>        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());<br>        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());<br>        properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="hljs-string">&quot;test2&quot;</span>);<br>        <span class="hljs-comment">// 1 创建一个消费者</span><br>        KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;&gt;(properties);<br>        <span class="hljs-comment">// 2 订阅一个主题</span><br>        ArrayList&lt;String&gt; topics = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br> topics.add(<span class="hljs-string">&quot;first&quot;</span>);<br>        kafkaConsumer.subscribe(topics);<br>        Set&lt;TopicPartition&gt; assignment= <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>      <span class="hljs-keyword">while</span> (assignment.size() == <span class="hljs-number">0</span>) &#123;<br>        kafkaConsumer.poll(Duration.ofSeconds(<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">// 获取消费者分区分配信息（有了分区分配信息才能开始消费）</span><br>        assignment = kafkaConsumer.assignment();<br>        &#125;<br>        <span class="hljs-comment">// 遍历所有分区，并指定 offset 从 1700 的位置开始消费</span><br>        <span class="hljs-keyword">for</span> (TopicPartition tp: assignment) &#123;<br>        kafkaConsumer.seek(tp, <span class="hljs-number">1700</span>);<br>        &#125;<br>        <span class="hljs-comment">// 3 消费该主题数据</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>ConsumerRecords&lt;String, String&gt; consumerRecords = kafkaConsumer.poll(Duration.ofSeconds(<span class="hljs-number">1</span>));<br><span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;<br>System.out.println(consumerRecord);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：每次执行完，需要修改消费者组名；  </p><p><strong>指定时间消费</strong>  </p><p>需求：在生产环境中，会遇到最近消费的几个小时数据异常，想重新按照时间消费。例如要求按照时间消费前一天的数据，怎么处理？  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.kafka.consumer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;<br><span class="hljs-keyword">import</span> org.apache.kafka.common.TopicPartition;<br><span class="hljs-keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;<br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomConsumerSeek</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 0 配置信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">// 连接</span><br>        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;hadoop102:9092&quot;</span>);<br>        <span class="hljs-comment">// key value 反序列化</span><br>        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());<br>        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());<br>        properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="hljs-string">&quot;test2&quot;</span>);<br>        <span class="hljs-comment">// 1 创建一个消费者</span><br>        KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;&gt;(properties);<br>        <span class="hljs-comment">// 2 订阅一个主题</span><br>        ArrayList&lt;String&gt; topics = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br> topics.add(<span class="hljs-string">&quot;first&quot;</span>);<br>        kafkaConsumer.subscribe(topics);<br>        Set&lt;TopicPartition&gt; assignment= <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (assignment.size() == <span class="hljs-number">0</span>) &#123;<br>            kafkaConsumer.poll(Duration.ofSeconds(<span class="hljs-number">1</span>));<br>            <span class="hljs-comment">// 获取消费者分区分配信息（有了分区分配信息才能开始消费）</span><br>            assignment = kafkaConsumer.assignment();<br>        &#125;<br>        HashMap&lt;TopicPartition, Long&gt; timestampToSearch = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            <span class="hljs-comment">// 封装集合存储，每个分区对应一天前的数据</span><br>        <span class="hljs-keyword">for</span> (TopicPartition topicPartition : assignment) &#123;<br>            timestampToSearch.put(topicPartition, System.currentTimeMillis() - <span class="hljs-number">1</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>);<br>         &#125;<br>         <span class="hljs-comment">// 获取从 1 天前开始消费的每个分区的 offset</span><br>         Map&lt;TopicPartition, OffsetAndTimestamp&gt; offsets = kafkaConsumer.offsetsForTimes(timestampToSearch);<br>         <span class="hljs-comment">// 遍历每个分区，对每个分区设置消费时间。</span><br>         <span class="hljs-keyword">for</span> (TopicPartition topicPartition : assignment) &#123;<br>            <span class="hljs-type">OffsetAndTimestamp</span> <span class="hljs-variable">offsetAndTimestamp</span> <span class="hljs-operator">=</span> offsets.get(topicPartition);<br>             <span class="hljs-comment">// 根据时间指定开始消费的位置</span><br>             <span class="hljs-keyword">if</span> (offsetAndTimestamp != <span class="hljs-literal">null</span>)&#123;<br>                kafkaConsumer.seek(topicPartition, offsetAndTimestamp.offset());<br>             &#125;<br>        &#125;<br>        <span class="hljs-comment">// 3 消费该主题数据</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>ConsumerRecords&lt;String, String&gt; consumerRecords = kafkaConsumer.poll(Duration.ofSeconds(<span class="hljs-number">1</span>));<br><span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;<br>System.out.println(consumerRecord);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="漏消费和重复消费"><a href="#漏消费和重复消费" class="headerlink" title="漏消费和重复消费"></a>漏消费和重复消费</h4><p><strong>重复消费</strong>： 已经消费了数据，但是 offset 没提交。</p><p><strong>漏消费</strong>： 先提交 offset 后消费，有可能会造成数据的漏消费。  </p><p>场景1： 重复消费。 自动提交offset引起 （对一个消息接受的ack并未收到）。  </p><p><img src="/2022/07/17/Kafka/image-20220722153753393.png" alt="Consuming error"></p><p>场景2： 漏消费。 设置offset为手动提交， 当offset被提交时， 数据还在内存中未落盘， 此时刚好消费者线程被kill掉， 那么offset已经提交， 但是数据未处理， 导致这部分内存中的数据丢失。  </p><p>既不漏消费也不重复消费 ？<strong>消费者事务</strong></p><h3 id="生产经验"><a href="#生产经验" class="headerlink" title="生产经验"></a>生产经验</h3><h4 id="消费者事务"><a href="#消费者事务" class="headerlink" title="消费者事务"></a>消费者事务</h4><p>如果想完成Consumer端的精准一次性消费， 那么需要Kafka消费端将消费过程和提交offset 过程做原子绑定。 此时我们需要将Kafka的offset保存到支持事务的自定义介质（ 比如 MySQL） 。  </p><p><img src="/2022/07/17/Kafka/image-20220722154636913.png" alt="consumer transaction"></p><h4 id="数据积压（消费者如何提高吞吐量）"><a href="#数据积压（消费者如何提高吞吐量）" class="headerlink" title="数据积压（消费者如何提高吞吐量）"></a>数据积压（消费者如何提高吞吐量）</h4><ol><li>如果是Kafka消费能力不足， 则可以<strong>考虑增加Topic的分区数</strong>， 并且同时提升消费组的消费者数量， <strong>消费者数 &#x3D; 分区数</strong>。 （两者缺一不可）</li><li>如果是下游的数据处理不及时： <strong>提高每批次拉取的数量</strong>。 批次拉取数据过少（拉取数据&#x2F;处理时间 &lt; 生产速度） ，使处理的数据小于生产的数据， 也会造成数据积压。</li></ol><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>fetch.max.bytes</td><td>默认 Default: 52428800（50 m）。消费者获取服务器端一批 消息最大的字节数。如果服务器端一批次的数据大于该值 （50m）仍然可以拉取回来这批数据，因此，这不是一个绝 对最大值。一批次的大小受 message.max.bytes （broker config） or max.message.bytes （topic config）影响。</td></tr><tr><td>max.poll.records</td><td>一次 poll 拉取数据返回消息的最大条数， 默认是 500 条</td></tr></tbody></table><h3 id="Kafka-Kraft-模式"><a href="#Kafka-Kraft-模式" class="headerlink" title="Kafka-Kraft 模式"></a>Kafka-Kraft 模式</h3><p><strong>Kafka 现有架构</strong>， 元数据在 zookeeper 中， 运行时动态选举 controller， 由controller 进行 Kafka 集群管理。   </p><p><strong>kraft 模式架构（实验性）</strong>， 不再依赖 zookeeper 集群，而是用三台 controller 节点代替 zookeeper， 元数据保存在 controller 中， 由 controller 直接进行 Kafka 集群管理。  </p><p>这样做的好处有以下几个：  </p><blockquote><p>Kafka 不再依赖外部框架， 而是能够独立运行；  </p><p>controller 管理集群时， 不再需要从 zookeeper 中先读取数据， 集群性能上升；  </p><p>由于不依赖 zookeeper， 集群扩展时不再受到 zookeeper 读写能力限制；  </p><p>controller 不再动态选举， 而是由配置文件规定。 这样我们可以有针对性的加强 controller 节点的配置， 而不是像以前一样对随机 controller 节点的高负载束手无策。  </p></blockquote><h2 id="总结-补充"><a href="#总结-补充" class="headerlink" title="总结 补充"></a>总结 补充</h2><p><strong>副本数设定</strong></p><blockquote><p>一般我们设置成2个或3个，很多企业设置为2个。</p><p>副本的优势：提高可靠性；副本劣势：增加了网络IO传输</p></blockquote><p><strong>Kafka压测</strong></p><blockquote><p>Kafka官方自带压力测试脚本（kafka-consumer-perf-test.sh、kafka-producer-perf-test.sh）。Kafka压测时，可以查看到哪个地方出现了瓶颈（CPU，内存，网络IO）。一般都是网络IO达到瓶颈。</p></blockquote><p><strong>Kafka日志保存时间</strong></p><blockquote><p>默认保存7天；生产环境建议3天</p></blockquote><p><strong>Kafka中数据量计算</strong></p><blockquote><p>每天总数据量100g，每天产生1亿条日志，10000万&#x2F;24&#x2F;60&#x2F;60&#x3D;1150条&#x2F;每秒钟</p><p>平均每秒钟：1150条</p><p>低谷每秒钟：50条</p><p>高峰每秒钟：1150条 *（2-20倍）&#x3D; 2300条 - 23000条</p><p>每条日志大小：0.5k - 2k（取1k）</p><p>每秒多少数据量：2.0M - 20MB</p></blockquote><p><strong>Kafka的硬盘大小</strong></p><blockquote><p>每天的数据量100g * 2个副本 * 3天 &#x2F; 70%</p></blockquote><p><strong>Kafka监控</strong></p><blockquote><p>公司自己开发的监控器；</p><p>开源的监控器：KafkaManager、KafkaMonitor、KafkaEagle</p></blockquote><p><strong>Kakfa分区数</strong></p><blockquote><ol><li><p>创建一个只有1个分区的topic</p></li><li><p>测试这个topic的producer吞吐量和consumer吞吐量。</p></li><li><p>假设他们的值分别是Tp和Tc，单位可以是MB&#x2F;s。</p></li><li><p>然后假设总的目标吞吐量是Tt，那么分区数&#x3D;Tt &#x2F; min（Tp，Tc）</p><p>例如：producer吞吐量 &#x3D; 20m&#x2F;s；consumer吞吐量 &#x3D; 50m&#x2F;s，期望吞吐量100m&#x2F;s；</p><p>分区数 &#x3D; 100 &#x2F; 20 &#x3D; 5分区</p><p><a href="https://blog.csdn.net/weixin_42641909/article/details/89294698">https://blog.csdn.net/weixin_42641909/article/details/89294698</a></p><p>分区数一般设置为：3-10个</p></li></ol></blockquote><p><strong>多少个Topic</strong></p><blockquote><p>通常情况：多少个日志类型就多少个Topic。也有对日志类型进行合并的。</p></blockquote><p><strong>Kafka挂掉</strong></p><blockquote><ol><li>Flume记录</li><li>日志有记录</li><li>短期没事</li></ol></blockquote><p><strong>Kafka数据重复</strong></p><blockquote><p>幂等性 + ack-1 + 事务</p><p>Kafka数据重复，可以再下一级：SparkStreaming、redis或者Hive中dwd层去重，去重的手段：分组、按照id开窗只取第一个值；</p></blockquote><h4 id="Kafka参数优化"><a href="#Kafka参数优化" class="headerlink" title="Kafka参数优化"></a>Kafka参数优化</h4><ol><li><p><strong>Broker参数配置（server.properties）</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">1</span>、日志保留策略配置<br># 保留三天，也可以更短 （<span class="hljs-built_in">log</span>.cleaner.<span class="hljs-built_in">delete</span>.retention.ms）<br><span class="hljs-built_in">log</span>.retention.hours=<span class="hljs-number">72</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">2</span>、<span class="hljs-keyword">Replica</span>相关配置<br><span class="hljs-keyword">default</span>.<span class="hljs-keyword">replication</span>.factor:<span class="hljs-number">1</span> 默认副本<span class="hljs-number">1</span>个<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">3</span>、网络通信延时<br><span class="hljs-keyword">replica</span>.socket.timeout.ms:<span class="hljs-number">30000</span> #当集群之间网络不稳定时,调大该参数<br><span class="hljs-keyword">replica</span>.lag.time.max.ms= <span class="hljs-number">600000</span># 如果网络不好,或者kafka集群压力较大,会出现副本丢失,然后会频繁复制副本,导致集群压力更大,此时可以调大该参数<br></code></pre></td></tr></table></figure></li><li><p><strong>Producer优化（producer.properties）</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">compression</span>.<span class="hljs-class"><span class="hljs-keyword">type</span>:none                 gzip  snappy  lz4  </span><br><span class="hljs-meta">#默认发送不进行压缩，推荐配置一种适合的压缩算法，可以大幅度的减缓网络压力和Broker的存储压力。</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Kafka内存调整（</strong>kafka-server-start.sh<strong>）</strong></p><p>默认内存1个G，生产环境尽量不要超过6个G。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">KAFKA_HEAP_OPTS</span>=<span class="hljs-string">&quot;-Xms4g -Xmx4g&quot;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>Kafka单条日志传输大小</strong></p><p>Kafka对于消息体的大小默认为单条最大值是1M但是在我们应用场景中，常常会出现一条消息大于1M，如果不对Kafka进行配置。则会出现生产者无法将消息推送到Kafka或消费者无法去消费Kafka里面的数据，这时我们就要对Kafka进行以下配置：server.properties</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">replica</span>.<span class="hljs-keyword">fetch</span>.max.bytes: <span class="hljs-number">1048576</span>  broker可复制的消息的最大字节数, 默认为<span class="hljs-number">1</span>M<br>message.max.bytes: <span class="hljs-number">1000012</span>   kafka 会接收单个消息size的最大限制， 默认为<span class="hljs-number">1</span>M左右<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：message.max.bytes必须小于等于replica.fetch.max.bytes，否则就会导致replica之间数据同步失败。</p><p><strong>Kafka过期数据清理</strong></p><p>保证数据没有被引用（没人消费他）</p><p>日志清理保存的策略只有delete和compact两种</p><p>log.cleanup.policy &#x3D; delete启用删除策略</p><p>log.cleanup.policy &#x3D; compact启用压缩策略</p><p><a href="https://www.jianshu.com/p/fa6adeae8eb5">https://www.jianshu.com/p/fa6adeae8eb5</a></p><p><strong>Kafka消费者角度考虑是拉取数据还是推送数据</strong></p><blockquote><p>拉取数据</p></blockquote><p><strong>Kafka中的数据是有序的吗</strong></p><p>单分区内有序；多分区，分区与分区间无序；</p><p><strong>扩展：</strong></p><p>kafka producer发送消息的时候，可以指定key:</p><img src="/2022/07/17/Kafka/image-20220722161223422.png" alt="key" style="zoom: 100%;"><p>这个key的作用是为消息选择存储分区，key可以为空，当指定key且不为空的时候，Kafka是根据key的hash值与分区数取模来决定数据存储到那个分区。</p><img src="/2022/07/17/Kafka/image-20220722161303892.png" alt="solution" style="zoom:100%;"><p><strong>有序解决方案：同一张表的数据放到同一个分区</strong></p><p>​       &#x3D;&gt; ProducerRecord里传入key，会根据key取hash算出分区号</p><p>​       &#x3D;&gt; key使用表名，如果有库名，拼接上库名</p>]]></content>
    
    
    <categories>
      
      <category>BigData</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDFS</title>
    <link href="/2022/07/14/HDFS-Hdfs/"/>
    <url>/2022/07/14/HDFS-Hdfs/</url>
    
    <content type="html"><![CDATA[<h1 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h1><h2 id="HDFS定义"><a href="#HDFS定义" class="headerlink" title="HDFS定义"></a>HDFS定义</h2><p>Hadoop Distributed File System 在数据量不断激增的情况下，一台普通的主机无法存下海量的数据，需要多个主机来储存，但又出现不方便管理与维护的问题，HDFS 是将该集群抽象成一台主机管理该集群上的文件的文件系统，适用于一次写入多次读出的场景。文件在创建、写入和关闭之后就不再需要被修改了。</p><h2 id="HDFS-优缺点"><a href="#HDFS-优缺点" class="headerlink" title="HDFS 优缺点"></a>HDFS 优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>高容错： 数据自动保存多个副本，提高容错性，当某个副本丢失时，可以自动恢复</li><li>能够处理海量数据： 1） 能够处理单个文件 GB， TB，PB 级别的数据。 2） 也能处理百万文件数量的数据</li><li>可以构建在廉价的机器上</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>不适用于低延迟数据访问： 比如毫秒级的</li><li>无法高效对大量小文件进行存储： 小文件数量过多，其元数据会大量挤占 NameNode 的内存空间，导致其空间不足或者增加大量的寻址时间</li><li>不支持并发写入、文件随意修改： 文件只能由一个线程来写，对于修改仅支持追加</li></ol><h2 id="HDFS-组成架构"><a href="#HDFS-组成架构" class="headerlink" title="HDFS 组成架构"></a>HDFS 组成架构</h2><p><strong>NameNode（nm）</strong>：HDFS 文件管理的 Master</p><ol><li>存储文件的元数据 （包括 文件名，文件目录结构， 文件属性（生成时间，权限，副本数等）等）</li><li>配置副本策略</li><li>管理文件数据块的映射关系</li><li>处理客户端的读写请求</li></ol><p><strong>DataNode</strong>：Slave，执行 NameNode 下达的命令，完成执行的实际操作</p><ol><li>存储实际的数据块</li><li>执行数据块的读写操作</li></ol><p><strong>Client</strong>：</p><ol><li>文件切分。文件上传到 HDFS 之前， Client 将文件切分成一个一个 Block ，然后上传</li><li>于 NameNode 交互获取文件位置信息</li><li>与 DataNode 交互，进行读写操作</li><li>Client 提供一些命令管理 HDFS 如格式化 NameNode</li><li>Client 可以提供一些命令来访问 HDFS， 比如对 HDFS 增删改查</li></ol><p><strong>Secondary NameNode</strong>：并不是 NameNode 的热备。当 NameNode 挂掉时，它并不能马上替代 NameNode 并提供服务</p><ol><li>辅助 NameNode， 分担其工作量，并定期合并 Fsimage  （） 和 Edits （）并推送给 NameNode</li><li>在紧急情况下，可辅助 NameNode 恢复</li></ol><h3 id="HDFS-文件块大小"><a href="#HDFS-文件块大小" class="headerlink" title="HDFS 文件块大小"></a>HDFS 文件块大小</h3><p>HDFS 中的文件在物理上是分块储存（Block），块的大小可以通过配置参数（dfs.blocksize）来设定。 Hadoop 3.x 默认 128 M</p><ol><li>如果寻找时间为 10ms</li><li>某些行业经验建议：寻找时间为传输时间的 1% 为最佳，则传输时间 &#x3D; 10ms&#x2F;0.01 &#x3D; 1s </li><li>目前磁盘的传输速率普遍为 100MB&#x2F;s</li><li>数据大小一般为 2 的次方 则 128M</li></ol><p>为什么块的大小不能太大，也不能太小</p><ol><li>HDFS 块太小会增加寻址时间</li><li>太大磁盘数据传输时间会明显大于寻找时间，导致获取该数据的时间增大</li></ol><p><em><strong>HDFS块的大小设定主要取决于磁盘的传输速率</strong></em></p><h4 id="HDFS-小文件处理"><a href="#HDFS-小文件处理" class="headerlink" title="HDFS 小文件处理"></a>HDFS 小文件处理</h4><ol><li><p>影响</p><p>存储层面</p><blockquote><p>1个文件块占用的 namenode 150 字节</p><p>128 G 能存储的文件块数量 128 * 1024* 1024 * 1024 byte &#x2F;150 &#x3D; 9 亿个文件块</p></blockquote><p>计算层面</p><blockquote><p> 每个小文件都会起一个 MapTask，占用大量计算内存</p></blockquote></li><li><p>解决方法</p><ol><li>采用 har 归档方式，将一个文件下所有文件进行归档，对内还是一个一个小文件，对 NameNode 而言是一个整体，减少 NameNode 的内存</li><li>使用 CombineTextInputFormat</li><li>有小文件场景开启 JVM 重用（处理时间远小于启动 JVM 的时间）； 如果没有小文件，不要开启，因为会一直占用 task 卡槽， 直至任务完成才释放。</li></ol><p>JVM重用可以使得JVM实例在同一个job中重新使用N次，N的值可以在Hadoop的mapred-site.xml文件中进行配置。通常在10-20之间</p></li></ol><h2 id="HDFS-的-shell-操作"><a href="#HDFS-的-shell-操作" class="headerlink" title="HDFS 的 shell 操作"></a>HDFS 的 shell 操作</h2><p>hadoop fs + 具体命令 or hdfs dfs + 具体命令</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">[albert@hadoop102 hadoop-3.1.3]$ bin/hadoop fs<br><br>    [-appendToFile &lt;localsrc&gt; ... &lt;dst&gt;]<br>    [-cat [-ignoreCrc] &lt;src&gt; ...]<br>    [-chgrp [-R] GROUP PATH...]<br>    [-chmod [-R] &lt;MODE[,MODE]... | OCTALMODE&gt; PATH...]<br>    [-chown [-R] [OWNER][:[GROUP]] PATH...]<br>    [-copyFromLocal [-f] [-p] &lt;localsrc&gt; ... &lt;dst&gt;]<br>    [-copyToLocal [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;]<br>    [-count [-q] &lt;path&gt; ...]<br>    [-cp [-f] [-p] &lt;src&gt; ... &lt;dst&gt;]<br>    [-df [-h] [&lt;path&gt; ...]]<br>    [-du [-s] [-h] &lt;path&gt; ...]<br>    [-get [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;]<br>    [-getmerge [-nl] &lt;src&gt; &lt;localdst&gt;]<br>    [-help [cmd ...]]<br>    [-ls [-d] [-h] [-R] [&lt;path&gt; ...]]<br>    [-mkdir [-p] &lt;path&gt; ...]<br>    [-moveFromLocal &lt;localsrc&gt; ... &lt;dst&gt;]<br>    [-moveToLocal &lt;src&gt; &lt;localdst&gt;]<br>    [-mv &lt;src&gt; ... &lt;dst&gt;]<br>    [-put [-f] [-p] &lt;localsrc&gt; ... &lt;dst&gt;]<br>    [-rm [-f] [-r|-R] [-skipTrash] &lt;src&gt; ...]<br>    [-rmdir [--ignore-fail-on-non-empty] &lt;dir&gt; ...]<br>    &lt;acl_spec&gt; &lt;path&gt;]]<br>    [-setrep [-R] [-w] &lt;rep&gt; &lt;path&gt; ...]<br>    [-stat [format] &lt;path&gt; ...]<br>    [-tail [-f] &lt;file&gt;]<br>    [-test -[defsz] &lt;path&gt;]<br>    [-text [-ignoreCrc] &lt;src&gt; ...]<br></code></pre></td></tr></table></figure><p>和 Linux 中的 常用 shell 命令很类似</p><h2 id="HDFS-读写流程"><a href="#HDFS-读写流程" class="headerlink" title="HDFS 读写流程"></a>HDFS 读写流程</h2><h3 id="写流程"><a href="#写流程" class="headerlink" title="写流程"></a>写流程</h3><p><img src="/2022/07/14/HDFS-Hdfs/image-20220714104124983.png" alt="HDFS Writing Procedure"></p><ol><li>客户端通过 Distributed FileSystem 模块向 NameNode 请求上传文件， NameNode 检查目标文件是否已存在，父目录是否存在</li><li>NameNode 返回是否可以上传</li><li>客户端请求第一个 Block 上传到哪几个 DataNode 服务器上</li><li>NameNode 返回 3 个 DataNode 节点， 分别为 dn1， dn2， dn3</li><li>客户端通过 FSDataOutputStream 模块请求 dn1 上传数据，dn 1 收到请求后会继续调用 dn2 ，然后 dn2 调用 dn3， 将这个通信管道建立完成</li><li>dn1， dn2， dn3 逐级应答客户端</li><li>客户端开始向 dn1 上传第一个 Block （先从磁盘读取数据放到一个本地内存缓存），以 Packet 为单位， dn1 收到一个 Packet 就会传给 dn2， dn2 传给 dn3； dn1 每传一个 packet 会放入一个应答队列等待应答</li><li>当一个 Block 传输完成之后， 客户端再次请求 NameNode 上传第二个 Block 的服务器（重复 3-7 ）</li></ol><h3 id="网络拓扑节点副本选择"><a href="#网络拓扑节点副本选择" class="headerlink" title="网络拓扑节点副本选择"></a>网络拓扑节点副本选择</h3><p>HDFS 在写数据的过程中，NameNode 会选择距离最近的 DataNode 接受数据。</p><p>节点距离：两个节点到达最近的共同祖先的距离总和</p><h4 id="距离计算"><a href="#距离计算" class="headerlink" title="距离计算"></a>距离计算</h4><p>distance：</p><p>同一节点上的进程：0</p><p>同一机架上的不同节点：2</p><p>同一数据中心不同机架：4</p><p>不同数据中心：6</p><h4 id="副本选择"><a href="#副本选择" class="headerlink" title="副本选择"></a>副本选择</h4><ul><li>第一个副本在 Client 所处的节点上，如果客户端在集群外，随机选一个</li><li>第二个副本在另一个机架上的随机节点</li><li>第三个副本在第二个副本所在机架的随机节点</li></ul><h3 id="读流程"><a href="#读流程" class="headerlink" title="读流程"></a>读流程</h3><p><img src="/2022/07/14/HDFS-Hdfs/image-20220714111554850.png" alt="HDFS Reading Procedure"></p><ol><li>客户端通过 DistributedFileSystem 向 NameNode 请求下载文件，NameNode 通过查询元数据，找到文件块所在的 DataNode 地址</li><li>挑选一台 DataNode （就近原则，然后随机）服务器，请求读取数据</li><li>DataNode 开始传输数据给客户端 （从磁盘里面读取数据输入流，以 Packet 为单位校验）</li><li>客户端以 Packet 为单位接受，先在本地缓存，然后写入目标文件</li></ol><h2 id="NameNode-和-SecondaryNameNode"><a href="#NameNode-和-SecondaryNameNode" class="headerlink" title="NameNode 和 SecondaryNameNode"></a>NameNode 和 SecondaryNameNode</h2><h3 id="NameNode-元数据存储位置"><a href="#NameNode-元数据存储位置" class="headerlink" title="NameNode 元数据存储位置"></a>NameNode 元数据存储位置</h3><blockquote><ol><li>内存</li><li>磁盘上的 FsImage：元数据如果放在内存上可以提高访问效率，但是断电就会导致数据丢失。</li><li>磁盘上的追加写入文件 Edits：追加写效率很高，如果内存元数据更新时又要保证同时更新 FsImage 就会导致效率过低，如果不更新容易出现一致性问题，断电还是会导致数据丢失，所以引入 Edits 文件。</li><li>SecondaryNameNode：如果长时间添加 Edits 文件，当出现断电时恢复数据需要合并 FsImage 和 Edits 文件，此时数据恢复时间会大大增加。因此需要定期合并两个文件，如果发生在同一个 NameNode 上又会导致效率降低。所以 SecondaryNameNode 用来处理此事务。</li></ol></blockquote><p>Fsimange： HDFS 文件系统元数据的一个永久性的检查点，包含HDFS 文件系统的所有目录和文件 inode 的序列化信息</p><p>Edits：存放HDFS 所有更新操作的路径。</p><p><img src="/2022/07/14/HDFS-Hdfs/image-20220714144136237.png" alt="NameNode Working Mechanism"></p><p>第一阶段：NameNode 启动</p><ol><li>第一次启动 NameNode 格式化后， 创建 FsImage 和  Edits 文件。如果不是第一次启动，直接加载两个文件到内存。</li><li>客户端对元数据进行增删该的请求。</li><li>NameNode 记录操作日志，更新滚动日志（Edits）。</li><li>NameNode 在内存中对元数据进行增删改。</li></ol><p>第二阶段：Secondary NameNode （SNN） 工作</p><ol><li>Secondary NameNode 询问 NameNode 是否需要 CheckPoint。</li><li>Secondary NameNode 请求执行 Check Point</li><li>NameNode 滚动写 Edits 日志</li><li>滚动前的日志和 FsImage 拷贝到 SNN </li><li>SNN 加载 Edits 和 FsImage 到内存并合并</li><li>生成新的 fsimage.chkpoint。</li><li>拷贝 fsimage.chkpoint 到NameNode</li><li>NameNode 将 fsimage.chkpoint 重命名为 fsimage</li></ol><h3 id="CheckPoint-时间设置"><a href="#CheckPoint-时间设置" class="headerlink" title="CheckPoint 时间设置"></a>CheckPoint 时间设置</h3><ol><li>通常情况下，Secondary NameNode 每个一小时执行一次 （hdfs-default.xml 中的 dfs.namenode.checkpoint.period 进行修改）</li><li>一分钟检查一次操作次数，当操作次数达到一百万时，Secondary NameNode 执行一次</li></ol><h2 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h2><p><img src="/2022/07/14/HDFS-Hdfs/image-20220714153741046.png" alt="DataNode Working Mechanism"></p><h3 id="DataNode-工作机制"><a href="#DataNode-工作机制" class="headerlink" title="DataNode 工作机制"></a>DataNode 工作机制</h3><ol><li>一个数据块在 DataNode 上以文件形式存储在磁盘上，包括两个文件，一个是文件本身，一个是元数据包括数据块长度，数据块的校验和，以及时间戳</li><li>DataNode 启动之后向 NameNode 注册，通过之后，周期性（6小时）向 NameNode 上报所有的块信息。</li><li>心跳是每 3 秒一次，心跳返回结果带有 NameNode 给该 DataNode 的命令如复制块数据到另一台机器，或者删除某个数据块。如果超过 10 分钟没有收到某个 DataNode 的心跳 则认为该节点不可用。 </li><li>集群运行中可以安全加入和删除一些机器</li></ol><p>定义超时时间为TimeOut，则超时时长的计算公式为：  </p><p>TimeOut &#x3D; 2 * dfs.namenode.heartbeat.recheck-interval + 10 * dfs.heartbeat.interval。<br>而默认的dfs.namenode.heartbeat.recheck-interval 大小为5分钟， dfs.heartbeat.interval默认为3秒。  </p><h3 id="保证数据完整性"><a href="#保证数据完整性" class="headerlink" title="保证数据完整性"></a>保证数据完整性</h3><ol><li>当 DataNode 读取 Block 的时候，它会计算 CheckSum</li><li>如果计算后的CheckSum，与 Blocl 创建时的值不一样，说明损坏</li><li>Client 读取其他 DataNode 上的 Block</li><li>DataNode 在其文件创建后周期性验证 CheckSum</li></ol><h3 id="心跳并发配置"><a href="#心跳并发配置" class="headerlink" title="心跳并发配置"></a>心跳并发配置</h3><p>Hadoop3.x系列，配置NameNode内存是动态分配的，NameNode内存最小值1G，每增加100万个block，增加1G内存。</p><p><img src="/2022/07/14/HDFS-Hdfs/image-20220714154412085.png" alt="Too Many Threads interactive with NameNode"></p><p>需要给NameNode 配置多少线程</p><p>企业经验：dfs.namenode.handler.count&#x3D;<br>$$<br>20×log_e^{Cluster Size}<br>$$<br>，比如集群规模（DataNode台数）为3台时，此参数设置为21。</p><h3 id="纠删码原理"><a href="#纠删码原理" class="headerlink" title="纠删码原理"></a>纠删码原理</h3><p>cpu 资源换存储空间</p><p>HDFS 默认情况下，一个文件有 3 个副本，这样提高了数据的可靠性，但也带来了 2 倍的冗余开销。 Hadoop3.x 引入了纠删码， 采用计算的方式， 可以节省约 50％左右的存储空间。  </p><p>例如以前存放 3 个副本每一个假设 3k 共 9k，则现在存放 3 个数据单元共 3k，2 个校验单元假设一个 1k 共 2k 总共 5k 相较于以前节省了存储空间</p><p><img src="/2022/07/14/HDFS-Hdfs/image-20220714162348779.png" alt="Erasure Code"></p><h3 id="异构存储"><a href="#异构存储" class="headerlink" title="异构存储"></a>异构存储</h3><p><img src="/2022/07/14/HDFS-Hdfs/image-20220714180620489.png" alt="Storage Strategy"></p><p><strong>存储类型</strong></p><blockquote><p>RAM_DISK：（内存镜像文件系统）</p><p>SSD：（SSD固态硬盘）</p><p>DISK：（普通磁盘，在HDFS中，如果没有主动声明数据目录存储类型默认都是DISK）</p><p>ARCHIVE：（没有特指哪种存储介质，主要的指的是计算能力比较弱而存储密度比较高的存储介质，用来解决数据量的容量扩增的问题，一般用于归档）</p></blockquote><p><strong>存储策略</strong></p><p>说明：从 Lazy_Persist 到 Cold ，分别代表了设备的访问速度从快到慢</p><table><thead><tr><th><strong>策略****ID</strong></th><th><strong>策略名称</strong></th><th><strong>副本分布</strong></th><th>说明</th></tr></thead><tbody><tr><td><strong>15</strong></td><td>Lazy_Persist</td><td>RAM_DISK:1，DISK:n-1</td><td>一个副本保存在内存RAM_DISK中，其余副本保存在磁盘中。</td></tr><tr><td><strong>12</strong></td><td>All_SSD</td><td>SSD:n</td><td>所有副本都保存在SSD中。</td></tr><tr><td><strong>10</strong></td><td>One_SSD</td><td>SSD:1，DISK:n-1</td><td>一个副本保存在SSD中，其余副本保存在磁盘中。</td></tr><tr><td><strong>7</strong></td><td>Hot(default)</td><td>DISK:n</td><td>Hot：所有副本保存在磁盘中，这也是默认的存储策略。</td></tr><tr><td><strong>5</strong></td><td>Warm</td><td>DSIK:1，ARCHIVE:n-1</td><td>一个副本保存在磁盘上，其余副本保存在归档存储上。</td></tr><tr><td><strong>2</strong></td><td>Cold</td><td>ARCHIVE:n</td><td>所有副本都保存在归档存储上。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>BigData</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>HDFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop 介绍</title>
    <link href="/2022/07/11/Hadoop-Intro/"/>
    <url>/2022/07/11/Hadoop-Intro/</url>
    
    <content type="html"><![CDATA[<h1 id="Hadoop-介绍"><a href="#Hadoop-介绍" class="headerlink" title="Hadoop 介绍"></a>Hadoop 介绍</h1><h2 id="Hadoop-概述"><a href="#Hadoop-概述" class="headerlink" title="Hadoop 概述"></a>Hadoop 概述</h2><h3 id="Hadoop-是什么"><a href="#Hadoop-是什么" class="headerlink" title="Hadoop 是什么"></a>Hadoop 是什么</h3><ol><li>Apache 基金会下的一个分布式系统框架</li><li>解决海量数据存储和分析计算</li></ol><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li>高可靠性： Hadoop 底层维护多个数据副本，即使某个存储出现故障，也不会导致数据丢失</li><li>高扩展性： 当集群任务较多资源吃紧时，可以装载新的节点解决当前问题（如 双十一 618）。</li><li>高效性： 在 MapReduce 的思想下， Hadoop 是并行工作的，以加快任务处理的速度。</li><li>高容错性： 能够自动将失败的任务重新分配</li></ol><p>（以上问题需要回答底层是如何解决的）</p><h3 id="Hadoop-的组成"><a href="#Hadoop-的组成" class="headerlink" title="Hadoop 的组成"></a>Hadoop 的组成</h3><ol><li>MapReduce （分析计算）</li><li>Yarn （资源调度 2.x 之后出现，之前 资源调度也由 Map Reduce 负责）</li><li>HDFS （Hadoop Distributed File System）</li><li>Common 辅助工具</li></ol><h3 id="Hadoop-常用端口号"><a href="#Hadoop-常用端口号" class="headerlink" title="Hadoop 常用端口号"></a>Hadoop 常用端口号</h3><table><thead><tr><th></th><th>Hadoop 3.x</th><th>Hadoop 2.x</th></tr></thead><tbody><tr><td>访问 HDFS 端口</td><td>9870</td><td>50070</td></tr><tr><td>访问 MR 执行情况端口</td><td>8088</td><td>8088</td></tr><tr><td>历史服务器</td><td>19888</td><td>19888</td></tr><tr><td>客户端访问集群端口</td><td>8020</td><td>9000</td></tr></tbody></table><p> 端口都可以在相关配置文件中进行修改</p><h3 id="Hadoop-配置文件以及简单的-Hadoop-集群搭建"><a href="#Hadoop-配置文件以及简单的-Hadoop-集群搭建" class="headerlink" title="Hadoop 配置文件以及简单的 Hadoop 集群搭建"></a>Hadoop 配置文件以及简单的 Hadoop 集群搭建</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><code>Hadoop 3.x: core-site.xml hdfs-site.xml marped-site.xml yarn-site.xml workers</code></p><p><code>Hadoop 2.x: core-site.xml hdfs-site.xml marped-site.xml yarn-site.xml slaves</code> </p><h4 id="简单的集群搭建过程"><a href="#简单的集群搭建过程" class="headerlink" title="简单的集群搭建过程"></a>简单的集群搭建过程</h4><h5 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h5><p>保证 Linux 系统下有和你所需要 Hadoop 的对应的 Java 版本环境</p><h5 id="配置-SSH-免密登录"><a href="#配置-SSH-免密登录" class="headerlink" title="配置 SSH 免密登录"></a>配置 SSH 免密登录</h5><p>便于 Hadoop 不同主机之间的文件的快速传输</p><p>编写集群文件分发脚本实现上述要求 使用 rsync  命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#1. 判断参数个数</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> Not Enough Arguement!<br>    <span class="hljs-built_in">exit</span>;<br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#2. 遍历集群所有机器</span><br><span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> hadoop102 hadoop103 hadoop104<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> ==================== <span class="hljs-variable">$host</span> ====================<br>    <span class="hljs-comment">#3. 遍历所有目录，挨个发送</span><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> <span class="hljs-variable">$@</span><br>    <span class="hljs-keyword">do</span><br>        <span class="hljs-comment">#4. 判断文件是否存在</span><br>        <span class="hljs-keyword">if</span> [ -e <span class="hljs-variable">$file</span> ]<br>        <span class="hljs-keyword">then</span><br>            <span class="hljs-comment">#5. 获取父目录</span><br>            pdir=$(<span class="hljs-built_in">cd</span> -P $(<span class="hljs-built_in">dirname</span> <span class="hljs-variable">$file</span>); <span class="hljs-built_in">pwd</span>)<br>            <span class="hljs-comment">#6. 获取当前文件的名称</span><br>            fname=$(<span class="hljs-built_in">basename</span> <span class="hljs-variable">$file</span>)<br>            ssh <span class="hljs-variable">$host</span> <span class="hljs-string">&quot;mkdir -p <span class="hljs-variable">$pdir</span>&quot;</span><br>            rsync -av <span class="hljs-variable">$pdir</span>/<span class="hljs-variable">$fname</span> <span class="hljs-variable">$host</span>:<span class="hljs-variable">$pdir</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-variable">$file</span> does not exists!<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h5 id="配置-Hadoop-核心文件"><a href="#配置-Hadoop-核心文件" class="headerlink" title="配置 Hadoop 核心文件"></a>配置 Hadoop 核心文件</h5><p>分配 Hadoop 各组件所在位置</p><table><thead><tr><th></th><th>hadoop102</th><th>hadoop103</th><th>hadoop104</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode， DataNode</td><td>DataNode</td><td>SecondaryNameNode, DataNode</td></tr><tr><td>YARN</td><td>NodeManager</td><td>ResourceManager NodeManager</td><td>NodeManager</td></tr></tbody></table><p>配置 core-site.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定 NameNode 的地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://hadoop102:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定 hadoop 数据的存储目录 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/module/hadoop-3.1.3/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置 HDFS 网页登录使用的静态用户为 atguigu --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>albert<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置 hdfs-site.xml  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- nn web 端访问地址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop102:9870<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 2nn web 端访问地址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop104:9868<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置 yarn-site.xml  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定 MR 走 shuffle --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定 ResourceManager 的地址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop103<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 环境变量的继承 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAP<br>RED_HOME<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置 mapred-site.xml  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定 MapReduce 程序运行在 Yarn 上 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置 workers  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">[albert@hadoop102 hadoop]$ vim <span class="hljs-regexp">/opt/m</span>odule<span class="hljs-regexp">/hadoop-3.1.3/</span>etc<span class="hljs-regexp">/hadoop/</span>workers<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#如果直接写主机名 你需要在 vim /etc/hosts 配置主机名与地址的映射</span><br><span class="hljs-comment">#如果不写，也可以直接写 192.168.10.101 等你对应主机的 ip</span><br><span class="hljs-attribute">hadoop102</span><br>hadoop103<br>hadoop104<br></code></pre></td></tr></table></figure><p>在上述某些配置文件中追加配置</p><p>配置历史服务器  </p><p>配置 mapred-site.xml  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 历史服务器端地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop102:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 历史服务器 web 端地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop102:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>&lt;/property<br></code></pre></td></tr></table></figure><p>配置日志的聚集  </p><p>配置 yarn-site.xml  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 开启日志聚集功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log.server.url<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>http://hadoop102:19888/jobhistory/logs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置日志保留时间为 7 天 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>604800<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="格式化-namenode"><a href="#格式化-namenode" class="headerlink" title="格式化 namenode"></a>格式化 namenode</h5><ol><li>启动集群<br>如果集群是第一次启动，需要在 hadoop102 节点格式化 NameNode <code>（注意： 格式化 NameNode， 会产生新的集群 id， 导致 NameNode 和 DataNode 的集群 id 不一致，集群找不到已往数据。 如果集群在运行过程中报错，需要重新格式化 NameNode 的话， 一定要先停止 namenode 和 datanode 进程， 并且要删除所有机器的 data 和 logs 目录，然后再进行格式化。）</code></li></ol><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[albert<span class="hljs-variable">@hadoop102</span> hadoop-<span class="hljs-number">3.1</span>.<span class="hljs-number">3</span>]<span class="hljs-variable">$ </span>hdfs namenode -format<br></code></pre></td></tr></table></figure><ol start="2"><li><p>启动 HDFS</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[albert<span class="hljs-variable">@hadoop102</span> hadoop-<span class="hljs-number">3.1</span>.<span class="hljs-number">3</span>]<span class="hljs-variable">$ </span>sbin/start-dfs.sh<br></code></pre></td></tr></table></figure></li><li><p>在配置了 ResourceManager 的节点（hadoop103） 启动 YARN</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[albert<span class="hljs-variable">@hadoop103</span> hadoop-<span class="hljs-number">3.1</span>.<span class="hljs-number">3</span>]<span class="hljs-variable">$ </span>sbin/start-yarn.sh<br></code></pre></td></tr></table></figure></li><li><p>Web 端查看 HDFS 的 Nam eNode</p></li></ol><p>   （a）浏览器中输入： <a href="http://hadoop102:9870/">http://hadoop102:9870</a></p><p>   （b）查看 HDFS 上存储的数据信息</p><ol start="5"><li>Web 端查看 YARN 的 ResourceManager</li></ol><p>   （a）浏览器中输入： <a href="http://hadoop103:8088/">http://hadoop103:8088</a></p><p>   （b）查看 YARN 上运行的 Job 信息  </p><p>使用脚本启动&#x2F;关闭 Hadoop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;No Args Input...&quot;</span><br>    <span class="hljs-built_in">exit</span> ;<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br><span class="hljs-string">&quot;start&quot;</span>)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; =================== 启动 hadoop 集群 ===================&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; --------------- 启动 hdfs ---------------&quot;</span><br>    ssh hadoop102 <span class="hljs-string">&quot;/opt/module/hadoop-3.1.3/sbin/start-dfs.sh&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; --------------- 启动 yarn ---------------&quot;</span>尚硅谷大数据技术之 Hadoop（入门）<br>    —————————————————————————————<br>    更多 Java –大数据 –前端 –python 人工智能资料下载，可百度访问：尚硅谷官网<br>    ssh hadoop103 <span class="hljs-string">&quot;/opt/module/hadoop-3.1.3/sbin/start-yarn.sh&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; --------------- 启动 historyserver ---------------&quot;</span><br>    ssh hadoop102 <span class="hljs-string">&quot;/opt/module/hadoop-3.1.3/bin/mapred --daemon start historyserver&quot;</span><br>;;<br><span class="hljs-string">&quot;stop&quot;</span>)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; =================== 关闭 hadoop 集群 ===================&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; --------------- 关闭 historyserver ---------------&quot;</span><br>    ssh hadoop102 <span class="hljs-string">&quot;/opt/module/hadoop-3.1.3/bin/mapred --daemon stop</span><br><span class="hljs-string">    historyserver&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; --------------- 关闭 yarn ---------------&quot;</span><br>    ssh hadoop103 <span class="hljs-string">&quot;/opt/module/hadoop-3.1.3/sbin/stop-yarn.sh&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; --------------- 关闭 hdfs ---------------&quot;</span><br>    ssh hadoop102 <span class="hljs-string">&quot;/opt/module/hadoop-3.1.3/sbin/stop-dfs.sh&quot;</span><br>;;<br>*)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Input Args Error...&quot;</span><br>;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>查看三台服务器 Java 进程脚本： jpsall  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> hadoop102 hadoop103 hadoop104<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> =============== <span class="hljs-variable">$host</span> ===============<br>    ssh <span class="hljs-variable">$host</span> jps<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>注意： 记得给脚本运行权限 chmod</p>]]></content>
    
    
    <categories>
      
      <category>BigData</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Code Daily (1)</title>
    <link href="/2022/06/19/Code-Daily/"/>
    <url>/2022/06/19/Code-Daily/</url>
    
    <content type="html"><![CDATA[<h1 id="Code-Daily"><a href="#Code-Daily" class="headerlink" title="Code Daily"></a>Code Daily</h1><h2 id="剑指-Offer-03-数组中重复的数字"><a href="#剑指-Offer-03-数组中重复的数字" class="headerlink" title="剑指 Offer 03. 数组中重复的数字"></a><a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a></h2><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：</p><p>输入：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[2, 3, 1, 0, 2, 5, 3]</span><br>输出：<span class="hljs-number">2</span> 或 <span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure><p>限制：</p><p>2 &lt;&#x3D; n &lt;&#x3D; 100000</p><p>我的方法（没有看清题目，误以为数字的大小包含了负数，以下是对于包含负数的解）：</p><ol><li>如果包含负数，就不能用数组的 index 去映射数字（index） 到次数这层关系</li><li>此处需要映射，所以用了 Map</li><li>先初始化 value 的值为 0 ，因为是 Integer 类型初始值是 null</li><li>然后再次遍历该数组，对于相同的 key 的 value 做 + 1 操作</li><li>当前 key value 值大与 1 ，说明出现超过一次，就退出返回目标值</li></ol><p>Code：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i: nums)&#123;<br>            map.put(i,<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i: nums)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> map.get(i) + <span class="hljs-number">1</span>;<br>            map.put(i,temp);<br>            <span class="hljs-keyword">if</span>(map.get(i)&gt;<span class="hljs-number">1</span>)&#123;<br>                target = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Method 2  ( Map )（ num of nums is in 0~n-1 ）Time O(n), Space O(n) :</p><ol><li>Because the num of nums is in 0~n-1,  I could use the index of array to express the num and the value of the index to represent the times of the num in the nums.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span>[] timesArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : nums)&#123;<br>            timesArr[i]++;<br>            <span class="hljs-keyword">if</span>(timesArr[i]&gt;<span class="hljs-number">1</span>)&#123;<br>                target = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>For the problem we should think in different situation Time Complexity or Space Complexity</p><p>Method 3 ( Sort )  Time O( nlogn ) Space O(1):</p><ol><li>Before finding, I could sort() the nums firstly.</li><li>To traverse the nums, if there are numbers which are neighbor and equal, the number is target</li></ol><p>code:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> findRepeatNumber(<span class="hljs-built_in">int</span>[] nums) &#123;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i<span class="hljs-number">-1</span>] == nums[i])&#123;<br>                <span class="hljs-keyword">return</span> nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Method 4 (Map and using the array of nums) Note: the Problem told me the numbers in nums is small than the length the nums.</p><p>Time O( n ) Space O(1);</p><ol><li>the Problem told me the numbers in nums is small than the length the nums.</li><li>swap the value of nums by represent the value as the index in the nums (nums[nums[i]] &#x3D; nums[i] )</li><li>during swaping, if I find the value v1 which index is nums[i] equal to the value v2  which index is i,  there are two times for the v1 in the nums.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;nums.length; i++)&#123;<br>            <span class="hljs-keyword">while</span>(nums[i]!=i)&#123;<br>                <span class="hljs-keyword">if</span>(nums[nums[i]] == nums[i])&#123;<br>                    <span class="hljs-keyword">return</span> nums[i];<br>                &#125;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[nums[i]];<br>                nums[nums[i]] = nums[i];<br>                nums[i] = temp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a></h2><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>示例:</p><p>现有矩阵 matrix 如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[1,   4,  7, 11, 15]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[2,   5,  8, 12, 19]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[3,   6,  9, 16, 22]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[10, 13, 14, 17, 24]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[18, 21, 23, 26, 30]</span></span><br><span class="hljs-comment">]</span><br></code></pre></td></tr></table></figure><p>给定 target &#x3D; 5，返回 true。</p><p>给定 target &#x3D; 20，返回 false。</p><p>限制：</p><p>0 &lt;&#x3D; n &lt;&#x3D; 1000</p><p>0 &lt;&#x3D; m &lt;&#x3D; 1000</p><p>Method 1 : Best( Time O ( logn ), Space O( 1 )); Worst ( Time O ( nlogn+m ), Space O)</p><ol><li>for row, I use binary search. </li><li>for colunm, I use linear search.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-keyword">if</span>(matrix == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(matrix.length == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(matrix.length == <span class="hljs-number">1</span> &amp;&amp; matrix[<span class="hljs-number">0</span>].length == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rowIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length-<span class="hljs-number">1</span>;<span class="hljs-comment">//row</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//column</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">do</span>&#123;<br>            rowIndex = binarySearchRow(matrix[k],target,i);<br>            <span class="hljs-comment">//when the index &lt; 0, the number is small the any numbers in the arr</span><br>            <span class="hljs-keyword">if</span>(rowIndex &lt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target == matrix[k][rowIndex])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                i = rowIndex;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(j &lt; matrix.length)&#123;<br>                <span class="hljs-keyword">if</span>(target == matrix[j][i])&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &lt; matrix[j][i])&#123;<br>                    k = j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j == matrix.length || (i == <span class="hljs-number">0</span> &amp;&amp; matrix[j][i] != target) )&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchRow</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> r)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> r;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>            mid = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(target == arr[mid])&#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &lt; arr[mid])&#123;<br>                right = mid-<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &gt; arr[mid])&#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Method 2 : Time O (n+m) Space O (1)</p><ol><li>I could look at the matrix from its top-right point</li><li>when it the target is smaller than the number, move to left</li><li>when it the target is bigger than the number, move to down</li></ol><p><img src="/2022/06/19/Code-Daily/image-20220621191604743.png" alt="image-20220621191604743"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-keyword">if</span>(matrix == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(matrix.length == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(matrix.length == <span class="hljs-number">1</span> &amp;&amp; matrix[<span class="hljs-number">0</span>].length == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length-<span class="hljs-number">1</span>;<span class="hljs-comment">//column</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<span class="hljs-comment">//row</span><br>        <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span>&amp;&amp;j&lt;matrix.length)&#123;<br>            <span class="hljs-keyword">if</span>(matrix[j][i] == target)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &lt; matrix[j][i])&#123;<br>                i--;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&gt;matrix[j][i])&#123;<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Leetcode</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Data Structure and Algorithm</title>
    <link href="/2022/06/19/Java-data-structure-and-algorithm/"/>
    <url>/2022/06/19/Java-data-structure-and-algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-数据结构与算法"><a href="#Java-数据结构与算法" class="headerlink" title="Java 数据结构与算法"></a>Java 数据结构与算法</h1><p>大 O 表示法：比较的是操作数，指出算法运行时间的增速。</p><p>如何选择数组和链表：</p><ol><li>增删情况较多的需求下选择链表。</li><li>改查情况较多的情况下选择数组。</li></ol><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><ol><li>每次循环找当前查询数组中最小或者最大元素的索引</li><li>得到索引之后，将索引位置的值与顺序放置位置交换</li><li>直至循环结束</li></ol><p>🗝特点：找到最小或者最大元素的索引，通过索引进行元素交换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sort( <span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;nums.length - <span class="hljs-number">1</span> ; i++)&#123;<br>            <span class="hljs-comment">//记录当前最小值及其Index</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">minNum</span> <span class="hljs-operator">=</span> nums[i];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span> ; j &lt; nums.length; j++)&#123;<br>               <span class="hljs-comment">//minNum 需要更新最小元素</span><br>                <span class="hljs-keyword">if</span>(minNum &gt; nums[j])&#123;<br>                    <span class="hljs-comment">//找到了更小元素的Index</span><br>                    minIndex = j;<br>                    minNum = nums[j];<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//最小元素放置于当前遍历数组的第一个位置</span><br>            <span class="hljs-comment">//即根据index交换值</span><br>            nums[minIndex] = nums[i];<br>            nums[i] = minNum;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>🗝递归的两个条件：</p><ol><li>基线条件：防止死循环</li><li>递归条件：自己调用自己</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">recursion</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-comment">//基线条件</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> n;<br>    <span class="hljs-comment">//递归条件</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> recursion(n - <span class="hljs-number">1</span>) + n;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表-队列"><a href="#链表-队列" class="headerlink" title="链表 队列"></a>链表 队列</h2><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>单向链表的缺点：</p><ol><li>只能一个方向查找</li><li>不能实现自我删除，需要辅助节点</li></ol><p>双向链表的遍历：可以向前和向后遍历</p><p>添加：先找到最后节点，temp.next &#x3D; newNode; newNode.pre &#x3D; temp</p><p>修改：</p><p>删除：实现自我删除： node5.pre.next&#x3D; node5.next; node5.next.pre &#x3D; node5.pre</p><h3 id="单向环形链表-约瑟夫问题"><a href="#单向环形链表-约瑟夫问题" class="headerlink" title="单向环形链表 约瑟夫问题"></a>单向环形链表 约瑟夫问题</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220508152255000.png" alt="image20220508152255000"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220508152413067.png" alt="image20220508152413067"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220508152700428.png" alt="image20220508152700428"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220508154423091.png" alt="image20220508154423091"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//according the input of the user, calculate the order</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> startNo  no. of the first boy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> countNum gap num</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> nums     total num of boy</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countBoys</span><span class="hljs-params">(<span class="hljs-type">int</span> startNo, <span class="hljs-type">int</span> countNum, <span class="hljs-type">int</span> nums)</span> &#123;<br>    <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span> || startNo &lt; <span class="hljs-number">1</span> || startNo &gt; nums) &#123;<br>        System.out.println(<span class="hljs-string">&quot;Error Input&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//first pointer point to the startNo</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; startNo - <span class="hljs-number">1</span>; i++) &#123;<br>        first = first.getNext();<br>    &#125;<br>    <span class="hljs-type">Boy</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> first;<br>    <span class="hljs-comment">//helper pointer the last node</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (helper.getNext() == first) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        helper = helper.getNext();<br>    &#125;<br>    <span class="hljs-comment">//move countNum - 1 exit</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (helper == first) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//move first and helper countNo -1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; countNum - <span class="hljs-number">1</span>; i++) &#123;<br>            first = first.getNext();<br>            helper = helper.getNext();<br>        &#125;<br>        <span class="hljs-comment">//first points the node(boy) exiting circle</span><br>        System.out.println(<span class="hljs-string">&quot;The num of boy who left the circle is &quot;</span> + first.getNo());<br>        first = first.getNext();<br>        helper.setNext(first);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;The num of last one is &quot;</span> + first.getNo());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>FIFO</p><p>应用场景</p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220508154848365.png" alt="image20220508154848365"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//create a array stack</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize; <span class="hljs-comment">//size of stack</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] stack; <span class="hljs-comment">//stack</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// top of stack</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>        stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-comment">//stack is full</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span>= maxSize-<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//stack is empty</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span>= -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//push</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-keyword">if</span>(isFull())&#123;<br>            System.out.println(<span class="hljs-string">&quot;Stack is Full&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        top++;<br>        stack[top] = value;<br>    &#125;<br>    <span class="hljs-comment">//pop</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Stack is Empty&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stack[top];<br>        top--;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-comment">//print stack</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;Stack is Empty&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> top; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Stack num is: &quot;</span> + stack[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈实现综合计算器"><a href="#栈实现综合计算器" class="headerlink" title="栈实现综合计算器"></a>栈实现综合计算器</h3><p>编写特点：</p><ol><li>写MyStack在继承Java 提供的 Stack</li><li>在MyStack 中提供运算符优先级判断，使用数字表示 * ：2，+：1</li><li>在MyStack 中提供符号判断的方法</li><li>在MyStack 中提供运算方法</li><li>使用字符扫描字符串表达式根据扫描到的运算符判断当前是否可以进行运算</li><li>主要 char 和 int 转换时 char （‘7’，’0‘）（70）可能是两个字符，需要使用字符串配合符号判断对70进行拼接</li><li>扫描越界问题</li></ol><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220508170641553.png" alt="image20220508170641553"></p><h3 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220509170128463.png" alt="image20220509170128463"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">parseSuffixExprList</span><span class="hljs-params">(List&lt;String&gt; ls)</span> &#123;<br>    Stack&lt;String&gt; s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;(); <span class="hljs-comment">//for input operator first</span><br>    List&lt;String&gt; s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//for input number first</span><br><br>    <span class="hljs-keyword">for</span> (String item : ls) &#123;<br>        <span class="hljs-comment">//if item is num</span><br>        <span class="hljs-keyword">if</span>(item.matches(<span class="hljs-string">&quot;//d+&quot;</span>))&#123;<br>            s2.add(item);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item.equals(<span class="hljs-string">&quot;(&quot;</span>))&#123;<br>            s1.push(item);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item.equals(<span class="hljs-string">&quot;)&quot;</span>))&#123;<br>            <span class="hljs-keyword">while</span> (!s1.peek().equals(<span class="hljs-string">&quot;(&quot;</span>))&#123;<br>                s2.add(s1.pop());<br>            &#125;<br>            s1.pop();<span class="hljs-comment">//pop the (</span><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (s1.size() != <span class="hljs-number">0</span> &amp;&amp;<br>                    !s1.peek().equals(<span class="hljs-string">&quot;(&quot;</span>) &amp;&amp;<br>                    priority(s1.peek()) &gt;= priority(item))&#123;<br>                s2.add(s1.pop());<br>            &#125;<br>            <span class="hljs-comment">//s1 == empty or priority(s1.peek()) &lt; priority(item)</span><br>            s1.push(item);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//pop the left item of s1 into s2</span><br>    <span class="hljs-keyword">while</span> (s1.size() != <span class="hljs-number">0</span>)&#123;<br>        s2.add(s1.pop());<br>    &#125;<br>    <span class="hljs-keyword">return</span> s2;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">priority</span><span class="hljs-params">(String operator)</span>&#123;<br>    <span class="hljs-keyword">if</span>(operator.equals(<span class="hljs-string">&quot;*&quot;</span>) || operator.equals(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operator.equals(<span class="hljs-string">&quot;+&quot;</span>) || operator.equals(<span class="hljs-string">&quot;-&quot;</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;ERROR OPERATOR&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h2><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220510161240835.png" alt="image20220510161240835"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220510160759299.png" alt="image20220510160759299"></p><h3 id="迷宫问题："><a href="#迷宫问题：" class="headerlink" title="迷宫问题："></a>迷宫问题：</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220510171343186.png" alt="image20220510171343186"></p><p>编写思路</p><ol><li>确定策略：先上？ 上-》下-》左-》右 去尝试</li><li>设置递归退出条件，即走到了目的地</li><li>先占位置 map&#x2F;[ i ][ j ]  &#x3D; 2 ，然后走;</li><li>在进入迷宫时尝试探索下一步，如果下一步可行返回 true 继续递归</li><li>在遇见当前路是墙：1， 走过的：2， 死路：3 就返回 false</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.recursion;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Maze</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//create a map</span><br>        <span class="hljs-type">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>];<br>        <span class="hljs-comment">//1:wall</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>            map[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span>;<br>            map[<span class="hljs-number">7</span>][i] = <span class="hljs-number">1</span>;<br>            map[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            map[i + <span class="hljs-number">1</span>][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br><br>        Maze.setWay(map, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;map is:&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] ints : map) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt : ints) &#123;<br>                System.out.print(anInt + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//using recursion help the ball:2 find a way</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1:wall</span><br><span class="hljs-comment">     * 2:way</span><br><span class="hljs-comment">     * 3:the position has been walked, but it is not the right way, next time</span><br><span class="hljs-comment">     * you don&#x27;t need to walk.</span><br><span class="hljs-comment">     * 1. strategy: down-&gt;right-&gt;up-&gt;left, if it is not right, recall</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map: map</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i:   (i,j): start position</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> j:   (6,5): terminated position</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> find a way return true, else return false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setWay</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//the position hasn&#x27;t been walked</span><br>            <span class="hljs-comment">//Each recursion, it help to set the position = 2</span><br>            <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) &#123;<br>                map[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-comment">//down</span><br>                <span class="hljs-keyword">if</span> (setWay(map, i + <span class="hljs-number">1</span>, j)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-comment">//right</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j + <span class="hljs-number">1</span>)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-comment">//up</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i - <span class="hljs-number">1</span>, j)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-comment">//left</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j - <span class="hljs-number">1</span>)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    map[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220510172920319.png" alt="image20220510172920319"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220510172850489.png" alt="image20220510172850489"></p><p>编写思路：</p><ol><li>拆分问题<ol><li>设置输出函数输出每次的找的结果</li><li>设置check 函数检查防止是否符合要求 （对于斜线上的要巧用函数的思维，即斜率为1 or -1）</li><li>设置放置函数放置皇后</li><li>先占位置 array[n] &#x3D; i; 再判断 if(isNotConflict(n)</li></ol></li><li>在编写放置皇后函数时<ol><li>设置递归退出条件</li><li>由于每次每列只有一个皇后，即 n th 列数&#x3D;&#x3D; n th 皇后</li><li>在每列放置皇后时，如果当前位置不冲突，就去递归检查下一行 or 下一个皇后</li><li>如果当前列中当前的位置不对，则循环 check 下一个位置，如果 check（n+1）没有找到，退出 if 条件，尝试 n 行中的下一个位置</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.recursion;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EightQueen</span> &#123;<br><br>    <span class="hljs-comment">//define a max present the number of Queen</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">//define a array to store the result of position</span><br>    <span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[max];<br><br>    <span class="hljs-comment">//to count the number of solutions</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">EightQueen</span> <span class="hljs-variable">eightQueen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EightQueen</span>();<br>        eightQueen.check(<span class="hljs-number">0</span>);<br>        System.out.println(count);<br><br>    &#125;<br><br>    <span class="hljs-comment">//put a Queen in the right position</span><br>    <span class="hljs-comment">//n: meaning the nth Queen and the Queen in the nth line</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-comment">//exit recursion</span><br>        <span class="hljs-keyword">if</span>(n == max)&#123;<br>            print();<br>            count++;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//put the Queen in right position by order in a line</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; max; i++) &#123;<br>            <span class="hljs-comment">//1. put the ith Queen in the first column in a line</span><br>            array[n] = i;<br>            <span class="hljs-comment">//n: meaning the nth Queen and the Queen in the nth line</span><br>            <span class="hljs-comment">//if not conflicting, check next queen</span><br>            <span class="hljs-comment">//if we find there are not position to put the queen(n+1) in the line</span><br>            <span class="hljs-comment">//it will continue run the queen(n) loop to check the next position in the line</span><br>            <span class="hljs-keyword">if</span>(isNotConflict(n))&#123;<br>                check(n+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">//if conflicting or check(n+1) can&#x27;t not find right position,</span><br>            <span class="hljs-comment">// loop continue to check next position in the line</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//Print the position of Queen</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : array) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-comment">//check the position of nth Queen to know whether it is conflicted to the</span><br>    <span class="hljs-comment">//position of the (1st -&gt; n-1th) Queen.</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n: nth Queen</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNotConflict</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-comment">//1. array[i] == array[n]: they are in same column</span><br>            <span class="hljs-comment">//2. They are in same bias line.</span><br>            <span class="hljs-comment">//y2-y1 == x2-x1 =》 k value : 1</span><br>            <span class="hljs-comment">//y2-y1 == -(x2-x1) =》 k value : -1</span><br>            <span class="hljs-comment">//3. They are in same line, the loop have helped us to check</span><br>            <span class="hljs-comment">// They can&#x27;t be in same line.</span><br>            <span class="hljs-keyword">if</span> (array[i] == array[n] ||<br>                    (n - i) == (array[n] - array[i]) ||<br>                    (n - i) == -(array[n] - array[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p> <img src="/2022/06/19/Java-data-structure-and-algorithm/20220511161149526.png" alt="image20220511161149526"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220511161521637.png" alt="image20220511161521637"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220511161800556.png" alt="image20220511161800556"></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220511162125562.png" alt="image20220511162125562"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220511162851488.png" alt="image20220511162851488"></p><p>编写思维：</p><ol><li>相邻元素之间发生交换</li><li>大循环次数 &#x3D; 元素的个数 - 1 《&#x3D;&#x3D; 每次大循环都会确定最大的一个数的位置，知道确定第二位置，就结束了（第一个自动就是最小）</li><li>小循环的次数 &#x3D; 待排元素的个数 - 1 《&#x3D;&#x3D; 待排元素的个数和大循环的次序有关, 即 元素个数 -（ 0, 1, 2, 3, … ）</li><li>优化：一次循环中一次交换都没有发生过，即数组已经有序。（每次都是从左至右依次两两比较，即 1&lt; 2 ，2 &lt; 3 &#x3D;&#x3D;》1 &lt; 2 &lt; 3）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.sort;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubbleSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">2</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//        //for the first sort 4 times</span><br><span class="hljs-comment">//        //put the biggest in the last</span><br><span class="hljs-comment">//        for (int j = 0; j &lt; arr.length - 1; j++) &#123;</span><br><span class="hljs-comment">//            if(arr[j] &gt; arr[j+1])&#123;</span><br><span class="hljs-comment">//                tmp = arr[j];</span><br><span class="hljs-comment">//                arr[j] = arr[j+1];</span><br><span class="hljs-comment">//                arr[j+1] = tmp;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        for (int i : arr) &#123;</span><br><span class="hljs-comment">//            System.out.println(i);</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        //for the second sort 4 times</span><br><span class="hljs-comment">//        for (int j = 0; j &lt; arr.length - 2; j++) &#123;</span><br><span class="hljs-comment">//            if(arr[j] &gt; arr[j+1])&#123;</span><br><span class="hljs-comment">//                tmp = arr[j];</span><br><span class="hljs-comment">//                arr[j] = arr[j+1];</span><br><span class="hljs-comment">//                arr[j+1] = tmp;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        for (int i : arr) &#123;</span><br><span class="hljs-comment">//            System.out.println(i);</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//We can think just like above</span><br>        <span class="hljs-comment">// flag means that during the sorting, elements whether swap.</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - i - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    tmp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = tmp;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//In this inner loop, there is not swapping between the elements</span><br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序-1"><a href="#选择排序-1" class="headerlink" title="选择排序"></a>选择排序</h3><p>由于只需要交换最小的元素，交换次数的减小使其性能由于冒泡排序</p><p>编写思路：</p><ol><li>只是找到最小值的时候交换</li><li>每次找到当前待排数组中最小的数进行交换</li><li>需要发生交换就需要记录当前最小值及其index</li><li>大循环次数 &#x3D; 元素个数 - 1 《&#x3D; 需要第一个位置和后面的位置进行比较</li><li>小循环需要从 i + 1 开始《&#x3D; 即第一个待排位置的下一位</li></ol><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220511173449870.png" alt="image20220511173449870"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> minNum;<br>        <span class="hljs-type">int</span> minIndex;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            minNum = arr[i];<br>            minIndex = i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (minNum &gt; arr[j]) &#123;<br>                    minNum = arr[j];<br>                    minIndex = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//find the new minMun in this sorting</span><br>            <span class="hljs-keyword">if</span>(minIndex != i)&#123;<br>                arr[i] = minNum;<br>                <span class="hljs-comment">//put the bigger in j position</span><br>                arr[minIndex] = arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>编写思路：</p><ol><li>两个list，一个有序一个无序</li><li>每次都从大循环中取出一个元素，记录待插入元素（insertValue）及其前一个位置（insertIndex）</li><li>插入之前的有序表，从有序表的最后一位开始比较知道找到</li><li>第一次，第一个元素就是有序的，后面其他元素是无序的</li><li>中间比较时，有序表中较大的数需要移动位置为待插入的数（insertValue）腾出空间，使用 insertIndex 比较并记录位置。</li></ol><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220512152215464.png" alt="image20220512152215464"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length ; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">insertValue</span> <span class="hljs-operator">=</span> arr[i];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">insertIndex</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//the number waiting for inserting to the sorted list need</span><br>            <span class="hljs-comment">//compare to each number in the sorted list from the last position</span><br>            <span class="hljs-comment">//of the sorted list</span><br>            <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertValue &lt; arr[insertIndex])&#123;<br>                arr[insertIndex + <span class="hljs-number">1</span>] = arr[insertIndex];<br>                insertIndex --;<br>            &#125;<br>            arr[insertIndex + <span class="hljs-number">1</span>] = insertValue;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>其目的是为了减少排序中的交换问题</p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220512160136319.png" alt="image20220512160136319"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220512160205984.png" alt="image20220512160205984"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220512160406947.png" alt="image20220512160406947"></p><h4 id="交换式："><a href="#交换式：" class="headerlink" title="交换式："></a>交换式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shellSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> tmp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap = gap / <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - gap; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + gap; j &lt; arr.length; j = j + gap) &#123;<br>                    <span class="hljs-keyword">if</span>(arr[i] &gt; arr[j])&#123;<br>                        tmp = arr[i];<br>                        arr[i] = arr[j];<br>                        arr[j] = tmp;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试之后：时间变慢 14s 左右（8w nums），主要是交换的次数变多了</p><h4 id="移动法"><a href="#移动法" class="headerlink" title="移动法"></a>移动法</h4><p>快了很多 1s （8w nums）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shellSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap = gap / <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> gap; i &lt; arr.length; i++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">insertValue</span> <span class="hljs-operator">=</span> arr[i];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">insertIndex</span> <span class="hljs-operator">=</span> i - gap;<br>                <span class="hljs-comment">//find a position</span><br>                <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertValue &lt; arr[insertIndex]) &#123;<br>                    arr[insertIndex + gap] = arr[insertIndex];<br>                    insertIndex = insertIndex - gap;<br>                &#125;<br>                <span class="hljs-comment">//insert the value</span><br>                arr[insertIndex + gap] = insertValue;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220519152508543.png" alt="image20220519152508543"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220519152607302.png" alt="image20220519152607302"></p><p>每一次遍历，我们在当前处理的数组上维护四个区域，如下图所示。</p><p><img src="https://pic1.zhimg.com/80/v2-c3595fcca57f03f8331dc1c1147b613c_720w.jpg" alt="img"></p><p>最左侧是小于等于主元的元素，中间左侧是大于主元的元素，中间右侧是待遍历的元素，最右侧是主元 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 。</p><p>每一趟遍历之前，选取最后一个数作为主元x，通过遍历整个序列，把“无限制”区域的数放到区域一或区域二中。下图展示了给定序列的一趟快速排序过程。</p><h5 id="编写思路："><a href="#编写思路：" class="headerlink" title="编写思路："></a>编写思路：</h5><ol><li>确定递归的退出条件</li><li>确定排序的4个区域</li><li>给每个区域确定index</li><li>p, r 位置不变用于后面递归传递数组位置</li><li>i：表示比 x 小的数组的最后一个元素的 index</li><li>j: 表示unrestricted 区域首元素的index</li><li>每次 j 都会增加，当 unrestricted 元素小于 x 时 ，则与 i+1 的值即比 x 大的数组的第一个元素交换，由于每次 j 都会增加，则 &gt;x 的数组个数和元素并没有受到影响。</li><li>完成一次扫描之后就递归操作</li></ol><p><img src="https://pic3.zhimg.com/80/v2-4cf353f58f8e92cadcd291d47fcb4772_720w.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The recursive procedure in quick sort.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr The array to be sorted.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p   The start index of the sub-array to be sorted.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> r   The end index of the sub-array to be sorted.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; r) &#123;<br>            <span class="hljs-comment">//pivot: pivot position</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> partition(arr, p, r);<br>            quickSort(arr, p, pivot - <span class="hljs-number">1</span>);<br>            quickSort(arr, pivot + <span class="hljs-number">1</span>, r);<br>        &#125;<br>    &#125;<br>    <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Partition the array into two parts.</span><br><span class="hljs-comment">     * get int pivot position</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * After this method, elements greater than pivot are put right, others are put left.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr The array to be sorted.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p   The start index of the sub-array to be sorted.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> r   The end index of the sub-array to be sorted.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The index of the pivot after partition.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-comment">//x: the main element waiting for cut the array</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> arr[r];<br>        <span class="hljs-comment">//i: the last index of array which elements are smaller than x</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> p - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> temp;<br>        <span class="hljs-comment">//j: the first index of array which elements don&#x27;t compare with x</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> p; j &lt; r; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &lt;= x) &#123;<br>                i++;<br>                temp = arr[j];<br>                arr[j] = arr[i];<br>                arr[i] = temp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//put x in the pivot position</span><br>        temp = arr[i + <span class="hljs-number">1</span>];<br>        arr[i + <span class="hljs-number">1</span>] = x;<br>        arr[r] = temp;<br>        <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220521155812842.png" alt="image20220521155812842"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220521155834458.png" alt="image20220521155834458"></p><h5 id="编写思路"><a href="#编写思路" class="headerlink" title="编写思路"></a>编写思路</h5><ol><li>差分方法</li><li>在分中要设置递归退出条件</li><li>并中考虑复制方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span>[] temp)</span> &#123;<br>        <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">//left merge sort</span><br>            mergeSort(arr, left, mid, temp);<br>            <span class="hljs-comment">//right merge sort</span><br>            mergeSort(arr, mid + <span class="hljs-number">1</span>, right, temp);<br>            <span class="hljs-comment">//merge</span><br>            merge(arr, left, mid, right, temp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr   array waiting for being sorted</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left  the first index of the arr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mid   the middle index of the arr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right the last index of the arr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> temp  temp array to store the temp values</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span>[] temp)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> left; <span class="hljs-comment">//first index of part one of the arr</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> mid + <span class="hljs-number">1</span>; <span class="hljs-comment">//first index of part two of the arr</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//current index of temp</span><br><br>        <span class="hljs-comment">//sorting the arr until the task of copying part one or two of the arr to temp is finished</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; mid || j &gt; right) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (arr[i] &lt;= arr[j]) &#123;<br>                temp[t] = arr[i];<br>                t++;<br>                i++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                temp[t] = arr[j];<br>                t++;<br>                j++;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-comment">//the left part of the arr directly copy to the temp</span><br>        <span class="hljs-keyword">while</span> (i &lt;= mid) &#123;<br>            temp[t] = arr[i];<br>            i++;<br>            t++;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (j &lt;= right) &#123;<br>            temp[t] = arr[j];<br>            j++;<br>            t++;<br>        &#125;<br><br>        <span class="hljs-comment">//copy the values of temp to arr in order</span><br>        <span class="hljs-comment">//note: the arr is the only one from the beginning</span><br>        <span class="hljs-comment">//the first index for each merge is not same</span><br>        t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            arr[left] = temp[t];<br>            left++;<br>            t++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220526162254229.png" alt="image20220526162254229"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220526162928419.png" alt="image20220526162928419"></p><p>编写思路：</p><ol><li>确定最大数的位数</li><li>需要设置二位数组表示桶</li><li>需要设置一维数组记录当前放入桶的数据的个数</li><li>每次取出数据到原数组时需要将记录个数的数组清空</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><br>    <span class="hljs-comment">//1. get the max num in the arr</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (max &lt; arr[i]) &#123;<br>            max = arr[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> (max + <span class="hljs-string">&quot;&quot;</span>).length();<br><br>    <span class="hljs-comment">//set a two dimension array for presenting 10 buckets</span><br>    <span class="hljs-type">int</span>[][] bucket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>][arr.length];<br><br>    <span class="hljs-comment">//using an array for recording each bucket have stored numbers of num</span><br>    <span class="hljs-type">int</span>[] bucketElementCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = <span class="hljs-number">1</span>; k &lt; maxLength; k++, n *= <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-comment">//the first round,(ones place)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">digitOfElement</span> <span class="hljs-operator">=</span> arr[i] / n % <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">//put it in the bucket</span><br>            bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[i];<br>            bucketElementCounts[digitOfElement]++;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketElementCounts.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (bucketElementCounts[i] != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; bucketElementCounts[i]; j++) &#123;<br>                    arr[index] = bucket[i][j];<br>                    index++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//when it has been put into the array, the bucketElementCounts should be set 0</span><br>            bucketElementCounts[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220526174516769.png" alt="image20220526174516769"></p><h3 id="排序对比"><a href="#排序对比" class="headerlink" title="排序对比"></a>排序对比</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220526175150936.png" alt="image20220526175150936"></p><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>有序数组中查找</p><p>编写思路：</p><ol><li>确定递归退出条件（1. 没有找到，由于每次递归 mid 值都已经对比过了，再下次设定向左或向右时，需要 -1 or +1，就会出现 left &gt; right，则退出递归，2. 找到了）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> value, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (arr[mid] &gt; value) &#123;<br>        <span class="hljs-keyword">return</span> binarySearch(arr, value, left, mid - <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; value) &#123;<br>        <span class="hljs-keyword">return</span> binarySearch(arr, value, mid + <span class="hljs-number">1</span>, right);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> mid;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于有多个相同值的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Integer&gt; <span class="hljs-title function_">binarySearch2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> value, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>            ArrayList&lt;Integer&gt; resIndexList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">return</span> resIndexList;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (arr[mid] &gt; value) &#123;<br>            <span class="hljs-keyword">return</span> binarySearch2(arr, value, left, mid - <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; value) &#123;<br>            <span class="hljs-keyword">return</span> binarySearch2(arr, value, mid + <span class="hljs-number">1</span>, right);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ArrayList&lt;Integer&gt; resIndexList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            resIndexList.add(mid);<br>            <span class="hljs-comment">//scan left</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> mid - <span class="hljs-number">1</span>; tmp &gt; <span class="hljs-number">0</span>; tmp--) &#123;<br>                <span class="hljs-keyword">if</span> (arr[tmp] == value) &#123;<br>                    resIndexList.add(tmp);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//scan right</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> mid + <span class="hljs-number">1</span>; tmp &lt; arr.length; tmp++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[tmp] == value) &#123;<br>                    resIndexList.add(tmp);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> resIndexList;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h3><p>自适应的算法，对于关键字分布均匀的查找表来说很快。</p><p>在分布不均匀的情况下不一定好于二分查找</p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220528173816616.png" alt="image20220528173816616"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insertValueSearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> value, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + (right - left) * (value - arr[left]) / (arr[right] - arr[left]);<br>    <span class="hljs-keyword">if</span> (left &gt; right || value &lt; arr[<span class="hljs-number">0</span>] || value &gt; arr[arr.length - <span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (arr[mid] &gt; value) &#123;<br>        <span class="hljs-keyword">return</span> insertValueSearch(arr, value, left, mid - <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; value) &#123;<br>        <span class="hljs-keyword">return</span> insertValueSearch(arr, value, mid + <span class="hljs-number">1</span>, right);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> mid;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="斐波拉契查找"><a href="#斐波拉契查找" class="headerlink" title="斐波拉契查找"></a>斐波拉契查找</h3><p>由于其只涉及加减理论上可能比二分查找要快。</p><p>编写思路：</p><ol><li>设置斐波那契的 index 数组</li><li>如果查找数组不够需要补充满足斐波那契数组的index值</li><li>切分查找数组为前 f[n-1]-1 和后 f[n-2]-1 两个部分 f[n]-1 (index) &#x3D;  f[n-1]-1 + f[n-2]-1 + 1 ( 1表示黄金分割位置上的数的个数)</li><li>则 黄金分割数（mid）&#x3D; low +  f[n-1]-1</li><li>如果在左边，则 high &#x3D; mid - 1；新一次的（index） mid &#x3D; low + f[n-1-1] - 1，即需要 n–</li><li>如果在右边，则 low&#x3D; mid +  1； 新一次的（index） mid &#x3D; low + f[n-1-2] - 1，即 low 已经从黄金分割数左边开始了，然后加上前面部分的开始，需要 n-&#x3D;2。</li><li>如果 mid &gt; high，则已经找到了填充数了，则返回 high 即可。</li></ol><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220528175230475.png" alt="image20220528175230475"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220528175250353.png" alt="image20220528175250353"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FibonacciSearch</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">89</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1234</span>&#125;;<br>        System.out.println(fibSearch(arr, <span class="hljs-number">8</span>));<br>    &#125;<br><br><br>    <span class="hljs-comment">//create a Fibonacci array</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] fib() &#123;<br>        <span class="hljs-type">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; maxSize; i++) &#123;<br>            f[i] = f[i - <span class="hljs-number">1</span>] + f[i - <span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> f;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * non-recursion</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr the arr for finding a target value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key target value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> index of target value in the arr</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibSearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">high</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// the index of fibonacci array</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] f = fib();<br>        <span class="hljs-keyword">while</span> (high &gt; f[k] - <span class="hljs-number">1</span>)&#123;<br>            k++;<br>        &#125;<br>        <span class="hljs-comment">//the f[k] may bigger than the length of array</span><br>        <span class="hljs-comment">//copy the array to new array</span><br>        <span class="hljs-type">int</span>[] tmp = Arrays.copyOf(arr,f[k]);<br>        <span class="hljs-comment">//use the last num to fill the tmp</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> high+<span class="hljs-number">1</span>; i &lt; tmp.length; i++) &#123;<br>            tmp[i] = arr[high];<br>        &#125;<br>        <span class="hljs-keyword">while</span> (low &lt;= high)&#123;<br>            <span class="hljs-comment">//mid is in the golden section</span><br>            <span class="hljs-comment">//f[k-1]-1 is the first part of the temp</span><br>            mid = low + f[k-<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(key &lt; tmp[mid])&#123;<br>                high = mid - <span class="hljs-number">1</span>;<br>                k--;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key &gt; tmp[mid])&#123;<br>                low = mid + <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">//the last numbers of f[k-2] of the temp</span><br>                k -= <span class="hljs-number">2</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(mid &lt;= high)&#123;<br>                    <span class="hljs-keyword">return</span>   mid;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                   <span class="hljs-comment">//have found the data which are filled in the tmp</span><br>                    <span class="hljs-keyword">return</span> high;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220529152439693.png" alt="image20220529152439693"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.hashtable;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTableDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HashTable</span> <span class="hljs-variable">hashTable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashTable</span>(<span class="hljs-number">7</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;add: add emp&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;list: list emp&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;find: find emp&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;exit&quot;</span>);<br>            key = scanner.next();<br>            <span class="hljs-keyword">switch</span> (key) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;input id&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                    System.out.println(<span class="hljs-string">&quot;input name&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br>                    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(id, name);<br>                    hashTable.add(emp);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;list&quot;</span>:<br>                    hashTable.list();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;find&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;input id&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">findId</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                    hashTable.findEmpId(findId);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>                    scanner.close();<br>                    System.exit(<span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTable</span> &#123;<br>    <span class="hljs-keyword">private</span> EmpLinkedList[] empLinkedListArray;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HashTable</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = size;<br>        <span class="hljs-comment">//it just create the empLinkedListArray and the initial value is null</span><br>        <span class="hljs-comment">//we can&#x27;t input data in null</span><br>        empLinkedListArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpLinkedList</span>[size];<br>        <span class="hljs-comment">//initializing the empLinkedListArray</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            empLinkedListArray[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpLinkedList</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Emp emp)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">empLinkedListNo</span> <span class="hljs-operator">=</span> hashFun(emp.id);<br>        empLinkedListArray[empLinkedListNo].add(emp);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            empLinkedListArray[i].list(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashFun</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">return</span> id % size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findEmpId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">empLinkedListNo</span> <span class="hljs-operator">=</span> hashFun(id);<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> empLinkedListArray[empLinkedListNo].findEmpById(id);<br>        <span class="hljs-keyword">if</span>(emp != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(emp.toString());<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the emp is not in the hashtable&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Emp next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&quot; &#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpLinkedList</span> &#123;<br>    <span class="hljs-keyword">public</span> Emp head;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Emp emp)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            head = emp;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">curEmp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            curEmp = curEmp.next;<br>        &#125;<br>        curEmp.next = emp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;the &quot;</span> + no + <span class="hljs-string">&quot; list is empty&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">curEmp</span> <span class="hljs-operator">=</span> head;<br>        System.out.print(<span class="hljs-string">&quot;the &quot;</span> + no + <span class="hljs-string">&quot; list is: &quot;</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(curEmp.toString());<br>            <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            curEmp = curEmp.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">findEmpById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">curEmp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (curEmp.id == id) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            curEmp = curEmp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> curEmp;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220531162848799.png" alt="image20220531162848799"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220531170146803.png" alt="image20220531170146803"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220531170341217.png" alt="image20220531170341217"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220531170449398.png" alt="image20220531170449398"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220531172217774.png" alt="image20220531172217774"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.binarytree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTreeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BinaryTree</span> <span class="hljs-variable">binaryTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryTree</span>();<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;albert&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;alex&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;bob&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;mary&quot;</span>);<br><br>        root.setLeft(node2);<br>        root.setRight(node3);<br>        node3.setRight(node4);<br><br>        binaryTree.setRoot(root);<br><br>        System.out.println(<span class="hljs-string">&quot;preOrder: &quot;</span>);<br>        binaryTree.preOrder();<br>        System.out.println(<span class="hljs-string">&quot;infixOrder: &quot;</span>);<br>        binaryTree.infixOrder();<br>        System.out.println(<span class="hljs-string">&quot;preOrder: &quot;</span>);<br>        binaryTree.postOrder();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode left;<br>    <span class="hljs-keyword">private</span> HeroNode right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(HeroNode left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(HeroNode right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;/&#x27;</span><span class="hljs-string">&#x27; +</span><br><span class="hljs-string">                &#x27;</span>&#125;<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //preorder traversal</span><br><span class="hljs-string">    public void preOrder()&#123;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if(this.left != null)&#123;</span><br><span class="hljs-string">            this.left.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null)&#123;</span><br><span class="hljs-string">            this.right.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    //infixorder traversal</span><br><span class="hljs-string">    public void infixOrder ()&#123;</span><br><span class="hljs-string">        if(this.left != null)&#123;</span><br><span class="hljs-string">            this.left.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if (this.right != null)&#123;</span><br><span class="hljs-string">            this.right.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    //post-order traversal</span><br><span class="hljs-string">    public void postOrder()&#123;</span><br><span class="hljs-string">        if(this.left != null)&#123;</span><br><span class="hljs-string">            this.left.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null)&#123;</span><br><span class="hljs-string">            this.right.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">//create a binary tree</span><br><span class="hljs-string">class BinaryTree&#123;</span><br><span class="hljs-string">    private HeroNode root;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void setRoot(HeroNode root) &#123;</span><br><span class="hljs-string">        this.root = root;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void preOrder()&#123;</span><br><span class="hljs-string">        if (this.root != null) &#123;</span><br><span class="hljs-string">            this.root.preOrder();</span><br><span class="hljs-string">        &#125;else &#123;</span><br><span class="hljs-string">            System.out.println(&quot;the tree is empty&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void infixOrder()&#123;</span><br><span class="hljs-string">        if (this.root != null) &#123;</span><br><span class="hljs-string">            this.root.infixOrder();</span><br><span class="hljs-string">        &#125;else &#123;</span><br><span class="hljs-string">            System.out.println(&quot;the tree is empty&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void postOrder()&#123;</span><br><span class="hljs-string">        if (this.root != null) &#123;</span><br><span class="hljs-string">            this.root.postOrder();</span><br><span class="hljs-string">        &#125;else &#123;</span><br><span class="hljs-string">            System.out.println(&quot;the tree is empty&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="前中后序查找"><a href="#前中后序查找" class="headerlink" title="前中后序查找"></a>前中后序查找</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220601161728374.png" alt="image20220601161728374"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.test.binarytree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTreeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BinaryTree</span> <span class="hljs-variable">binaryTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryTree</span>();<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;albert&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;alex&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;bob&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;mary&quot;</span>);<br><br>        root.setLeft(node2);<br>        root.setRight(node3);<br>        node3.setRight(node4);<br><br>        binaryTree.setRoot(root);<br><br>        System.out.println(<span class="hljs-string">&quot;preOrder: &quot;</span>);<br>        binaryTree.preOrder();<br>        System.out.println(<span class="hljs-string">&quot;infixOrder: &quot;</span>);<br>        binaryTree.infixOrder();<br>        System.out.println(<span class="hljs-string">&quot;preOrder: &quot;</span>);<br>        binaryTree.postOrder();<br><br>        System.out.println(binaryTree.postOrderSearch(<span class="hljs-number">4</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode left;<br>    <span class="hljs-keyword">private</span> HeroNode right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(HeroNode left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(HeroNode right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;/&#x27;</span><span class="hljs-string">&#x27; +</span><br><span class="hljs-string">                &#x27;</span>&#125;<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //preorder traversal</span><br><span class="hljs-string">    public void preOrder()&#123;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if(this.left != null)&#123;</span><br><span class="hljs-string">            this.left.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null)&#123;</span><br><span class="hljs-string">            this.right.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    //infixorder traversal</span><br><span class="hljs-string">    public void infixOrder ()&#123;</span><br><span class="hljs-string">        if(this.left != null)&#123;</span><br><span class="hljs-string">            this.left.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if (this.right != null)&#123;</span><br><span class="hljs-string">            this.right.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    //post-order traversal</span><br><span class="hljs-string">    public void postOrder()&#123;</span><br><span class="hljs-string">        if(this.left != null)&#123;</span><br><span class="hljs-string">            this.left.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null)&#123;</span><br><span class="hljs-string">            this.right.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public HeroNode preOrderSearch(int no)&#123;</span><br><span class="hljs-string">        if(this.getNo() == no)&#123;</span><br><span class="hljs-string">            return this;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        HeroNode heroNode =null;</span><br><span class="hljs-string">        if(this.left != null)&#123;</span><br><span class="hljs-string">            heroNode = this.left.preOrderSearch(no);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        //this statement is very important, it means if the we find the node is a father</span><br><span class="hljs-string">        // we can&#x27;</span>t <span class="hljs-keyword">continue</span> traverse the right sons.<br>        <span class="hljs-keyword">if</span>(heroNode != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>)&#123;<br>            heroNode = <span class="hljs-built_in">this</span>.right.preOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>)&#123;<br>            heroNode = <span class="hljs-built_in">this</span>.left.infixOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">//this statement is very important, it means if the we find the node is a father</span><br>        <span class="hljs-comment">// we can&#x27;t continue traverse the right sons.</span><br>        <span class="hljs-keyword">if</span>(heroNode != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.getNo() == no)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>)&#123;<br>            heroNode = <span class="hljs-built_in">this</span>.right.infixOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">postOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>)&#123;<br>            heroNode = <span class="hljs-built_in">this</span>.left.postOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">//this statement is very important, it means if the we find the node is a father</span><br>        <span class="hljs-comment">// we can&#x27;t continue traverse the right sons.</span><br>        <span class="hljs-keyword">if</span>(heroNode != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>)&#123;<br>            heroNode = <span class="hljs-built_in">this</span>.right.postOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">//this statement is very important, it means if the we find the node is a father</span><br>        <span class="hljs-comment">// we can&#x27;t continue traverse the next node.</span><br>        <span class="hljs-keyword">if</span>(heroNode != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.getNo() == no)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//create a binary tree</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTree</span>&#123;<br>    <span class="hljs-keyword">private</span> HeroNode root;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoot</span><span class="hljs-params">(HeroNode root)</span> &#123;<br>        <span class="hljs-built_in">this</span>.root = root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.root.preOrder();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.root.infixOrder();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.root.postOrder();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">preOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>)&#123;<br>            heroNode = <span class="hljs-built_in">this</span>.root.preOrderSearch(no);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>)&#123;<br>            heroNode = <span class="hljs-built_in">this</span>.root.infixOrderSearch(no);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">postOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>)&#123;<br>            heroNode = <span class="hljs-built_in">this</span>.root.postOrderSearch(no);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220601171650774.png" alt="image20220601171650774"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220601171959975.png" alt="image20220601171959975"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.binarytree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTreeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BinaryTree</span> <span class="hljs-variable">binaryTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryTree</span>();<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;albert&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;alex&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;bob&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;mary&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;elon&quot;</span>);<br><br>        root.setLeft(node2);<br>        root.setRight(node3);<br>        node3.setRight(node4);<br>        node3.setLeft(node5);<br><br>        binaryTree.setRoot(root);<br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        System.out.println(&quot;preOrder: &quot;);</span><br><span class="hljs-comment">//        binaryTree.preOrder();</span><br><span class="hljs-comment">//        System.out.println(&quot;infixOrder: &quot;);</span><br><span class="hljs-comment">//        binaryTree.infixOrder();</span><br><span class="hljs-comment">//        System.out.println(&quot;preOrder: &quot;);</span><br><span class="hljs-comment">//        binaryTree.postOrder();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        System.out.println(binaryTree.postOrderSearch(4));</span><br><br>        System.out.println(<span class="hljs-string">&quot;preOrder&quot;</span>);<br>        binaryTree.preOrder();<br>        binaryTree.deleteNode(<span class="hljs-number">10</span>);<br>        System.out.println(<span class="hljs-string">&quot;preOrder&quot;</span>);<br>        binaryTree.preOrder();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode left;<br>    <span class="hljs-keyword">private</span> HeroNode right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(HeroNode left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(HeroNode right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;/&#x27;</span><span class="hljs-string">&#x27; +</span><br><span class="hljs-string">                &#x27;</span>&#125;<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //preorder traversal</span><br><span class="hljs-string">    public void preOrder() &#123;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //infixorder traversal</span><br><span class="hljs-string">    public void infixOrder() &#123;</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //post-order traversal</span><br><span class="hljs-string">    public void postOrder() &#123;</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public HeroNode preOrderSearch(int no) &#123;</span><br><span class="hljs-string">        if (this.getNo() == no) &#123;</span><br><span class="hljs-string">            return this;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        HeroNode heroNode = null;</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            heroNode = this.left.preOrderSearch(no);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        //this statement is very important, it means if the we find the node is a father</span><br><span class="hljs-string">        // we can&#x27;</span>t <span class="hljs-keyword">continue</span> traverse the right sons.<br>        <span class="hljs-keyword">if</span> (heroNode != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.right.preOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.left.infixOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">//this statement is very important, it means if the we find the node is a father</span><br>        <span class="hljs-comment">// we can&#x27;t continue traverse the right sons.</span><br>        <span class="hljs-keyword">if</span> (heroNode != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getNo() == no) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.right.infixOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">postOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.left.postOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">//this statement is very important, it means if the we find the node is a father</span><br>        <span class="hljs-comment">// we can&#x27;t continue traverse the right sons.</span><br>        <span class="hljs-keyword">if</span> (heroNode != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.right.postOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">//this statement is very important, it means if the we find the node is a father</span><br>        <span class="hljs-comment">// we can&#x27;t continue traverse the next node.</span><br>        <span class="hljs-keyword">if</span> (heroNode != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getNo() == no) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.left.getNo() == no)&#123;<br>            <span class="hljs-built_in">this</span>.left = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.right.getNo() == no)&#123;<br>            <span class="hljs-built_in">this</span>.right = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.left.getNo() != no)&#123;<br>            <span class="hljs-built_in">this</span>.left.deleteNode(no);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.right.getNo() != no)&#123;<br>            <span class="hljs-built_in">this</span>.right.deleteNode(no);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//create a binary tree</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTree</span> &#123;<br>    <span class="hljs-keyword">private</span> HeroNode root;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoot</span><span class="hljs-params">(HeroNode root)</span> &#123;<br>        <span class="hljs-built_in">this</span>.root = root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.root.preOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.root.infixOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.root.postOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">preOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.root.preOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.root.infixOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">postOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.root.postOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-comment">//if the node is a left, deleting the left, if it is a father node or root, deleting the sub-tree or tree</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root.getNo() == no) &#123;<br>            <span class="hljs-built_in">this</span>.root = <span class="hljs-literal">null</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.root.deleteNode(no);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220601182514443.png" alt="image20220601182514443"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.binarytree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTreeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BinaryTree</span> <span class="hljs-variable">binaryTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryTree</span>();<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;albert&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;alex&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;bob&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;mary&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;elon&quot;</span>);<br><br>        root.setLeft(node2);<br>        root.setRight(node3);<br>        node3.setRight(node4);<br>        node3.setLeft(node5);<br><br>        binaryTree.setRoot(root);<br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        System.out.println(&quot;preOrder: &quot;);</span><br><span class="hljs-comment">//        binaryTree.preOrder();</span><br><span class="hljs-comment">//        System.out.println(&quot;infixOrder: &quot;);</span><br><span class="hljs-comment">//        binaryTree.infixOrder();</span><br><span class="hljs-comment">//        System.out.println(&quot;preOrder: &quot;);</span><br><span class="hljs-comment">//        binaryTree.postOrder();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        System.out.println(binaryTree.postOrderSearch(4));</span><br><br>        System.out.println(<span class="hljs-string">&quot;preOrder&quot;</span>);<br>        binaryTree.preOrder();<br>        binaryTree.deleteNode(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;preOrder&quot;</span>);<br>        binaryTree.preOrder();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode left;<br>    <span class="hljs-keyword">private</span> HeroNode right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(HeroNode left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(HeroNode right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;/&#x27;</span><span class="hljs-string">&#x27; +</span><br><span class="hljs-string">                &#x27;</span>&#125;<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //preorder traversal</span><br><span class="hljs-string">    public void preOrder() &#123;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //infixorder traversal</span><br><span class="hljs-string">    public void infixOrder() &#123;</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //post-order traversal</span><br><span class="hljs-string">    public void postOrder() &#123;</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public HeroNode preOrderSearch(int no) &#123;</span><br><span class="hljs-string">        if (this.getNo() == no) &#123;</span><br><span class="hljs-string">            return this;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        HeroNode heroNode = null;</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            heroNode = this.left.preOrderSearch(no);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        //this statement is very important, it means if the we find the node is a father</span><br><span class="hljs-string">        // we can&#x27;</span>t <span class="hljs-keyword">continue</span> traverse the right sons.<br>        <span class="hljs-keyword">if</span> (heroNode != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.right.preOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.left.infixOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">//this statement is very important, it means if the we find the node is a father</span><br>        <span class="hljs-comment">// we can&#x27;t continue traverse the right sons.</span><br>        <span class="hljs-keyword">if</span> (heroNode != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getNo() == no) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.right.infixOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">postOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.left.postOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">//this statement is very important, it means if the we find the node is a father</span><br>        <span class="hljs-comment">// we can&#x27;t continue traverse the right sons.</span><br>        <span class="hljs-keyword">if</span> (heroNode != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.right.postOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">//this statement is very important, it means if the we find the node is a father</span><br>        <span class="hljs-comment">// we can&#x27;t continue traverse the next node.</span><br>        <span class="hljs-keyword">if</span> (heroNode != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> heroNode;<br>        &#125;<br><br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getNo() == no) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.left.getNo() == no)&#123;<br>            <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.left.left;<br>            <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.left.right;<br>            <span class="hljs-keyword">if</span>(heroNode1 != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-built_in">this</span>.left = heroNode1;<br>                heroNode1.right = heroNode2;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(heroNode2 != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-built_in">this</span>.left = heroNode2;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.left = <span class="hljs-literal">null</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.right.getNo() == no)&#123;<br>            <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.right.left;<br>            <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.right.right;<br>            <span class="hljs-keyword">if</span>(heroNode1 != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-built_in">this</span>.right = heroNode1;<br>                heroNode1.right = heroNode2;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(heroNode2 != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-built_in">this</span>.right = heroNode2;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.right = <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.left.getNo() != no)&#123;<br>            <span class="hljs-built_in">this</span>.left.deleteNode(no);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.right.getNo() != no)&#123;<br>            <span class="hljs-built_in">this</span>.right.deleteNode(no);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//create a binary tree</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTree</span> &#123;<br>    <span class="hljs-keyword">private</span> HeroNode root;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoot</span><span class="hljs-params">(HeroNode root)</span> &#123;<br>        <span class="hljs-built_in">this</span>.root = root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.root.preOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.root.infixOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.root.postOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">preOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.root.preOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.root.infixOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">postOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">heroNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br>            heroNode = <span class="hljs-built_in">this</span>.root.postOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;the tree is empty&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> heroNode;<br>    &#125;<br><br>    <span class="hljs-comment">//if the node is a left, deleting the left, if it is a father node or root, deleting the sub-tree or tree</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.root.getNo() == no) &#123;<br>            <span class="hljs-built_in">this</span>.root = <span class="hljs-literal">null</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.root.deleteNode(no);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序存储二叉树"><a href="#顺序存储二叉树" class="headerlink" title="顺序存储二叉树"></a>顺序存储二叉树</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220602160719696.png" alt="image20220602160719696"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220602162546429.png" alt="image20220602162546429"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.binarytree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrBinaryTreeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-type">ArrBinaryTree</span> <span class="hljs-variable">arrBinaryTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrBinaryTree</span>();<br>        arrBinaryTree.preOrder(arr, <span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br>        arrBinaryTree.infixOrder(arr, <span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br>        arrBinaryTree.postOrder(arr, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrBinaryTree</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (arr.length == <span class="hljs-number">0</span> || arr == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;array is empty&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.println(arr[index]);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">1</span> &lt; arr.length) &#123;<br>            preOrder(arr, <span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">2</span> &lt; arr.length) &#123;<br>            preOrder(arr, <span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (arr.length == <span class="hljs-number">0</span> || arr == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;array is empty&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">1</span> &lt; arr.length) &#123;<br>            infixOrder(arr, <span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>);<br>        &#125;<br>        System.out.println(arr[index]);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">2</span> &lt; arr.length) &#123;<br>            infixOrder(arr, <span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (arr.length == <span class="hljs-number">0</span> || arr == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;array is empty&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">1</span> &lt; arr.length) &#123;<br>            postOrder(arr, <span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">2</span> &lt; arr.length) &#123;<br>            postOrder(arr, <span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>);<br>        &#125;<br>        System.out.println(arr[index]);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="线索化二叉树"><a href="#线索化二叉树" class="headerlink" title="线索化二叉树"></a>线索化二叉树</h3><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220602165756614.png" alt="image20220602165756614"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220602165925195.png" alt="image20220602165925195"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220602170459347.png" alt="image20220602170459347"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.binarytree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedBinaryTreeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">14</span>, <span class="hljs-string">&quot;a&quot;</span>);<br><br>        <span class="hljs-type">ThreadedBinaryTree</span> <span class="hljs-variable">threadedBinaryTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadedBinaryTree</span>();<br>        threadedBinaryTree.setRoot(a);<br>        a.setLeft(b);<br>        a.setRight(c);<br>        b.setLeft(d);<br>        b.setRight(e);<br>        c.setLeft(f);<br><br>        threadedBinaryTree.threadedNode();<br>        System.out.println(e.getLeft());<br>        System.out.println(e.getRight());<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Node left;<br>    <span class="hljs-keyword">private</span> Node right;<br><br>    <span class="hljs-comment">//if it is 1, the left is the front-node</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> leftType;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> RightType;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLeftType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> leftType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeftType</span><span class="hljs-params">(<span class="hljs-type">int</span> leftType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.leftType = leftType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRightType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> RightType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRightType</span><span class="hljs-params">(<span class="hljs-type">int</span> rightType)</span> &#123;<br>        RightType = rightType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(Node left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(Node right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;/&#x27;</span><span class="hljs-string">&#x27; +</span><br><span class="hljs-string">                &#x27;</span>&#125;<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //preorder traversal</span><br><span class="hljs-string">    public void preOrder() &#123;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //infixorder traversal</span><br><span class="hljs-string">    public void infixOrder() &#123;</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //post-order traversal</span><br><span class="hljs-string">    public void postOrder() &#123;</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">//create a binary tree</span><br><span class="hljs-string">class ThreadedBinaryTree &#123;</span><br><span class="hljs-string">    private Node root;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    private Node pre;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void threadedNode()&#123;</span><br><span class="hljs-string">        threadedNode(root);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void threadedNode(Node node)&#123;</span><br><span class="hljs-string">        if(node == null)&#123;</span><br><span class="hljs-string">            return;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        threadedNode(node.getLeft());</span><br><span class="hljs-string">        if(node.getLeft() == null)&#123;</span><br><span class="hljs-string">            node.setLeft(pre);</span><br><span class="hljs-string">            node.setLeftType(1);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if(pre != null &amp;&amp; pre.getRight() == null)&#123;</span><br><span class="hljs-string">            pre.setRight(node);</span><br><span class="hljs-string">            pre.setRightType(1);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        pre = node;</span><br><span class="hljs-string">        threadedNode(node.getRight());</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void setRoot(Node root) &#123;</span><br><span class="hljs-string">        this.root = root;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void preOrder() &#123;</span><br><span class="hljs-string">        if (this.root != null) &#123;</span><br><span class="hljs-string">            this.root.preOrder();</span><br><span class="hljs-string">        &#125; else &#123;</span><br><span class="hljs-string">            System.out.println(&quot;the tree is empty&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void infixOrder() &#123;</span><br><span class="hljs-string">        if (this.root != null) &#123;</span><br><span class="hljs-string">            this.root.infixOrder();</span><br><span class="hljs-string">        &#125; else &#123;</span><br><span class="hljs-string">            System.out.println(&quot;the tree is empty&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void postOrder() &#123;</span><br><span class="hljs-string">        if (this.root != null) &#123;</span><br><span class="hljs-string">            this.root.postOrder();</span><br><span class="hljs-string">        &#125; else &#123;</span><br><span class="hljs-string">            System.out.println(&quot;the tree is empty&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220602183713764.png" alt="image20220602183713764"></p><p>编写思路：</p><ol><li>确定它是哪种遍历，如中序遍历</li><li>每次输出前都要找到当前子树的左叶子节点</li><li>然后输出</li><li>如果当前的节点有后继节点，循环输出后继节点</li><li>没有，则将右子节点设为当前节点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.binarytree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedBinaryTreeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">14</span>, <span class="hljs-string">&quot;a&quot;</span>);<br><br>        <span class="hljs-type">ThreadedBinaryTree</span> <span class="hljs-variable">threadedBinaryTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadedBinaryTree</span>();<br>        threadedBinaryTree.setRoot(a);<br>        a.setLeft(b);<br>        a.setRight(c);<br>        b.setLeft(d);<br>        b.setRight(e);<br>        c.setLeft(f);<br><br>        threadedBinaryTree.threadedNode();<br>        System.out.println(e.getLeft());<br>        System.out.println(e.getRight());<br>        threadedBinaryTree.threadedList();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Node left;<br>    <span class="hljs-keyword">private</span> Node right;<br><br>    <span class="hljs-comment">//if it is 1, the left is the front-node</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> leftType;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> RightType;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLeftType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> leftType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeftType</span><span class="hljs-params">(<span class="hljs-type">int</span> leftType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.leftType = leftType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRightType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> RightType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRightType</span><span class="hljs-params">(<span class="hljs-type">int</span> rightType)</span> &#123;<br>        RightType = rightType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(Node left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(Node right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;/&#x27;</span><span class="hljs-string">&#x27; +</span><br><span class="hljs-string">                &#x27;</span>&#125;<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //preorder traversal</span><br><span class="hljs-string">    public void preOrder() &#123;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.preOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //infixorder traversal</span><br><span class="hljs-string">    public void infixOrder() &#123;</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.infixOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //post-order traversal</span><br><span class="hljs-string">    public void postOrder() &#123;</span><br><span class="hljs-string">        if (this.left != null) &#123;</span><br><span class="hljs-string">            this.left.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (this.right != null) &#123;</span><br><span class="hljs-string">            this.right.postOrder();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        System.out.println(this);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">//create a binary tree</span><br><span class="hljs-string">class ThreadedBinaryTree &#123;</span><br><span class="hljs-string">    private Node root;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    private Node pre;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    private boolean haveThreaded = false;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void setRoot(Node root) &#123;</span><br><span class="hljs-string">        this.root = root;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void threadedNode() &#123;</span><br><span class="hljs-string">        threadedNode(root);</span><br><span class="hljs-string">        haveThreaded = true;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void threadedNode(Node node) &#123;</span><br><span class="hljs-string">        if (node == null) &#123;</span><br><span class="hljs-string">            return;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        threadedNode(node.getLeft());</span><br><span class="hljs-string">        if (node.getLeft() == null) &#123;</span><br><span class="hljs-string">            node.setLeft(pre);</span><br><span class="hljs-string">            node.setLeftType(1);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (pre != null &amp;&amp; pre.getRight() == null) &#123;</span><br><span class="hljs-string">            pre.setRight(node);</span><br><span class="hljs-string">            pre.setRightType(1);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        pre = node;</span><br><span class="hljs-string">        threadedNode(node.getRight());</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void threadedList() &#123;</span><br><span class="hljs-string">        if (haveThreaded == false) &#123;</span><br><span class="hljs-string">            System.out.println(&quot;it hasn&#x27;</span>t threaded<span class="hljs-string">&quot;);</span><br><span class="hljs-string">            return;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        if (root == null) &#123;</span><br><span class="hljs-string">            System.out.println(&quot;</span>tree is empty<span class="hljs-string">&quot;);</span><br><span class="hljs-string">            return;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        Node tmpNode = null;</span><br><span class="hljs-string">        tmpNode = root;</span><br><span class="hljs-string">        while (tmpNode != null)&#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">            //find the left node</span><br><span class="hljs-string">            while (tmpNode.getLeftType() == 0)&#123;</span><br><span class="hljs-string">                tmpNode = tmpNode.getLeft();</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">            System.out.println(tmpNode);</span><br><span class="hljs-string">            //print right</span><br><span class="hljs-string">            while (tmpNode.getRightType() == 1)&#123;</span><br><span class="hljs-string">                tmpNode = tmpNode.getRight();</span><br><span class="hljs-string">                System.out.println(tmpNode);</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">            tmpNode = tmpNode.getRight();</span><br><span class="hljs-string"></span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void preOrder() &#123;</span><br><span class="hljs-string">        if (this.root != null) &#123;</span><br><span class="hljs-string">            this.root.preOrder();</span><br><span class="hljs-string">        &#125; else &#123;</span><br><span class="hljs-string">            System.out.println(&quot;</span>the tree is empty<span class="hljs-string">&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void infixOrder() &#123;</span><br><span class="hljs-string">        if (this.root != null) &#123;</span><br><span class="hljs-string">            this.root.infixOrder();</span><br><span class="hljs-string">        &#125; else &#123;</span><br><span class="hljs-string">            System.out.println(&quot;</span>the tree is empty<span class="hljs-string">&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void postOrder() &#123;</span><br><span class="hljs-string">        if (this.root != null) &#123;</span><br><span class="hljs-string">            this.root.postOrder();</span><br><span class="hljs-string">        &#125; else &#123;</span><br><span class="hljs-string">            System.out.println(&quot;</span>the tree is empty<span class="hljs-string">&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220607104434752.png" alt="image20220607104434752"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220607104525537.png" alt="image20220607104525537"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220607104741414.png" alt="image20220607104741414"></p><p>编写思路：</p><ol><li>根据需求先变成大顶堆还是小顶堆。</li><li>对树中数据的处理是从左至右，从下至上</li><li>先编写对 i 节点的子树的处理，先比较其左右字节的，如果是大顶堆，让大的子节点与 i 节点比较,并交换</li><li>对与完全二叉树层数和节点的关系是 n &#x3D; 2^(l-1)-1 + m；l：层数；m：最后一层的节点数 n: 节点数</li><li>如果节点有10个， l &#x3D; 4, 从倒数第二层开始处理子树数据则 i 节点 &#x3D; 10&#x2F;2 -1 </li><li>处理完之后从数中 pop 出根节点 （与最后一个叶节点交换）</li><li>然后从顶部开始重新整理数，因为每次只 pop 一个根节点，只有一个数据发生了变化，所以可以从顶部直接循环，即如果和左子节点交换，右子节点为父节点的子树一定是有序的。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.binarytree;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeapSort</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>&#125;;<br>        heapSort(arr);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//to adjust the tree to the big top heap</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr.length/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span> ; i--) &#123;<br>            adjustHeap(arr,i, arr.length);<br>        &#125;<br><br>        <span class="hljs-comment">//pop the root</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr.length-<span class="hljs-number">1</span>; i &gt;<span class="hljs-number">0</span> ; i--) &#123;<br>            tmp = arr[i];<br>            arr[i] = arr[<span class="hljs-number">0</span>];<br>            arr[<span class="hljs-number">0</span>] = tmp;<br>            adjustHeap(arr,<span class="hljs-number">0</span>, i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The method is to adjust the sub-tree of node i</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr    the array needs to be adjust</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i      the index of non-leaf node</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length the number of nodes need to be adjust</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adjustHeap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> arr[i];<br>        <span class="hljs-comment">//k: left son node</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; k &lt; length; k = k * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//for improve the efficiency</span><br>            <span class="hljs-keyword">if</span> (k + <span class="hljs-number">1</span> &lt; length &amp;&amp; arr[k] &lt; arr[k + <span class="hljs-number">1</span>]) &#123;<br>                k++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (arr[k] &gt; tmp)&#123;<br>                arr[i] = arr[k];<br>                i = k;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        arr[i] = tmp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="赫夫曼树"><a href="#赫夫曼树" class="headerlink" title="赫夫曼树"></a>赫夫曼树</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608092735793.png" alt="image20220608092735793"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608092837206.png" alt="image20220608092837206"></p><p>到 13 节点的路径长度是 2， 带权路径长度是 2*13 &#x3D; 26</p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608093210215.png" alt="image20220608093210215"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608093548874.png" alt="image20220608093548874"></p><p>编写思路：</p><ol><li>对节点排序，如果使用集合的排序方法（Collections.sort(para)）需要实现Comparable 接口中的compareTo 方法</li><li>每次操作前先排序</li><li>每次生成子树所使用的节点需要从List 中删除并将其父节点放入 list</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.huffmantree;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuffmanTree</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">29</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> createHuffmanTree(arr);<br>        preOrderTree(root);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrderTree</span><span class="hljs-params">(Node root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Tree is empty&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.preOrder();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title function_">createHuffmanTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        List&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : arr) &#123;<br>            nodes.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value));<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span>(nodes.size() == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            Collections.sort(nodes);<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">leftNode</span> <span class="hljs-operator">=</span> nodes.get(<span class="hljs-number">0</span>);<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">rightNode</span> <span class="hljs-operator">=</span> nodes.get(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//create a new tree</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(leftNode.getValue() + rightNode.getValue());<br>            parent.setLeft(leftNode);<br>            parent.setRight(rightNode);<br>            <span class="hljs-comment">//delete nodes have been done</span><br>            nodes.remove(leftNode);<br>            nodes.remove(rightNode);<br>            nodes.add(parent);<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> nodes.get(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Node&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">private</span> Node left;<br>    <span class="hljs-keyword">private</span> Node right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(Node left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(Node right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;value=&quot;</span> + value +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Node o)</span> &#123;<br>        <span class="hljs-comment">//from lower to bigger</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value - o.value;<br>    &#125;<br><br>    <span class="hljs-comment">//preOrder traverse</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.left.preOrder();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.right.preOrder();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="赫夫曼编码"><a href="#赫夫曼编码" class="headerlink" title="赫夫曼编码"></a>赫夫曼编码</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608101423388.png" alt="image20220608101423388"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608102215822.png" alt="image20220608102215822"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608102344617.png" alt="image20220608102344617"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608102731486.png" alt="image20220608102731486"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608104018106.png" alt="image20220608104018106"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608102957760.png" alt="image20220608102957760"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608103805911.png" alt="image20220608103805911"></p><h4 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608104350634.png" alt="image20220608104350634"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608104731606.png" alt="image20220608104731606"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.HuffmanCode;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.CharBuffer;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuffmanCode</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//String srcFile = &quot;input/123.jpg&quot;;</span><br>        <span class="hljs-comment">//String dstFile = &quot;input/zip123.zip&quot;;</span><br>        <span class="hljs-comment">//(srcFile, dstFile);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">zipFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;input/zip123.zip&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dstFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;input/456.jpg&quot;</span>;<br>        unZipFile(zipFile,dstFile);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        String content = &quot;i like like like java do you like a java&quot;;</span><br><span class="hljs-comment">        //System.out.println(Arrays.toString(huffmanZip(content)));</span><br><span class="hljs-comment">        byte[] contentBytes = content.getBytes();</span><br><span class="hljs-comment">        byte[] huffmanBytes = huffmanZip(contentBytes);</span><br><span class="hljs-comment">        byte[] decode = decode(huffmanCodes, huffmanBytes);</span><br><span class="hljs-comment">        for (byte b : decode) &#123;</span><br><span class="hljs-comment">            System.out.print((char) (int) b);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unZipFile</span><span class="hljs-params">(String zipFile, String dstFile)</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(zipFile);<br>            ois = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(is);<br>            <span class="hljs-comment">//read huffmanBytes</span><br>            <span class="hljs-type">byte</span>[] huffmanBytes = (<span class="hljs-type">byte</span>[]) ois.readObject();<br>            <span class="hljs-comment">//read huffmanCode</span><br>            Map&lt;Byte, String&gt; huffmanCode = (Map&lt;Byte, String&gt;) ois.readObject();<br><br>            <span class="hljs-type">byte</span>[] decode = decode(huffmanCode, huffmanBytes);<br><br>            os = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(dstFile);<br><br>            os.write(decode);<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                os.close();<br>                ois.close();<br>                is.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * encode a file</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcFile path of source file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dstFile path of finished zipped file</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">zipFile</span><span class="hljs-params">(String srcFile, String dstFile)</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFile);<br>            <span class="hljs-comment">//create type array, fis.available(): size of file</span><br>            <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[fis.available()];<br>            fis.read(b);<br>            <span class="hljs-type">byte</span>[] huffmanBytes = huffmanZip(b);<br>            <span class="hljs-comment">//create a output stream</span><br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(dstFile);<br>            oos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);<br>            oos.writeObject(huffmanBytes);<br><br>            <span class="hljs-comment">//write the code into the file</span><br>            oos.writeObject(huffmanCodes);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fis.close();<br>                oos.close();<br>                fos.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">//decompression</span><br>    <span class="hljs-comment">//1. translate huffman Zip to huffman code string</span><br>    <span class="hljs-comment">//2. translate string to initial string</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> huffmanCode  huffman code table</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> huffmanBytes huffman Zip</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decode(Map&lt;Byte, String&gt; huffmanCode, <span class="hljs-type">byte</span>[] huffmanBytes) &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; huffmanBytes.length; i++) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> !(i == huffmanBytes.length - <span class="hljs-number">1</span>);<br>            stringBuilder.append(byteToBitString(flag, huffmanBytes[i]));<br>        &#125;<br>        <span class="hljs-comment">//To swap the key and value of huffman code for quickly querying find value</span><br>        HashMap&lt;String, Byte&gt; deHuffman = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Byte, String&gt; entry : huffmanCode.entrySet()) &#123;<br>            deHuffman.put(entry.getValue(), entry.getKey());<br>        &#125;<br><br>        ArrayList&lt;Byte&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; stringBuilder.length()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// for scan a completed number, such as 111</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-type">Byte</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">while</span> (flag) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> stringBuilder.substring(i, i + index);<br>                tmp = deHuffman.get(key);<br>                <span class="hljs-keyword">if</span> (tmp != <span class="hljs-literal">null</span>) &#123;<br>                    list.add(tmp);<br>                    i += index;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    index++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] initialBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[list.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; list.size(); j++) &#123;<br>            initialBytes[j] = list.get(j);<br>        &#125;<br>        <span class="hljs-keyword">return</span> initialBytes;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">byteToBitString</span><span class="hljs-params">(<span class="hljs-type">boolean</span> flag, <span class="hljs-type">byte</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> b; <span class="hljs-comment">// translate b to int</span><br>        <span class="hljs-comment">//if it is not the last number</span><br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            tmp |= <span class="hljs-number">256</span>; <span class="hljs-comment">//bitwise OR 256 1 0000 0000 | 0000 0001 = 1 0000 0001</span><br>        &#125;<br>        <span class="hljs-comment">//System.out.println(tmp);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> Integer.toBinaryString(tmp); <span class="hljs-comment">//translate tmp into binary complement</span><br>        <span class="hljs-keyword">if</span> (flag || tmp &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> str.substring(str.length() - <span class="hljs-number">8</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> str;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">//To seal the huffman code zip</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] huffmanZip(<span class="hljs-type">byte</span>[] contentBytes) &#123;<br><br>        <span class="hljs-comment">//put the contentBytes into a list</span><br>        List&lt;Node&gt; nodes = getNodes(contentBytes);<br><br>        <span class="hljs-comment">//transform the list to a huffman tree</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> createHuffmanTree(nodes);<br><br>        <span class="hljs-comment">//get the huffman code</span><br>        HashMap&lt;Byte, String&gt; huffmanCode = getCode(root);<br><br>        <span class="hljs-comment">//return the zip string translated by huffman code</span><br>        <span class="hljs-keyword">return</span> zip(contentBytes, huffmanCode);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * to translate the string to zip code</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bytes       the initial byte of string</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> huffmanCode the huffman code</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the huffman code of the initial string</span><br><span class="hljs-comment">     * 10101000....</span><br><span class="hljs-comment">     * put 8 bits in a byte huffmanCodeBytes[0] = 10101000 -&gt; -88</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] zip(<span class="hljs-type">byte</span>[] bytes, Map&lt;Byte, String&gt; huffmanCode) &#123;<br>        <span class="hljs-comment">//1. translate huffmanCode to huffman string</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : bytes) &#123;<br>            stringBuilder.append(huffmanCode.get(b));<br>        &#125;<br><br>        <span class="hljs-comment">//to calculate the number of huffmanCodeBytes</span><br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">if</span> (stringBuilder.length() % <span class="hljs-number">8</span> == <span class="hljs-number">0</span>) &#123;<br>            len = stringBuilder.length() / <span class="hljs-number">8</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            len = stringBuilder.length() / <span class="hljs-number">8</span> + <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-type">byte</span>[] huffmanCodeBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[len];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; stringBuilder.length(); i += <span class="hljs-number">8</span>) &#123;<br>            String strByte;<br>            <span class="hljs-keyword">if</span> (i + <span class="hljs-number">8</span> &gt; stringBuilder.length()) &#123;<br>                strByte = stringBuilder.substring(i);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                strByte = stringBuilder.substring(i, i + <span class="hljs-number">8</span>);<br>            &#125;<br>            huffmanCodeBytes[index] = (<span class="hljs-type">byte</span>) Integer.parseInt(strByte, <span class="hljs-number">2</span>);<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> huffmanCodeBytes;<br>    &#125;<br><br>    <span class="hljs-comment">//To generate Huffman code</span><br>    <span class="hljs-comment">//1. put huffman code in a map Map&lt;Byte, String&gt; 32-&gt;01...</span><br>    <span class="hljs-comment">//2. using a StringBuilder to store path of leaf</span><br>    <span class="hljs-keyword">static</span> HashMap&lt;Byte, String&gt; huffmanCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Byte, String&gt; <span class="hljs-title function_">getCode</span><span class="hljs-params">(Node root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The tree is empty&quot;</span>);<br>        &#125;<br>        getCode(root, <span class="hljs-string">&quot;&quot;</span>, stringBuilder);<br>        <span class="hljs-keyword">return</span> huffmanCodes;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * transform the leaves to huffman code in a map</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node          the input node</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code          path: left node: 0 ,right node: 1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stringBuilder combine path</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">(Node node, String code, StringBuilder stringBuilder)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(stringBuilder);<br>        stringBuilder2.append(code);<br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//node is non-leaf node</span><br>            <span class="hljs-keyword">if</span> (node.data == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//recursion left</span><br>                getCode(node.left, <span class="hljs-string">&quot;0&quot;</span>, stringBuilder2);<br>                <span class="hljs-comment">//recursion right</span><br>                getCode(node.right, <span class="hljs-string">&quot;1&quot;</span>, stringBuilder2);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                huffmanCodes.put(node.data, stringBuilder2.toString());<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrderTree</span><span class="hljs-params">(Node root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;the Tree is empty&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.preOrder();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title function_">createHuffmanTree</span><span class="hljs-params">(List&lt;Node&gt; nodes)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (nodes.size() == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            nodes.sort((node1, node2) -&gt; &#123;<br>                <span class="hljs-keyword">return</span> node1.weight - node2.weight;<br>            &#125;);<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">leftNode</span> <span class="hljs-operator">=</span> nodes.get(<span class="hljs-number">0</span>);<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">rightNode</span> <span class="hljs-operator">=</span> nodes.get(<span class="hljs-number">1</span>);<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, leftNode.weight + rightNode.weight);<br>            parent.left = leftNode;<br>            parent.right = rightNode;<br>            nodes.remove(leftNode);<br>            nodes.remove(rightNode);<br>            nodes.add(parent);<br>        &#125;<br>        <span class="hljs-keyword">return</span> nodes.get(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Node&gt; <span class="hljs-title function_">getNodes</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>        List&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//using map to store each number of char</span><br>        Map&lt;Byte, Integer&gt; counts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : bytes) &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> counts.get(b);<br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-literal">null</span>) &#123;<br>                counts.put(b, <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                counts.put(b, count + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Byte, Integer&gt; entry : counts.entrySet()) &#123;<br>            nodes.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(entry.getKey(), entry.getValue()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> nodes;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//class Node implements Comparable&lt;Node&gt;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    Byte data; <span class="hljs-comment">// store data &#x27;a&#x27; =&gt; 97</span><br>    <span class="hljs-type">int</span> weight; <span class="hljs-comment">// number of char</span><br>    Node left;<br>    Node right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Byte data, <span class="hljs-type">int</span> weight)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.weight = weight;<br>    &#125;<br><br><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public int compareTo(Node o) &#123;</span><br><span class="hljs-comment">//        return this.weight - o.weight;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;data=&quot;</span> + data +<br>                <span class="hljs-string">&quot;, weight=&quot;</span> + weight +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.left.preOrder();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.right.preOrder();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="小节（注意事项"><a href="#小节（注意事项" class="headerlink" title="小节（注意事项)"></a>小节（注意事项)</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608145331875.png" alt="image20220608145331875"></p><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608160908156.png" alt="image20220608160908156"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608161041032.png" alt="image20220608161041032"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.binarysorttree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySortTreeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-type">BinarySortTree</span> <span class="hljs-variable">bsTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinarySortTree</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            bsTree.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(i));<br>        &#125;<br>        bsTree.infixOrder();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySortTree</span> &#123;<br>    <span class="hljs-keyword">private</span> Node root;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            root = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            root.add(node);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.infixOrder();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">private</span> Node left;<br>    <span class="hljs-keyword">private</span> Node right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(Node left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(Node right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;value=&quot;</span> + value +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (node.value &lt; <span class="hljs-built_in">this</span>.value) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.left = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.left.add(node);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.right = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.right.add(node);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.left.infixOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.right.infixOrder();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除节点-1"><a href="#删除节点-1" class="headerlink" title="删除节点"></a>删除节点</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608165024925.png" alt="image20220608165024925"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608181611936.png" alt="image20220608181611936"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608181657703.png" alt="image20220608181657703"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608181727981.png" alt="image20220608181727981"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.binarysorttree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySortTreeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>&#125;;<br>        <span class="hljs-type">BinarySortTree</span> <span class="hljs-variable">bsTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinarySortTree</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            bsTree.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(i));<br>        &#125;<br>        bsTree.infixOrder();<br>        System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br>        bsTree.delNode(<span class="hljs-number">2</span>);<br>        bsTree.delNode(<span class="hljs-number">5</span>);<br>        bsTree.delNode(<span class="hljs-number">9</span>);<br>        bsTree.delNode(<span class="hljs-number">12</span>);<br>        bsTree.delNode(<span class="hljs-number">7</span>);<br>        bsTree.delNode(<span class="hljs-number">3</span>);<br>        bsTree.delNode(<span class="hljs-number">10</span>);<br>        bsTree.delNode(<span class="hljs-number">1</span>);<br><br>        bsTree.infixOrder();<br>        bsTree.getRoot();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySortTree</span> &#123;<br>    <span class="hljs-keyword">private</span> Node root;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getRoot</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            root = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            root.add(node);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.infixOrder();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> root.search(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">searchParent</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> root.searchParent(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">targetNode</span> <span class="hljs-operator">=</span> search(value);<br>            <span class="hljs-keyword">if</span> (targetNode == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (root.getLeft() == <span class="hljs-literal">null</span> &amp;&amp; root.getRight() == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (root.getValue() == value) &#123;<br>                    root = <span class="hljs-literal">null</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//To find parent node of target node</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">parentNode</span> <span class="hljs-operator">=</span> searchParent(value);<br><br>            <span class="hljs-comment">//if the target node is leaf node</span><br>            <span class="hljs-keyword">if</span> (targetNode.getLeft() == <span class="hljs-literal">null</span> &amp;&amp; targetNode.getRight() == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (parentNode.getLeft() != <span class="hljs-literal">null</span> &amp;&amp;<br>                        parentNode.getLeft().getValue() == value) &#123;<br>                    parentNode.setLeft(<span class="hljs-literal">null</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parentNode.getRight() != <span class="hljs-literal">null</span> &amp;&amp;<br>                        parentNode.getRight().getValue() == value) &#123;<br>                    parentNode.setRight(<span class="hljs-literal">null</span>);<br>                &#125;<br><br>                <span class="hljs-comment">//if the target node has two sub-trees</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetNode.getLeft() != <span class="hljs-literal">null</span> &amp;&amp;<br>                    targetNode.getRight() != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">minValue</span> <span class="hljs-operator">=</span> delRightTreeMin(targetNode.getRight());<br>                targetNode.setValue(minValue);<br><br><br>                <span class="hljs-comment">//if the target node has one sub-tree</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//if target node have left node</span><br>                <span class="hljs-keyword">if</span> (targetNode.getLeft() != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//need to consider the parent node is null</span><br>                    <span class="hljs-keyword">if</span>(parentNode != <span class="hljs-literal">null</span>)&#123;<br>                        <span class="hljs-comment">//if target node is the left node of parent node</span><br>                        <span class="hljs-keyword">if</span> (parentNode.getLeft().getValue() == value) &#123;<br>                            parentNode.setLeft(targetNode.getLeft());<br>                        &#125;<br>                        <span class="hljs-comment">//if target node is the right node of parent node</span><br>                        <span class="hljs-keyword">else</span> &#123;<br>                            parentNode.setRight(targetNode.getLeft());<br>                        &#125;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        root = targetNode.getLeft();<br>                    &#125;<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//if target node have right node</span><br>                    <span class="hljs-comment">//if target node is the left node of parent node</span><br>                    <span class="hljs-comment">//need to consider the parent node is null</span><br>                    <span class="hljs-keyword">if</span>(parentNode != <span class="hljs-literal">null</span>)&#123;<br>                        <span class="hljs-keyword">if</span> (parentNode.getLeft().getValue() == value) &#123;<br>                            parentNode.setLeft(targetNode.getRight());<br>                        &#125;<br>                        <span class="hljs-comment">//if target node is the right node of parent node</span><br>                        <span class="hljs-keyword">else</span> &#123;<br>                            parentNode.setRight(targetNode.getRight());<br>                        &#125;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        root = targetNode.getRight();<br>                    &#125;<br><br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//To find the min value of the right sub-tree</span><br>    <span class="hljs-comment">//return the min value to give the target node</span><br>    <span class="hljs-comment">//delete the min node</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delRightTreeMin</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> node;<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">while</span> (tmp.getLeft() != <span class="hljs-literal">null</span>) &#123;<br>            tmp = tmp.getLeft();<br>        &#125;<br>        delNode(tmp.getValue());<br>        <span class="hljs-keyword">return</span> tmp.getValue();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">private</span> Node left;<br>    <span class="hljs-keyword">private</span> Node right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(Node left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(Node right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;value=&quot;</span> + value +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (node.value &lt; <span class="hljs-built_in">this</span>.value) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.left = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.left.add(node);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.right = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.right.add(node);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.left.infixOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.right.infixOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//To find the node needed to be deleted</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-built_in">this</span>.value) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-built_in">this</span>.value) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.left.search(value);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.right.search(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//To find the parent node of the node needed to be deleted</span><br>    <span class="hljs-comment">// value: for searching</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">searchParent</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.left.value == value) ||<br>                (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.right.value == value)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-built_in">this</span>.value &amp;&amp; <span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.left.searchParent(value);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt;= <span class="hljs-built_in">this</span>.value &amp;&amp; <span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.right.searchParent(value);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="平衡二叉树-AVL-树"><a href="#平衡二叉树-AVL-树" class="headerlink" title="平衡二叉树 AVL 树"></a>平衡二叉树 AVL 树</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608183040752.png" alt="image20220608183040752"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608183119364.png" alt="image20220608183119364"></p><h4 id="左旋转"><a href="#左旋转" class="headerlink" title="左旋转"></a>左旋转</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608183244812.png" alt="image20220608183244812"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220608183356277.png" alt="image20220608183356277"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.avl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AvlTreeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;;<br>        <span class="hljs-type">AvlTree</span> <span class="hljs-variable">avlTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AvlTree</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            avlTree.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(i));<br>        &#125;<br>        avlTree.infixOrder();<br>        System.out.println(<span class="hljs-string">&quot;The height of tree: &quot;</span> + avlTree.getRoot().height());<br>        System.out.println(<span class="hljs-string">&quot;The height of left sub-tree: &quot;</span> + avlTree.getRoot().getLeft().height());<br>        System.out.println(<span class="hljs-string">&quot;The height of right sub-tree: &quot;</span> + avlTree.getRoot().getRight().height());<br>        System.out.println(<span class="hljs-string">&quot;balance:&quot;</span>);<br><span class="hljs-comment">//        avlTree.getRoot().leftRotate();</span><br><span class="hljs-comment">//        avlTree.infixOrder();</span><br><span class="hljs-comment">//        System.out.println(&quot;The height of tree: &quot; + avlTree.getRoot().height());</span><br><span class="hljs-comment">//        System.out.println(&quot;The height of left sub-tree: &quot; + avlTree.getRoot().getLeft().height());</span><br><span class="hljs-comment">//        System.out.println(&quot;The height of right sub-tree: &quot; + avlTree.getRoot().getRight().height());</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AvlTree</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Node root;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getRoot</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            root = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            root.add(node);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.infixOrder();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> root.search(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">searchParent</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> root.searchParent(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">targetNode</span> <span class="hljs-operator">=</span> search(value);<br>            <span class="hljs-keyword">if</span> (targetNode == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (root.getLeft() == <span class="hljs-literal">null</span> &amp;&amp; root.getRight() == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (root.getValue() == value) &#123;<br>                    root = <span class="hljs-literal">null</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//To find parent node of target node</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">parentNode</span> <span class="hljs-operator">=</span> searchParent(value);<br><br>            <span class="hljs-comment">//if the target node is leaf node</span><br>            <span class="hljs-keyword">if</span> (targetNode.getLeft() == <span class="hljs-literal">null</span> &amp;&amp; targetNode.getRight() == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (parentNode.getLeft() != <span class="hljs-literal">null</span> &amp;&amp;<br>                        parentNode.getLeft().getValue() == value) &#123;<br>                    parentNode.setLeft(<span class="hljs-literal">null</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parentNode.getRight() != <span class="hljs-literal">null</span> &amp;&amp;<br>                        parentNode.getRight().getValue() == value) &#123;<br>                    parentNode.setRight(<span class="hljs-literal">null</span>);<br>                &#125;<br><br>                <span class="hljs-comment">//if the target node has two sub-trees</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetNode.getLeft() != <span class="hljs-literal">null</span> &amp;&amp;<br>                    targetNode.getRight() != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">minValue</span> <span class="hljs-operator">=</span> delRightTreeMin(targetNode.getRight());<br>                targetNode.setValue(minValue);<br><br><br>                <span class="hljs-comment">//if the target node has one sub-tree</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//if target node have left node</span><br>                <span class="hljs-keyword">if</span> (targetNode.getLeft() != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//need to consider the parent node is null</span><br>                    <span class="hljs-keyword">if</span> (parentNode != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-comment">//if target node is the left node of parent node</span><br>                        <span class="hljs-keyword">if</span> (parentNode.getLeft().getValue() == value) &#123;<br>                            parentNode.setLeft(targetNode.getLeft());<br>                        &#125;<br>                        <span class="hljs-comment">//if target node is the right node of parent node</span><br>                        <span class="hljs-keyword">else</span> &#123;<br>                            parentNode.setRight(targetNode.getLeft());<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        root = targetNode.getLeft();<br>                    &#125;<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//if target node have right node</span><br>                    <span class="hljs-comment">//if target node is the left node of parent node</span><br>                    <span class="hljs-comment">//need to consider the parent node is null</span><br>                    <span class="hljs-keyword">if</span> (parentNode != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (parentNode.getLeft().getValue() == value) &#123;<br>                            parentNode.setLeft(targetNode.getRight());<br>                        &#125;<br>                        <span class="hljs-comment">//if target node is the right node of parent node</span><br>                        <span class="hljs-keyword">else</span> &#123;<br>                            parentNode.setRight(targetNode.getRight());<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        root = targetNode.getRight();<br>                    &#125;<br><br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//To find the min value of the right sub-tree</span><br>    <span class="hljs-comment">//return the min value to give the target node</span><br>    <span class="hljs-comment">//delete the min node</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delRightTreeMin</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> node;<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">while</span> (tmp.getLeft() != <span class="hljs-literal">null</span>) &#123;<br>            tmp = tmp.getLeft();<br>        &#125;<br>        delNode(tmp.getValue());<br>        <span class="hljs-keyword">return</span> tmp.getValue();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">private</span> Node left;<br>    <span class="hljs-keyword">private</span> Node right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">leftHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left.height();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rightHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right.height();<br>    &#125;<br><br><br>    <span class="hljs-comment">//return the height of the sub-tree which the node is as root</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">height</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.max(left == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : left.height(),<br>                right == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : right.height()) + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//left Rotate</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">leftRotate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//create a new node</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value);<br><br>        <span class="hljs-comment">//set the left node of current node to the left of newNode</span><br>        newNode.setLeft(<span class="hljs-built_in">this</span>.left);<br><br>        <span class="hljs-comment">//set the left node of right son node of current node to the right of newNode</span><br>        newNode.setRight(<span class="hljs-built_in">this</span>.right.left);<br><br>        <span class="hljs-comment">//set the value of right son node to the current node</span><br>        <span class="hljs-built_in">this</span>.value = <span class="hljs-built_in">this</span>.right.value;<br><br>        <span class="hljs-comment">//set the right node of right node of current node to the right of current node</span><br>        <span class="hljs-built_in">this</span>.right = <span class="hljs-built_in">this</span>.right.right;<br><br>        <span class="hljs-comment">//set the newNode to the left of current node</span><br>        <span class="hljs-built_in">this</span>.left = newNode;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(Node left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(Node right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;value=&quot;</span> + value +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (node.value &lt; <span class="hljs-built_in">this</span>.value) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.left = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.left.add(node);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.right = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.right.add(node);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//if it adds a node</span><br>        <span class="hljs-comment">//and the value of height of right sub-tree</span><br>        <span class="hljs-comment">//minus height of left sub-tree is bigger than 1,</span><br>        <span class="hljs-comment">//it needs left rotate</span><br>        <span class="hljs-keyword">if</span>(rightHeight() - leftHeight() &gt; <span class="hljs-number">1</span>)&#123;<br>            leftRotate();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.left.infixOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.right.infixOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//To find the node needed to be deleted</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-built_in">this</span>.value) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-built_in">this</span>.value) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.left.search(value);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.right.search(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//To find the parent node of the node needed to be deleted</span><br>    <span class="hljs-comment">// value: for searching</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">searchParent</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.left.value == value) ||<br>                (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.right.value == value)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-built_in">this</span>.value &amp;&amp; <span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.left.searchParent(value);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt;= <span class="hljs-built_in">this</span>.value &amp;&amp; <span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.right.searchParent(value);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="右旋转"><a href="#右旋转" class="headerlink" title="右旋转"></a>右旋转</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609180910991.png" alt="image20220609180910991"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.avl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AvlTreeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//int[] arr = &#123;4, 3, 6, 5, 7, 8&#125;;</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">AvlTree</span> <span class="hljs-variable">avlTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AvlTree</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            avlTree.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(i));<br>        &#125;<br>        avlTree.infixOrder();<br>        System.out.println(<span class="hljs-string">&quot;The height of tree: &quot;</span> + avlTree.getRoot().height());<br>        System.out.println(<span class="hljs-string">&quot;The height of left sub-tree: &quot;</span> + avlTree.getRoot().getLeft().height());<br>        System.out.println(<span class="hljs-string">&quot;The height of right sub-tree: &quot;</span> + avlTree.getRoot().getRight().height());<br>        System.out.println(<span class="hljs-string">&quot;balance:&quot;</span>);<br><span class="hljs-comment">//        avlTree.getRoot().leftRotate();</span><br><span class="hljs-comment">//        avlTree.infixOrder();</span><br><span class="hljs-comment">//        System.out.println(&quot;The height of tree: &quot; + avlTree.getRoot().height());</span><br><span class="hljs-comment">//        System.out.println(&quot;The height of left sub-tree: &quot; + avlTree.getRoot().getLeft().height());</span><br><span class="hljs-comment">//        System.out.println(&quot;The height of right sub-tree: &quot; + avlTree.getRoot().getRight().height());</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AvlTree</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Node root;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getRoot</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            root = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            root.add(node);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.infixOrder();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> root.search(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">searchParent</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> root.searchParent(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">targetNode</span> <span class="hljs-operator">=</span> search(value);<br>            <span class="hljs-keyword">if</span> (targetNode == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (root.getLeft() == <span class="hljs-literal">null</span> &amp;&amp; root.getRight() == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (root.getValue() == value) &#123;<br>                    root = <span class="hljs-literal">null</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//To find parent node of target node</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">parentNode</span> <span class="hljs-operator">=</span> searchParent(value);<br><br>            <span class="hljs-comment">//if the target node is leaf node</span><br>            <span class="hljs-keyword">if</span> (targetNode.getLeft() == <span class="hljs-literal">null</span> &amp;&amp; targetNode.getRight() == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (parentNode.getLeft() != <span class="hljs-literal">null</span> &amp;&amp;<br>                        parentNode.getLeft().getValue() == value) &#123;<br>                    parentNode.setLeft(<span class="hljs-literal">null</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parentNode.getRight() != <span class="hljs-literal">null</span> &amp;&amp;<br>                        parentNode.getRight().getValue() == value) &#123;<br>                    parentNode.setRight(<span class="hljs-literal">null</span>);<br>                &#125;<br><br>                <span class="hljs-comment">//if the target node has two sub-trees</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetNode.getLeft() != <span class="hljs-literal">null</span> &amp;&amp;<br>                    targetNode.getRight() != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">minValue</span> <span class="hljs-operator">=</span> delRightTreeMin(targetNode.getRight());<br>                targetNode.setValue(minValue);<br><br><br>                <span class="hljs-comment">//if the target node has one sub-tree</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//if target node have left node</span><br>                <span class="hljs-keyword">if</span> (targetNode.getLeft() != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//need to consider the parent node is null</span><br>                    <span class="hljs-keyword">if</span> (parentNode != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-comment">//if target node is the left node of parent node</span><br>                        <span class="hljs-keyword">if</span> (parentNode.getLeft().getValue() == value) &#123;<br>                            parentNode.setLeft(targetNode.getLeft());<br>                        &#125;<br>                        <span class="hljs-comment">//if target node is the right node of parent node</span><br>                        <span class="hljs-keyword">else</span> &#123;<br>                            parentNode.setRight(targetNode.getLeft());<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        root = targetNode.getLeft();<br>                    &#125;<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//if target node have right node</span><br>                    <span class="hljs-comment">//if target node is the left node of parent node</span><br>                    <span class="hljs-comment">//need to consider the parent node is null</span><br>                    <span class="hljs-keyword">if</span> (parentNode != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (parentNode.getLeft().getValue() == value) &#123;<br>                            parentNode.setLeft(targetNode.getRight());<br>                        &#125;<br>                        <span class="hljs-comment">//if target node is the right node of parent node</span><br>                        <span class="hljs-keyword">else</span> &#123;<br>                            parentNode.setRight(targetNode.getRight());<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        root = targetNode.getRight();<br>                    &#125;<br><br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//To find the min value of the right sub-tree</span><br>    <span class="hljs-comment">//return the min value to give the target node</span><br>    <span class="hljs-comment">//delete the min node</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delRightTreeMin</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> node;<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">while</span> (tmp.getLeft() != <span class="hljs-literal">null</span>) &#123;<br>            tmp = tmp.getLeft();<br>        &#125;<br>        delNode(tmp.getValue());<br>        <span class="hljs-keyword">return</span> tmp.getValue();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">private</span> Node left;<br>    <span class="hljs-keyword">private</span> Node right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">leftHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left.height();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rightHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right.height();<br>    &#125;<br><br><br>    <span class="hljs-comment">//return the height of the sub-tree which the node is as root</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">height</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.max(left == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : left.height(),<br>                right == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : right.height()) + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//left Rotate</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">leftRotate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//create a new node</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value);<br><br>        <span class="hljs-comment">//set the left node of current node to the left of newNode</span><br>        newNode.setLeft(<span class="hljs-built_in">this</span>.left);<br><br>        <span class="hljs-comment">//set the left node of right son node of current node to the right of newNode</span><br>        newNode.setRight(<span class="hljs-built_in">this</span>.right.left);<br><br>        <span class="hljs-comment">//set the value of right son node to the current node</span><br>        <span class="hljs-built_in">this</span>.value = <span class="hljs-built_in">this</span>.right.value;<br><br>        <span class="hljs-comment">//set the right node of right node of current node to the right of current node</span><br>        <span class="hljs-built_in">this</span>.right = <span class="hljs-built_in">this</span>.right.right;<br><br>        <span class="hljs-comment">//set the newNode to the left of current node</span><br>        <span class="hljs-built_in">this</span>.left = newNode;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rightRotate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value);<br><br>        newNode.setRight(<span class="hljs-built_in">this</span>.right);<br><br>        newNode.setLeft(<span class="hljs-built_in">this</span>.left.right);<br><br>        <span class="hljs-built_in">this</span>.setValue(<span class="hljs-built_in">this</span>.left.value);<br><br>        <span class="hljs-built_in">this</span>.setLeft(<span class="hljs-built_in">this</span>.left.left);<br><br>        <span class="hljs-built_in">this</span>.setRight(newNode);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(Node left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(Node right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;value=&quot;</span> + value +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (node.value &lt; <span class="hljs-built_in">this</span>.value) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.left = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.left.add(node);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.right = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.right.add(node);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//if it adds a node</span><br>        <span class="hljs-comment">//and the value of height of right sub-tree</span><br>        <span class="hljs-comment">//minus height of left sub-tree is bigger than 1,</span><br>        <span class="hljs-comment">//it needs left rotate</span><br>        <span class="hljs-keyword">if</span> (rightHeight() - leftHeight() &gt; <span class="hljs-number">1</span>) &#123;<br>            leftRotate();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (leftHeight() - rightHeight() &gt; <span class="hljs-number">1</span>) &#123;<br>            rightRotate();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.left.infixOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.right.infixOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//To find the node needed to be deleted</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-built_in">this</span>.value) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-built_in">this</span>.value) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.left == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.left.search(value);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.right.search(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//To find the parent node of the node needed to be deleted</span><br>    <span class="hljs-comment">// value: for searching</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">searchParent</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.left.value == value) ||<br>                (<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.right.value == value)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-built_in">this</span>.value &amp;&amp; <span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.left.searchParent(value);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt;= <span class="hljs-built_in">this</span>.value &amp;&amp; <span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.right.searchParent(value);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双旋转"><a href="#双旋转" class="headerlink" title="双旋转"></a>双旋转</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609181740881.png" alt="image20220609181740881"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609181845720.png" alt="image20220609181845720"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609182058854.png" alt="image20220609182058854"></p><p>在节点的 add 方法中加这几行代码：</p><p>注意：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//if it adds a node</span><br> <span class="hljs-comment">//and the value of height of right sub-tree</span><br> <span class="hljs-comment">//minus height of left sub-tree is bigger than 1,</span><br> <span class="hljs-comment">//it needs left rotate</span><br> <span class="hljs-keyword">if</span> (rightHeight() - leftHeight() &gt; <span class="hljs-number">1</span>) &#123;<br>     <span class="hljs-keyword">if</span> (right != <span class="hljs-literal">null</span> &amp;&amp; right.leftHeight() &gt; right.rightHeight()) &#123;<br>         right.rightRotate();<br>         leftRotate();<br>     &#125;<br>     leftRotate();<br> &#125;<br><br> <span class="hljs-keyword">if</span> (leftHeight() - rightHeight() &gt; <span class="hljs-number">1</span>) &#123;<br>     <span class="hljs-comment">//if the height of right sub-tree of its left node is bigger</span><br>     <span class="hljs-comment">//than height of its right sub-tree</span><br>     <span class="hljs-keyword">if</span> (left != <span class="hljs-literal">null</span> &amp;&amp; left.rightHeight() &gt; left.leftHeight() ) &#123;<br>         left.leftRotate();<br>         rightRotate();<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         rightRotate();<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="多路查找树"><a href="#多路查找树" class="headerlink" title="多路查找树"></a>多路查找树</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609185708898.png" alt="image20220609185708898"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609190011509.png" alt="image20220609190011509"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609190230646.png" alt="image20220609190230646"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609190425633.png" alt="image20220609190425633"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609190559439.png" alt="image20220609190559439"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609191159767.png" alt="image20220609191159767"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609191224582.png" alt="image20220609191224582"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609191314768.png" alt="image20220609191314768"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609191456070.png" alt="image20220609191456070"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220609191914637.png" alt="image20220609191914637"></p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220610103334823.png" alt="image20220610103334823"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220610103420692.png" alt="image20220610103420692"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220610103452889.png" alt="image20220610103452889"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220610103537630.png" alt="image20220610103537630"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220610103944856.png" alt="image20220610103944856"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220610104250618.png" alt="image20220610104250618"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220610104447862.png" alt="image20220610104447862"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.graph;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span> &#123;<br><br>    <span class="hljs-keyword">private</span> ArrayList&lt;String&gt; vertexList;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] edges;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numOfEdges;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Graph</span> <span class="hljs-variable">graph</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>(<span class="hljs-number">5</span>);<br>        String[] vertexes = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>&#125;;<br><br>        <span class="hljs-comment">//add vertex</span><br>        <span class="hljs-keyword">for</span> (String vertex : vertexes) &#123;<br>            graph.insertVertex(vertex);<br>        &#125;<br><br>        <span class="hljs-comment">//add edge</span><br>        <span class="hljs-comment">//A-B,A-C,B-C,B-D,B-E</span><br>        graph.insertEdge(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        graph.insertEdge(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br>        graph.insertEdge(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br>        graph.insertEdge(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>        graph.insertEdge(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>);<br><br>        graph.showGraph();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Graph</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        edges = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>        vertexList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(n);<br>        numOfEdges = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumOfVertex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> vertexList.size();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumOfEdges</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> numOfEdges;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getValueByIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> vertexList.get(i);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWeight</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span> &#123;<br>        <span class="hljs-keyword">return</span> edges[v1][v2];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showGraph</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] edge : edges) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> weight : edge) &#123;<br>                System.out.print(weight + <span class="hljs-string">&quot;/t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertVertex</span><span class="hljs-params">(String vertex)</span> &#123;<br>        vertexList.add(vertex);<br>    &#125;<br><br><br>    <span class="hljs-comment">//v1 : A-&gt;0, v2: B-&gt;1</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2, <span class="hljs-type">int</span> weight)</span> &#123;<br>        edges[v1][v2] = weight;<br>        edges[v2][v1] = weight;<br>        numOfEdges++;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="深度优先遍历-DFS"><a href="#深度优先遍历-DFS" class="headerlink" title="深度优先遍历 DFS"></a>深度优先遍历 DFS</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220610111100520.png" alt="image20220610111100520"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220610113037865.png" alt="image20220610113037865"></p><p>编写思路：</p><ol><li>访问节点 v ，并标记已访问</li><li>查找 v 的下一个邻接节点 w， 使用一个函数去获取 w</li><li>如果 w 没有被访问过，就递归访问 w，查找 w 的下一个邻接节点</li><li>如果 w 访问过（由3可知 w 及其 w 邻接之后的点都已经被访问过了），访问与 v 邻接的下一个节点，从 v 的第一个邻接节点开始往后找，如果下一个邻接被访问，就再从下一个邻接开始找，直至找到或者所有都被访问完了。</li><li>如果找的 v 的下一个邻接，即递归访问 v 的下一个邻接。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//isVisited: the element of class graph to label the vertex has been visited when value of it is true</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">boolean</span>[] isVisited, <span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-comment">//1. visit the vertex</span><br>    System.out.println(getValueByIndex(i) + <span class="hljs-string">&quot;-&gt;&quot;</span>);<br>    <span class="hljs-comment">// set the vertex have been visited</span><br>    isVisited[i] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">//2. find the first neighbor vertex</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">firstNeighbor</span> <span class="hljs-operator">=</span> getFirstNeighbor(i);<br>    <span class="hljs-comment">//3. firstNeighbor is exist</span><br>    <span class="hljs-comment">//there aren&#x27;t isolated vertex, then it doesn&#x27;t need else</span><br>    <span class="hljs-keyword">if</span> (firstNeighbor != -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">//4. the first vertex hasn&#x27;t been visited.</span><br>        <span class="hljs-keyword">if</span> (!isVisited[firstNeighbor]) &#123;<br>            dfs(isVisited, firstNeighbor);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextNeighbor</span> <span class="hljs-operator">=</span> getNextNeighbor(i, firstNeighbor);<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">//it has next neighbor vertex</span><br>            <span class="hljs-keyword">if</span> (nextNeighbor != -<span class="hljs-number">1</span> &amp;&amp; !isVisited[nextNeighbor]) &#123;<br>                dfs(isVisited, nextNeighbor);<br>            &#125;<br>            <span class="hljs-comment">//its next neighbor vertex has been visited, to find followings</span><br>            nextNeighbor = getNextNeighbor(i, nextNeighbor);<br>            <span class="hljs-comment">//it doesn&#x27;t have next neighbor vertex</span><br>            <span class="hljs-keyword">if</span> (nextNeighbor == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getFirstNeighbor</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; vertexList.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (edges[index][i] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNextNeighbor</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> v2 + <span class="hljs-number">1</span>; i &lt; vertexList.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (edges[v1][i] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Method 2：</p><p>编写思路：</p><ol><li>分别编写两个函数，一个函数处理一个节点的，并对其进行深度优先搜索，另一个函数遍历所有节点检查未被处理的函数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">boolean</span>[] isVisited, <span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-comment">//to print the current value</span><br>    System.out.print(getValueByIndex(i) + <span class="hljs-string">&quot; =&gt; &quot;</span>);<br>    isVisited[i] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> getFirstNeighbor(i);<br>    <span class="hljs-keyword">while</span> (w != -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span>(!isVisited[w])&#123;<br>            dfs(isVisited, w);<br>        &#125;<br>        w = getNextNeighbor(i,w);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; getNumOfVertex(); i++) &#123;<br>        <span class="hljs-keyword">if</span>(!isVisited[i])&#123;<br>            dfs(isVisited,i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索 BFS"></a>广度优先搜索 BFS</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220611110512944.png" alt="image20220611110512944"></p><p>编写思路：</p><ol><li>输出当前节点并标记</li><li>将当前节点存入带邻接队列</li><li>先从队列中取出当前节点，然后找其邻接节点</li><li>循环获取当前节点的邻接节点，然后入队</li><li>当前邻接节点全部入队完之后，对其邻接节点再次寻找邻接节点，直至队列空。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BFS for a vertex</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">(<span class="hljs-type">boolean</span>[] isVisited, <span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-type">int</span> u; <span class="hljs-comment">// the head node in queue</span><br>    <span class="hljs-type">int</span> w; <span class="hljs-comment">// the adjacent vertex of u</span><br>    <span class="hljs-comment">//queue to record visited order of vertex</span><br>    LinkedList&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-comment">//visited the vertex and to print</span><br>    System.out.print(getValueByIndex(i) + <span class="hljs-string">&quot; =&gt; &quot;</span>);<br>    <span class="hljs-comment">//label it has been visited</span><br>    isVisited[i] = <span class="hljs-literal">true</span>;<br>    queue.add(i);<br><br>    <span class="hljs-comment">//if the queue is not empty</span><br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>        <span class="hljs-comment">//get the head node of the queue</span><br>        u = queue.removeFirst();<br>        <span class="hljs-comment">//get the first neighbor</span><br>        w = getFirstNeighbor(u);<br>        <span class="hljs-comment">//to find all adjacent vertexes of u</span><br>        <span class="hljs-keyword">while</span> (w != -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!isVisited[w]) &#123;<br>                System.out.print(getValueByIndex(w) + <span class="hljs-string">&quot; =&gt; &quot;</span>);<br>                isVisited[w] = <span class="hljs-literal">true</span>;<br>                queue.addLast(w);<br>            &#125;<br>            w = getNextNeighbor(u, w);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; getNumOfVertex(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (!isVisited[i]) &#123;<br>            bfs(isVisited, i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十个常用算法"><a href="#十个常用算法" class="headerlink" title="十个常用算法"></a>十个常用算法</h2><h3 id="二分查找（非递归）"><a href="#二分查找（非递归）" class="headerlink" title="二分查找（非递归）"></a>二分查找（非递归）</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613102046260.png" alt="image20220613102046260"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> target the num for finding</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the index or -1 which it doesn&#x27;t be found</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (arr[mid] == target) &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mid]&gt;target)&#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mid] &lt; target)&#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613104433193.png" alt="image20220613104433193"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613104532386.png" alt="image20220613104532386"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613104613106.png" alt="image20220613104613106"></p><h4 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613104746292.png" alt="image20220613104746292"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613105214196.png" alt="image20220613105214196"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HanoiTower</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        hanoiTower(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hanoiTower</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">char</span> a, <span class="hljs-type">char</span> b, <span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>) &#123;<br>            System.out.println(a + <span class="hljs-string">&quot; -&gt; &quot;</span> + c);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//1.  the top plates a -&gt; b</span><br>            hanoiTower(num - <span class="hljs-number">1</span>, a, c, b);<br>            <span class="hljs-comment">//2. the bottom plate move to c</span><br>            System.out.println(<span class="hljs-string">&quot;num: &quot;</span> + num + <span class="hljs-string">&quot; &quot;</span> + a + <span class="hljs-string">&quot; -&gt; &quot;</span> + c);<br>            <span class="hljs-comment">//3. the top plates b -&gt; c</span><br>            hanoiTower(num - <span class="hljs-number">1</span>, b, a, c);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613111815085.png" alt="image20220613111815085"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613112007063.png" alt="image20220613112007063"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613112228711.png" alt="image20220613112228711"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613155136032.png" alt="image20220613155136032"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613155200655.png" alt="image20220613155200655"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.Algorithm.dynamic;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KnapsackProblem</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] w = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;; <span class="hljs-comment">// the weight of products</span><br>        <span class="hljs-type">int</span>[] val = &#123;<span class="hljs-number">1500</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">2000</span>&#125;;<span class="hljs-comment">// the value of products</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; <span class="hljs-comment">// the capacity of the package</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> val.length; <span class="hljs-comment">// the num of the products</span><br><br>        <span class="hljs-comment">//the two-dimension array for getting the best result</span><br>        <span class="hljs-comment">//v[i][j] the best value of putting product i;</span><br>        <span class="hljs-type">int</span>[][] v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>][m + <span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">//for storing the strategy of putting products</span><br>        <span class="hljs-type">int</span>[][] strategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>][m + <span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">//initialing the v[i][0] and v[0][j]</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; v.length; i++) &#123;<br>            v[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; v[<span class="hljs-number">0</span>].length; i++) &#123;<br>            v[<span class="hljs-number">0</span>][i] = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; v.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; v[<span class="hljs-number">0</span>].length; j++) &#123;<br>                <span class="hljs-comment">//because the index of v is beginning from 1</span><br>                <span class="hljs-comment">//and the index of w is beginning from 0;</span><br>                <span class="hljs-comment">//the w needs beginning from i-1</span><br>                <span class="hljs-keyword">if</span> (w[i - <span class="hljs-number">1</span>] &gt; j) &#123;<br>                    v[i][j] = v[i - <span class="hljs-number">1</span>][j];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//the operation of val is like w</span><br>                    <span class="hljs-comment">//v[i][j] = Math.max(v[i - 1][j], val[i - 1] + v[i - 1][j - w[i - 1]]);</span><br>                    <span class="hljs-keyword">if</span>(v[i - <span class="hljs-number">1</span>][j] &lt; val[i - <span class="hljs-number">1</span>] + v[i - <span class="hljs-number">1</span>][j - w[i - <span class="hljs-number">1</span>]])&#123;<br>                        <span class="hljs-comment">//only here is to putting products</span><br>                        v[i][j] = val[i - <span class="hljs-number">1</span>] + v[i - <span class="hljs-number">1</span>][j - w[i - <span class="hljs-number">1</span>]];<br>                        strategy[i][j] = <span class="hljs-number">1</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        v[i][j] = v[i - <span class="hljs-number">1</span>][j];<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; v.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; v[<span class="hljs-number">0</span>].length; j++) &#123;<br>                System.out.print(v[i][j] + <span class="hljs-string">&quot; &quot;</span>);&#123;<br>                &#125;<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; strategy.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; strategy[<span class="hljs-number">0</span>].length; j++) &#123;<br>                System.out.print(strategy[i][j] + <span class="hljs-string">&quot; &quot;</span>);&#123;<br>                &#125;<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br>        <span class="hljs-comment">//the best strategy is usually on the last</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> strategy.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> strategy[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i&gt;<span class="hljs-number">0</span> &amp;&amp; j&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(strategy[i][j] == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">//if we put product i in the package, the strategy[i]</span><br>                <span class="hljs-comment">//must have 1 in the array</span><br>                <span class="hljs-comment">//only here is to putting products</span><br>                <span class="hljs-comment">//v[i][j] = val[i - 1] + v[i - 1][j - w[i - 1]];</span><br>                System.out.println(<span class="hljs-string">&quot;Put the product &quot;</span> + i);<br>                <span class="hljs-comment">//if we put product i in the package, we must put the product</span><br>                <span class="hljs-comment">//which is put in v[i - 1][j - w[i - 1]];</span><br>                j -= w[i-<span class="hljs-number">1</span>];<br>            &#125;<br>            i--;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//============================== result ==============================</span><br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <br><span class="hljs-number">0</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <br><span class="hljs-number">0</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <span class="hljs-number">3000</span> <br><span class="hljs-number">0</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <span class="hljs-number">2000</span> <span class="hljs-number">3500</span> <br>============<br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br>============<br>Put the product <span class="hljs-number">3</span><br>Put the product <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613174921556.png" alt="image20220613174921556"></p><h4 id="暴力匹配"><a href="#暴力匹配" class="headerlink" title="暴力匹配"></a>暴力匹配</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613174950570.png" alt="image20220613174950570"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">violenceMatch</span><span class="hljs-params">(String str1, String str2)</span> &#123;<br>    <span class="hljs-type">char</span>[] s1 = str1.toCharArray();<br>    <span class="hljs-type">char</span>[] s2 = str2.toCharArray();<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">s1Len</span> <span class="hljs-operator">=</span> s1.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">s2Len</span> <span class="hljs-operator">=</span> s2.length;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; s1Len &amp;&amp; j &lt; s2Len) &#123;<br>        <span class="hljs-keyword">if</span> (s1[i] == s2[j]) &#123;<br>            i++;<br>            j++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = i - j + <span class="hljs-number">1</span>;<br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//if it successfully matches, j == s2Len</span><br>    <span class="hljs-keyword">if</span>(j == s2Len)&#123;<br>        <span class="hljs-keyword">return</span> i-j;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613180222996.png" alt="image20220613180222996"></p><p><a href="https://www.cnblogs.com/zzuuoo666/p/9028287.html">KMP详细讲解</a></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613180920208.png" alt="image20220613180920208"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613181125416.png" alt="image20220613181125416"></p><p>如何找到部分匹配表</p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613183531982.png" alt="image20220613183531982"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613183624588.png" alt="image20220613183624588"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613183715452.png" alt="image20220613183715452"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613183757163.png" alt="image20220613183757163"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613183926356.png" alt="image20220613183926356"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613184046487.png" alt="image20220613184046487"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220613184618716.png" alt="image20220613184618716"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.Algorithm.kmp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KMPAlgorithm</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;BBC ABCDAB ABCDABCDABDE&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABCDABD&quot;</span>;<br>        <span class="hljs-type">int</span>[] next = kmpNext(str2);<br>        System.out.println(kmpSearch(str1, str2, next));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str1 src string</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str2 sub string</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> next part matching table</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> index of src string of -1 which means it doesn&#x27;t be found</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kmpSearch</span><span class="hljs-params">(String str1, String str2, <span class="hljs-type">int</span>[] next)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; str1.length(); i++) &#123;<br><br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; str1.charAt(i) != str2.charAt(j)) &#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (str1.charAt(i) == str2.charAt(j)) &#123;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j == str2.length()) &#123;<br>                <span class="hljs-keyword">return</span> i - j + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//get the part matching table of a string</span><br>    <span class="hljs-comment">//to calculate the common substr length of the string</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] kmpNext(String dest) &#123;<br>        <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dest.length()];<br>        <span class="hljs-comment">//if the length of the str is 1, the part matching value is 1</span><br>        next[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//i the beginning index of substr to compare the substr of beginning of j</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt; dest.length(); i++) &#123;<br><br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; dest.charAt(i) != dest.charAt(j)) &#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (dest.charAt(i) == dest.charAt(j)) &#123;<br>                j++;<br>            &#125;<br>            next[i] = j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614094607810.png" alt="image20220614094607810"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614094938221.png" alt="image20220614094938221"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614095001484.png" alt="image20220614095001484"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614112450398.png" alt="image20220614112450398"></p><p>编写思路：</p><ol><li>为不同广播覆盖位置创建 key-value 的 map HashMap&lt;String, HashSet&#x2F;<String>&gt;</String></li><li>获得所有地区的集合</li><li>每次循环比较不同广播台的地区与所有地区获取其交集，并在一次循环中获取最大的交集数的广播台放入到 一个 list 中</li><li>并再所有地区集合中清除该广播台覆盖区域</li><li>最终 list 就获得每次循环的最优解即为最终解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.Algorithm.greedy;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreedyAlgorithm</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        HashMap&lt;String, HashSet&lt;String&gt;&gt; broadcasts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        HashSet&lt;String&gt; regions1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        regions1.add(<span class="hljs-string">&quot;beijing&quot;</span>);<br>        regions1.add(<span class="hljs-string">&quot;shanghai&quot;</span>);<br>        regions1.add(<span class="hljs-string">&quot;tianjin&quot;</span>);<br>        HashSet&lt;String&gt; regions2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        regions2.add(<span class="hljs-string">&quot;guangzhou&quot;</span>);<br>        regions2.add(<span class="hljs-string">&quot;beijing&quot;</span>);<br>        regions2.add(<span class="hljs-string">&quot;shenzhen&quot;</span>);<br>        HashSet&lt;String&gt; regions3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        regions3.add(<span class="hljs-string">&quot;chengdu&quot;</span>);<br>        regions3.add(<span class="hljs-string">&quot;shanghai&quot;</span>);<br>        regions3.add(<span class="hljs-string">&quot;hangzhou&quot;</span>);<br>        HashSet&lt;String&gt; regions4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        regions4.add(<span class="hljs-string">&quot;shanghai&quot;</span>);<br>        regions4.add(<span class="hljs-string">&quot;tianjin&quot;</span>);<br>        HashSet&lt;String&gt; regions5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        regions5.add(<span class="hljs-string">&quot;hangzhou&quot;</span>);<br>        regions5.add(<span class="hljs-string">&quot;dalian&quot;</span>);<br><br>        broadcasts.put(<span class="hljs-string">&quot;K1&quot;</span>, regions1);<br>        broadcasts.put(<span class="hljs-string">&quot;K2&quot;</span>, regions2);<br>        broadcasts.put(<span class="hljs-string">&quot;K3&quot;</span>, regions3);<br>        broadcasts.put(<span class="hljs-string">&quot;K4&quot;</span>, regions4);<br>        broadcasts.put(<span class="hljs-string">&quot;K5&quot;</span>, regions5);<br><br>        <span class="hljs-comment">//to store all regions</span><br>        HashSet&lt;String&gt; allRegions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        allRegions.add(<span class="hljs-string">&quot;beijing&quot;</span>);<br>        allRegions.add(<span class="hljs-string">&quot;shanghai&quot;</span>);<br>        allRegions.add(<span class="hljs-string">&quot;tianjin&quot;</span>);<br>        allRegions.add(<span class="hljs-string">&quot;guangzhou&quot;</span>);<br>        allRegions.add(<span class="hljs-string">&quot;shenzhen&quot;</span>);<br>        allRegions.add(<span class="hljs-string">&quot;chengdu&quot;</span>);<br>        allRegions.add(<span class="hljs-string">&quot;hangzhou&quot;</span>);<br>        allRegions.add(<span class="hljs-string">&quot;dalian&quot;</span>);<br><br>        ArrayList&lt;String&gt; selections = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><br>        <span class="hljs-comment">//to store union data of regions and all regions during</span><br>        <span class="hljs-comment">//traverse the regions</span><br>        HashSet&lt;String&gt; tempSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-comment">//to use maxKey to store the key of regions which has the most numerous</span><br>        <span class="hljs-comment">//union data</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">maxKey</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//to store the tempSize of the biggest size for comparing with this time</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (allRegions.size() != <span class="hljs-number">0</span>) &#123;<br>            maxKey = <span class="hljs-literal">null</span>;<br>            tempSize = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (String key : broadcasts.keySet()) &#123;<br><br><span class="hljs-comment">//                if(maxKey!=null &amp;&amp; tempSize &lt; tempSet.size())&#123;</span><br><span class="hljs-comment">//                    tempSize = tempSet.size();</span><br><span class="hljs-comment">//                &#125;</span><br>                tempSet.clear();<br>                HashSet&lt;String&gt; regions = broadcasts.get(key);<br>                tempSet.addAll(regions);<br>                <span class="hljs-comment">//get the union date from tempSet and allRegions</span><br>                <span class="hljs-comment">//and the results give to tempSet</span><br>                tempSet.retainAll(allRegions);<br><br>                <span class="hljs-keyword">if</span> (tempSet.size() &gt; <span class="hljs-number">0</span> &amp;&amp; (maxKey == <span class="hljs-literal">null</span> || tempSet.size() &gt; tempSize)) &#123;<br>                    maxKey = key;<br>                    tempSize = tempSet.size();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(maxKey != <span class="hljs-literal">null</span>)&#123;<br>                selections.add(maxKey);<br>                allRegions.removeAll(broadcasts.get(maxKey));<br>            &#125;<br>        &#125;<br>        System.out.println(selections);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="普利姆算法-Prim"><a href="#普利姆算法-Prim" class="headerlink" title="普利姆算法 Prim"></a>普利姆算法 Prim</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614113137035.png" alt="image20220614113137035"></p><p>尽可能选择少的路线，并且每条路最小，保证总里程数最少</p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614113546125.png" alt="image20220614113546125"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614113722867.png" alt="image20220614113722867"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614115436066.png" alt="image20220614115436066"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.Algorithm.prim;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimAlgorithm</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">char</span>[] data = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numOfVertexes</span> <span class="hljs-operator">=</span> data.length;<br>        <span class="hljs-type">int</span>[][] weight = &#123; <span class="hljs-comment">//10000: non-connection</span><br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">2</span>&#125;,<br>                &#123;<span class="hljs-number">5</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">7</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10000</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">6</span>&#125;,<br>                &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10000</span>&#125;&#125;;<br><br>        <span class="hljs-type">MGraph</span> <span class="hljs-variable">mGraph</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MGraph</span>(numOfVertexes);<br>        mGraph.createGraph(mGraph,numOfVertexes,data,weight);<br>        mGraph.showGraph(mGraph);<br><br>        <span class="hljs-type">MinTree</span> <span class="hljs-variable">minTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MinTree</span>();<br>        minTree.prim(mGraph,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinTree</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> graph graph</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v the index of beginning vertex</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prim</span><span class="hljs-params">(MGraph graph, <span class="hljs-type">int</span> v)</span>&#123;<br>        <span class="hljs-type">int</span>[] isVisited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[graph.numOfVertexes];<br><br>        isVisited[v] = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//to store vertex v and the closest vertex of v</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//for comparing weight of each line</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempWeight</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br><br>        <span class="hljs-comment">//for graph which has num vertexes, it has num - 1 line in min tree</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; graph.numOfVertexes - <span class="hljs-number">1</span>; i++) &#123;<br><br>            <span class="hljs-comment">//To find the closest vertex of each vertex which has been visited</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; graph.numOfVertexes; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt; graph.numOfVertexes; k++) &#123;<br>                    <span class="hljs-keyword">if</span>(isVisited[j] == <span class="hljs-number">1</span> &amp;&amp;<br>                            isVisited[k] == <span class="hljs-number">0</span> &amp;&amp;<br>                            graph.weight[j][k] &lt; tempWeight)&#123;<br>                        h1 = j;<br>                        h2 = k;<br>                        tempWeight = graph.weight[j][k];<br>                    &#125;<br>                &#125;<br>            &#125;<br>            System.out.println(graph.data[h1] +<span class="hljs-string">&quot; -w: &quot;</span>+tempWeight+<span class="hljs-string">&quot; -&gt; &quot;</span> + graph.data[h2]);<br>            <span class="hljs-comment">//set the h2 has been visited for h1</span><br>            isVisited[h2] = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//reset</span><br>            tempWeight = <span class="hljs-number">10000</span>;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MGraph</span> &#123;<br>    <span class="hljs-type">int</span> numOfVertexes;<br>    <span class="hljs-type">char</span>[] data; <span class="hljs-comment">//data of vertex</span><br>    <span class="hljs-type">int</span>[][] weight; <span class="hljs-comment">//adjacent matrix</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MGraph</span><span class="hljs-params">(<span class="hljs-type">int</span> numOfVertexes)</span> &#123;<br>        <span class="hljs-built_in">this</span>.numOfVertexes = numOfVertexes;<br>        data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[numOfVertexes];<br>        weight = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numOfVertexes][numOfVertexes];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createGraph</span><span class="hljs-params">(MGraph graph, <span class="hljs-type">int</span> numOfVertexes, <span class="hljs-type">char</span>[] data, <span class="hljs-type">int</span>[][] weight)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numOfVertexes; i++) &#123;<br>            graph.data[i] = data[i];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numOfVertexes; j++) &#123;<br>                graph.weight[i][j] = weight[i][j];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showGraph</span><span class="hljs-params">(MGraph graph)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] ints : graph.weight) &#123;<br>            System.out.println(Arrays.toString(ints));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="克鲁斯卡尔算法-Kruskal"><a href="#克鲁斯卡尔算法-Kruskal" class="headerlink" title="克鲁斯卡尔算法 Kruskal"></a>克鲁斯卡尔算法 Kruskal</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614165930389.png" alt="image20220614165930389"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614170021021.png" alt="image20220614170021021"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614170401882.png" alt="image20220614170401882"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614170446164.png" alt="image20220614170446164"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614170532319.png" alt="image20220614170532319"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614170633055.png" alt="image20220614170633055"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614171231852.png" alt="image20220614171231852"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614171252716.png" alt="image20220614171252716"></p><p>编写思路：</p><ol><li>获取矩阵的边</li><li>对边排序</li><li>设置动态数组 ends 及其函数，记录每次加入新的边时，获取该边的两个节点 i, j (char 比较 i &lt; j)的终点值，然后对比，如果不同就不形成回路，更新 ends 即 char 小的节点下标指向 char 大的节点 ends[i] &#x3D; j;</li><li>并将当前节点放入结果数组中。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.Algorithm.Kruskal;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KruskalCase</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> edgeNum;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span>[] vertexes;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] matrix;<br>    <span class="hljs-comment">//non-connection</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INF</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">char</span>[] vertexes = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-type">int</span>[][] matrix = &#123;<br>                &#123;<span class="hljs-number">0</span>, <span class="hljs-number">12</span>, INF, INF, INF, <span class="hljs-number">16</span>, <span class="hljs-number">14</span>&#125;,<br>                &#123;<span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, INF, INF, <span class="hljs-number">7</span>, INF&#125;,<br>                &#123;INF, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, INF&#125;,<br>                &#123;INF, INF, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, INF, INF&#125;,<br>                &#123;INF, INF, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>&#125;,<br>                &#123;<span class="hljs-number">16</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, INF, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>&#125;,<br>                &#123;<span class="hljs-number">14</span>, INF, INF, INF, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>&#125;&#125;;<br>        <span class="hljs-type">KruskalCase</span> <span class="hljs-variable">kruskalCase</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KruskalCase</span>(vertexes, matrix);<br>        kruskalCase.kruskal();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KruskalCase</span><span class="hljs-params">(<span class="hljs-type">char</span>[] vertexes, <span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">vLen</span> <span class="hljs-operator">=</span> vertexes.length;<br><br>        <span class="hljs-comment">//deep copy</span><br>        <span class="hljs-built_in">this</span>.vertexes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[vLen];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; vLen; i++) &#123;<br>            <span class="hljs-built_in">this</span>.vertexes[i] = vertexes[i];<br>        &#125;<br>        <span class="hljs-comment">//deep copy</span><br>        <span class="hljs-built_in">this</span>.matrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[vLen][vLen];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; vLen; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; vLen; j++) &#123;<br>                <span class="hljs-built_in">this</span>.matrix[i][j] = matrix[i][j];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showGraph</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] ints : <span class="hljs-built_in">this</span>.matrix) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt : ints) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;%15d&quot;</span>, anInt);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//sort edges</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortEdges</span><span class="hljs-params">(ArrayList&lt;EdgeData&gt; edgeData)</span> &#123;<br>        edgeData.sort((v1, v2) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> v1.weight - v2.weight;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">//for getting index of vertex</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(<span class="hljs-type">char</span> ch)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.vertexes.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.vertexes[i] == ch) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ArrayList&lt;EdgeData&gt; <span class="hljs-title function_">getEdges</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;EdgeData&gt; edgeData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.vertexes.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">this</span>.vertexes.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.matrix[i][j] &lt; INF) &#123;<br>                    edgeData.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EdgeData</span>(<span class="hljs-built_in">this</span>.vertexes[i], <span class="hljs-built_in">this</span>.vertexes[j], <span class="hljs-built_in">this</span>.matrix[i][j]));<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> edgeData;<br>    &#125;<br><br>    <span class="hljs-comment">//find the end index of the vertex i in their line</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getEnd</span><span class="hljs-params">(<span class="hljs-type">int</span>[] ends, <span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">while</span> (ends[i] != <span class="hljs-number">0</span>) &#123;<br>            i = ends[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">kruskal</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">//sort edges</span><br>        ArrayList&lt;EdgeData&gt; edgeList = getEdges();<br>        sortEdges(edgeList);<br><br>        <span class="hljs-comment">//for recording end point of each vertexes</span><br>        <span class="hljs-type">int</span>[] ends = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[edgeList.size()];<br><br>        <span class="hljs-comment">//for recording result</span><br>        EdgeData[] edgeData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EdgeData</span>[edgeList.size()];<br><br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; edgeList.size(); i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> getIndex(edgeList.get(i).Vertex1);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> getIndex(edgeList.get(i).Vertex2);<br><br>            <span class="hljs-comment">//To know there is a loop when add edge&lt;v1, v2&gt;</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> getEnd(ends, v1);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> getEnd(ends, v2);<br>            <span class="hljs-keyword">if</span> (m != n) &#123;<br>                <span class="hljs-comment">//when we put the chars in arraylist, v1 is always smaller than v2</span><br>                <span class="hljs-comment">//there could be A-&gt;B, no B-&gt;A</span><br>                ends[m] = n;<br>                edgeData[i] = edgeList.get(i);<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-comment">//print the min Tree</span><br>        <span class="hljs-keyword">for</span> (EdgeData edgeDatum : edgeData) &#123;<br>            <span class="hljs-keyword">if</span>(edgeDatum != <span class="hljs-literal">null</span>)&#123;<br>                System.out.println(edgeDatum);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EdgeData</span> &#123;<br>    <span class="hljs-type">char</span> Vertex1;<br>    <span class="hljs-type">char</span> Vertex2;<br>    <span class="hljs-type">int</span> weight;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EdgeData</span><span class="hljs-params">(<span class="hljs-type">char</span> vertex1, <span class="hljs-type">char</span> vertex2, <span class="hljs-type">int</span> weight)</span> &#123;<br>        Vertex1 = vertex1;<br>        Vertex2 = vertex2;<br>        <span class="hljs-built_in">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;EdgeData&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;Vertex1=&quot;</span> + Vertex1 +<br>                <span class="hljs-string">&quot;, Vertex2=&quot;</span> + Vertex2 +<br>                <span class="hljs-string">&quot;, weight=&quot;</span> + weight +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="迪杰斯特拉算法-Dijkstra"><a href="#迪杰斯特拉算法-Dijkstra" class="headerlink" title="迪杰斯特拉算法 Dijkstra"></a>迪杰斯特拉算法 Dijkstra</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614184958134.png" alt="image20220614184958134"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614185611492.png" alt="image20220614185611492"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614185637650.png" alt="image20220614185637650"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614190332529.png" alt="image20220614190332529"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220614190702568.png" alt="image20220614190702568"></p><p>编写思路：</p><ol><li>构建 VisitedVertex 类，并初始化每个属性</li><li>写辅助函数用于更新 already_arr，pre_visitied (可以获得两点之间最短的路径见代码结果), dis 的值</li><li>写一个函数调用上面的更新方法</li><li>由于节点距离需要累加 如 G-&gt;D （i） 要经过 A（index） len &#x3D; visitedVertex.getDis(index) + matrix&#x2F;[index][i];</li><li>更新前驱节点和距离</li><li>对于一个节点完成之后，写一个函数寻找它最近的节点</li><li>再用最近的节点去更新 already_arr，pre_visitied, dis 的值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.Algorithm.dijkstra;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">dijkstraAlgorithm</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">char</span>[] vertexes = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">65535</span>;<br>        <span class="hljs-type">int</span>[][] matrix = &#123;<br>                &#123;N, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, N, N, N, <span class="hljs-number">2</span>&#125;,<br>                &#123;<span class="hljs-number">5</span>, N, N, <span class="hljs-number">9</span>, N, N, <span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">7</span>, N, N, N, <span class="hljs-number">8</span>, N, N&#125;,<br>                &#123;N, <span class="hljs-number">9</span>, N, N, N, <span class="hljs-number">4</span>, N&#125;,<br>                &#123;N, N, <span class="hljs-number">8</span>, N, N, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;,<br>                &#123;N, N, N, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, N, <span class="hljs-number">6</span>&#125;,<br>                &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, N, N, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, N&#125;&#125;;<br>        <span class="hljs-type">Graph</span> <span class="hljs-variable">graph</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>(vertexes, matrix);<br>        graph.showGraph();<br>        graph.dsj(<span class="hljs-number">6</span>);<br>        <span class="hljs-type">VisitedVertex</span> <span class="hljs-variable">visitedVertex</span> <span class="hljs-operator">=</span> graph.getVisitedVertex();<br>        System.out.println(<span class="hljs-string">&quot;======&quot;</span>);<br>        System.out.println(Arrays.toString(visitedVertex.already_arr));<br>        System.out.println(Arrays.toString(visitedVertex.pre_visited));<br>        System.out.println(Arrays.toString(visitedVertex.dis));<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span>[] vertexes;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] matrix;<br>    <span class="hljs-keyword">private</span> VisitedVertex visitedVertex;<br><br>    <span class="hljs-keyword">public</span> VisitedVertex <span class="hljs-title function_">getVisitedVertex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> visitedVertex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Graph</span><span class="hljs-params">(<span class="hljs-type">char</span>[] vertexes, <span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        <span class="hljs-built_in">this</span>.vertexes = vertexes;<br>        <span class="hljs-built_in">this</span>.matrix = matrix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showGraph</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] ints : <span class="hljs-built_in">this</span>.matrix) &#123;<br>            System.out.println(Arrays.toString(ints));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dsj</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        visitedVertex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VisitedVertex</span>(vertexes.length, index);<br>        update(index);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; vertexes.length; i++) &#123;<br>            index = visitedVertex.updateArr();<br>            update(index);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; matrix[index].length; i++) &#123;<br>            <span class="hljs-comment">//to record the distance from vertex to vertex of index to vertex of i</span><br>            len = visitedVertex.getDis(index) + matrix[index][i];<br><br>            <span class="hljs-comment">//len &lt; visitedVertex.getDis(i): new distance is smaller than the distance</span><br>            <span class="hljs-comment">// which stores in array of dis.</span><br>            <span class="hljs-keyword">if</span> (!visitedVertex.isVisited(i) &amp;&amp; len &lt; visitedVertex.getDis(i)) &#123;<br>                visitedVertex.updatePre(i, index);<br>                visitedVertex.updateDis(i, len);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VisitedVertex</span> &#123;<br>    <span class="hljs-comment">//to record vertex which has been visited</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] already_arr;<br><br>    <span class="hljs-comment">//to record vertex which connects this vertex</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] pre_visited;<br><br>    <span class="hljs-comment">//to record distance from current vertex to each vertexes which connect with it</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] dis;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">VisitedVertex</span><span class="hljs-params">(<span class="hljs-type">int</span> length, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-built_in">this</span>.already_arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[length];<br>        <span class="hljs-built_in">this</span>.pre_visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[length];<br>        <span class="hljs-built_in">this</span>.dis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[length];<br>        <span class="hljs-comment">//initial dis</span><br>        Arrays.fill(dis, <span class="hljs-number">65535</span>);<br>        <span class="hljs-built_in">this</span>.dis[index] = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.already_arr[index] = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isVisited</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> already_arr[index] == <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//update the distance from this vertex to vertex of index</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateDis</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> len)</span> &#123;<br>        dis[index] = len;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePre</span><span class="hljs-params">(<span class="hljs-type">int</span> pre, <span class="hljs-type">int</span> index)</span> &#123;<br>        pre_visited[pre] = index;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDis</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> dis[index];<br>    &#125;<br><br><br>    <span class="hljs-comment">//to get the next VisitedVertex</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateArr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">65535</span>;<br>        <span class="hljs-comment">//the index of the closest vertex for current vertex</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; already_arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (already_arr[i] == <span class="hljs-number">0</span> &amp;&amp; dis[i] &lt; min) &#123;<br>                min = dis[i];<br>                index = i;<br>            &#125;<br>        &#125;<br>        already_arr[index] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">result</span><br><span class="hljs-comment">[1, 1, 1, 1, 1, 1, 1]</span><br><span class="hljs-comment">[6, 6, 0, 5, 6, 6, 0]</span><br><span class="hljs-comment">[2, 3, 9, 10, 4, 6, 0]</span><br><span class="hljs-comment">G-&gt;D : [6, 6, 0, 5, 6, 6, 0],we could know that pre_visited[3:D] = 5 and G should pass index = 5(6:F) to D  </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="弗洛伊德算法（Floyd）"><a href="#弗洛伊德算法（Floyd）" class="headerlink" title="弗洛伊德算法（Floyd）"></a>弗洛伊德算法（Floyd）</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220615095211339.png" alt="image20220615095211339"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220615095642386.png" alt="image20220615095642386"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220615100156007.png" alt="image20220615100156007"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220615100450573.png" alt="image20220615100450573"></p><p>中间顶点 [ A, B, C, D, E, F, G ]</p><p>出发顶点 [ A, B, C, D, E, F, G ]</p><p>终止顶点 [ A, B, C, D, E, F, G ]</p><p>以 A 为中间顶点，遍历 A 为出发顶点时的终止顶点，直至遍历完所有的出发顶点，然后遍历下一个中间节点直至结束</p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220615103403481.png" alt="image20220615103403481"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.Algorithm.floyd;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FloydAlgorithm</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">char</span>[] vertexes = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">65535</span>;<br>        <span class="hljs-type">int</span>[][] matrix = &#123;<br>                &#123;<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, N, N, N, <span class="hljs-number">2</span>&#125;,<br>                &#123;<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, N, <span class="hljs-number">9</span>, N, N, <span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">7</span>, N, <span class="hljs-number">0</span>, N, <span class="hljs-number">8</span>, N, N&#125;,<br>                &#123;N, <span class="hljs-number">9</span>, N, <span class="hljs-number">0</span>, N, <span class="hljs-number">4</span>, N&#125;,<br>                &#123;N, N, <span class="hljs-number">8</span>, N, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;,<br>                &#123;N, N, N, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>&#125;,<br>                &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, N, N, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>&#125;&#125;;<br>        <span class="hljs-type">Graph</span> <span class="hljs-variable">graph</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>(vertexes.length,vertexes, matrix);<br><br>        graph.floyd();<br>        graph.showGraphPreAndDis();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span>[] vertex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] dis; <span class="hljs-comment">//distance</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] pre;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Graph</span><span class="hljs-params">(<span class="hljs-type">int</span> length, <span class="hljs-type">char</span>[] vertex, <span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        <span class="hljs-built_in">this</span>.vertex = vertex;<br>        <span class="hljs-built_in">this</span>.dis = matrix;<br>        <span class="hljs-built_in">this</span>.pre = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[length][length];<br>        <span class="hljs-comment">//initialing the pre matrix</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            Arrays.fill(pre[i],i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showGraphPreAndDis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] ints : <span class="hljs-built_in">this</span>.pre) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt : ints) &#123;<br>                System.out.print(vertex[anInt] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] di : <span class="hljs-built_in">this</span>.dis) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : di) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;%12d&quot;</span>, i);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">floyd</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//to store the distance</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//traverse middle vertex</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dis.length; i++) &#123;<br>            <span class="hljs-comment">//traverse starting vertex</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; dis.length; j++) &#123;<br>                <span class="hljs-comment">//traverse ending vertex</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; dis.length; k++) &#123;<br>                    <span class="hljs-comment">//dis[j][i] + dis[i][k] : j -&gt; i -&gt; k</span><br>                    len = dis[j][i] + dis[i][k];<br>                    <span class="hljs-keyword">if</span>(len &lt; dis[j][k])&#123;<br>                        dis[j][k] = len;<br>                        <span class="hljs-comment">//pre[i][k]: store the middle vertex of i-&gt;k</span><br>                        <span class="hljs-comment">//such ads A -&gt; D (A-&gt;G-&gt;F-&gt;D)</span><br>                        <span class="hljs-comment">//the middle vertex is to find the middle vertex of G-&gt;F-&gt;D : F</span><br>                        <span class="hljs-comment">//if pre[j][k] = i, here well be put in G which doesn&#x27;t be wished</span><br>                        pre[j][k] = pre[i][k];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="骑士周游"><a href="#骑士周游" class="headerlink" title="骑士周游"></a>骑士周游</h3><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220615125612961.png" alt="image20220615125612961"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220615125910165.png" alt="image20220615125910165"></p><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220615131209731.png" alt="image20220615131209731"></p><p>编写思路：</p><ol><li>使用 next 函数获取当前节点可以走的下一步节点的集合</li><li>递归集合中的节点</li><li>当集合中的节点发现无路可走时， step &lt; 棋盘格子数，就需要重设当前格子为未走过，以便之后其他路径可以选择当前格子</li><li>如果遍历结束，step &#x3D;&#x3D; 棋盘格子数，设置变量 finish 已经完成， if( step &lt; X * Y &amp;&amp; !finished ) </li><li>由于 step &lt; 棋盘格子数 有两种情况 1. 没有完成 2. 处于回溯之中，为了保证处于回溯中的数据不被修改 !finished 在完成之后就会变成 false 就不会去重设当前格子。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.horse;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HorseChessBoard</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> X; <span class="hljs-comment">//column</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> Y; <span class="hljs-comment">//row</span><br>    <span class="hljs-comment">//To label the position which has been visited</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> visited[];<br>    <span class="hljs-comment">//To know it successfully finished</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> finished;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        X = <span class="hljs-number">8</span>;<br>        Y = <span class="hljs-number">8</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span>[][] chessBoard = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[X][Y];<br>        visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[X * Y];<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        traversalChessBoard(chessBoard,row-<span class="hljs-number">1</span>, column-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println((end-start) + <span class="hljs-string">&quot; ms&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] ints : chessBoard) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt : ints) &#123;<br>                System.out.print(anInt + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">traversalChessBoard</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] chessBoard, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> column, <span class="hljs-type">int</span> step)</span> &#123;<br>        chessBoard[row][column] = step;<br>        <span class="hljs-comment">//using one-dimension array to present position</span><br>        visited[row * X + column] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//get next point</span><br>        ArrayList&lt;Point&gt; ps = next(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(column, row));<br>        <span class="hljs-comment">//traverse ps</span><br>        <span class="hljs-keyword">while</span> (!ps.isEmpty()) &#123;<br>            <span class="hljs-type">Point</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> ps.remove(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (!visited[p.y * X + p.x]) &#123;<br>                traversalChessBoard(chessBoard, p.y, p.x, step + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//if this position couldn&#x27;t help to successfully finish the task,</span><br>        <span class="hljs-comment">//this position has been traversed and it also could be traversed from other ways</span><br>        <span class="hljs-comment">//value of step is changing with different calls</span><br>        <span class="hljs-comment">//step &lt; X * Y: 1. it doesn&#x27;t finish</span><br>        <span class="hljs-comment">//              2. it is during the procedure of recalls</span><br>        <span class="hljs-keyword">if</span> (step &lt; X * Y &amp;&amp; !finished) &#123;<br>            chessBoard[row][column] = <span class="hljs-number">0</span>;<br>            visited[row * X + column] = <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            finished = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">//To calculate next step that horse could go</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Point&gt; <span class="hljs-title function_">next</span><span class="hljs-params">(Point curPoint)</span> &#123;<br>        ArrayList&lt;Point&gt; ps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Point</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>();<br>        <span class="hljs-comment">//To judge 8 positions that horse could go</span><br>        <span class="hljs-comment">//from the up graph</span><br>        <span class="hljs-comment">//Pos.5</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.6</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.7</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">1</span>) &lt; X &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.0</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">2</span>) &lt; X &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.1</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">2</span>) &lt; X &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">1</span>) &lt; Y) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.2</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">1</span>) &lt; X &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">2</span>) &lt; Y) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.3</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">2</span>) &lt; Y) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.4</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">1</span>) &lt; Y) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-keyword">return</span> ps;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">23380 ms</span><br><span class="hljs-comment">1 8 11 16 3 18 13 64 </span><br><span class="hljs-comment">10 27 2 7 12 15 4 19 </span><br><span class="hljs-comment">53 24 9 28 17 6 63 14 </span><br><span class="hljs-comment">26 39 52 23 62 29 20 5 </span><br><span class="hljs-comment">43 54 25 38 51 22 33 30 </span><br><span class="hljs-comment">40 57 42 61 32 35 48 21 </span><br><span class="hljs-comment">55 44 59 50 37 46 31 34 </span><br><span class="hljs-comment">58 41 56 45 60 49 36 47</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="贪心算法优化"><a href="#贪心算法优化" class="headerlink" title="贪心算法优化"></a>贪心算法优化</h4><p><img src="/2022/06/19/Java-data-structure-and-algorithm/20220615150328050.png" alt="image20220615150328050"></p><p>马儿走的下一步是下一步集合中数目最少的从而减少回溯的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.horse;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HorseChessBoard</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> X; <span class="hljs-comment">//column</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> Y; <span class="hljs-comment">//row</span><br>    <span class="hljs-comment">//To label the position which has been visited</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> visited[];<br>    <span class="hljs-comment">//To know it successfully finished</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> finished;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        X = <span class="hljs-number">8</span>;<br>        Y = <span class="hljs-number">8</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span>[][] chessBoard = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[X][Y];<br>        visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[X * Y];<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        traversalChessBoard(chessBoard,row-<span class="hljs-number">1</span>, column-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println((end-start) + <span class="hljs-string">&quot; ms&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] ints : chessBoard) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt : ints) &#123;<br>                System.out.print(anInt + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">traversalChessBoard</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] chessBoard, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> column, <span class="hljs-type">int</span> step)</span> &#123;<br>        chessBoard[row][column] = step;<br>        <span class="hljs-comment">//using one-dimension array to present position</span><br>        visited[row * X + column] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//get next point</span><br>        ArrayList&lt;Point&gt; ps = next(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(column, row));<br>        <br>        <span class="hljs-comment">//the addition!!!</span><br>        <span class="hljs-comment">//sort points in ps by the size of collections of each next point of this points</span><br>        sort(ps);<br>        <br>        <span class="hljs-comment">//traverse ps</span><br>        <span class="hljs-keyword">while</span> (!ps.isEmpty()) &#123;<br>            <span class="hljs-type">Point</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> ps.remove(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (!visited[p.y * X + p.x]) &#123;<br>                traversalChessBoard(chessBoard, p.y, p.x, step + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//if this position couldn&#x27;t help to successfully finish the task,</span><br>        <span class="hljs-comment">//this position has been traversed and it also could be traversed from other ways</span><br>        <span class="hljs-comment">//value of step is changing with different calls</span><br>        <span class="hljs-comment">//step &lt; X * Y: 1. it doesn&#x27;t finish</span><br>        <span class="hljs-comment">//              2. it is during the procedure of recalls</span><br>        <span class="hljs-keyword">if</span> (step &lt; X * Y &amp;&amp; !finished) &#123;<br>            chessBoard[row][column] = <span class="hljs-number">0</span>;<br>            visited[row * X + column] = <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            finished = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">//To calculate next step that horse could go</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Point&gt; <span class="hljs-title function_">next</span><span class="hljs-params">(Point curPoint)</span> &#123;<br>        ArrayList&lt;Point&gt; ps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Point</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>();<br>        <span class="hljs-comment">//To judge 8 positions that horse could go</span><br>        <span class="hljs-comment">//from the up graph</span><br>        <span class="hljs-comment">//Pos.5</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.6</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.7</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">1</span>) &lt; X &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.0</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">2</span>) &lt; X &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.1</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">2</span>) &lt; X &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">1</span>) &lt; Y) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.2</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">1</span>) &lt; X &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">2</span>) &lt; Y) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.3</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">2</span>) &lt; Y) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-comment">//Pos.4</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">1</span>) &lt; Y) &#123;<br>            ps.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(p1));<br>        &#125;<br>        <span class="hljs-keyword">return</span> ps;<br>    &#125;<br>    <br><span class="hljs-comment">//the addition!!!</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(ArrayList&lt;Point&gt; ps)</span>&#123;<br><span class="hljs-comment">//        ps.sort(new Comparator&lt;Point&gt;() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public int compare(Point o1, Point o2) &#123;</span><br><span class="hljs-comment">//                int size1 = next(o1).size();</span><br><span class="hljs-comment">//                int size2 = next(o2).size();</span><br><span class="hljs-comment">//                if(size1 &lt;size2)&#123;</span><br><span class="hljs-comment">//                    return -1;</span><br><span class="hljs-comment">//                &#125;else if(size1 == size2)&#123;</span><br><span class="hljs-comment">//                    return 0;</span><br><span class="hljs-comment">//                &#125;else &#123;</span><br><span class="hljs-comment">//                    return 1;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br>        ps.sort((p1,p2)-&gt;&#123;<br>            <span class="hljs-keyword">return</span> next(p1).size() - next(p2).size();<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">100 ms</span><br><span class="hljs-comment">1 16 37 32 3 18 47 22 </span><br><span class="hljs-comment">38 31 2 17 48 21 4 19 </span><br><span class="hljs-comment">15 36 49 54 33 64 23 46 </span><br><span class="hljs-comment">30 39 60 35 50 53 20 5 </span><br><span class="hljs-comment">61 14 55 52 63 34 45 24 </span><br><span class="hljs-comment">40 29 62 59 56 51 6 9 </span><br><span class="hljs-comment">13 58 27 42 11 8 25 44 </span><br><span class="hljs-comment">28 41 12 57 26 43 10 7 </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Date Structure</category>
      
      <category>Algorithm</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Java</tag>
      
      <tag>Date Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/17/hello-world/"/>
    <url>/2022/06/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
